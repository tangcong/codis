!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A0	rand.c	57;"	d	file:
A1	rand.c	58;"	d	file:
A2	rand.c	59;"	d	file:
ACTIVE_EXPIRE_CYCLE_FAST	server.h	147;"	d
ACTIVE_EXPIRE_CYCLE_FAST_DURATION	server.h	144;"	d
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP	server.h	143;"	d
ACTIVE_EXPIRE_CYCLE_SLOW	server.h	146;"	d
ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC	server.h	145;"	d
ADDEQU	rand.c	53;"	d	file:
AE_ALL_EVENTS	ae.h	47;"	d
AE_DELETED_EVENT_ID	ae.h	51;"	d
AE_DONT_WAIT	ae.h	48;"	d
AE_ERR	ae.h	39;"	d
AE_FILE_EVENTS	ae.h	45;"	d
AE_NOMORE	ae.h	50;"	d
AE_NONE	ae.h	41;"	d
AE_NOTUSED	ae.h	54;"	d
AE_OK	ae.h	38;"	d
AE_READABLE	ae.h	42;"	d
AE_TIME_EVENTS	ae.h	46;"	d
AE_WRITABLE	ae.h	43;"	d
AF_LOCAL	anet.h	45;"	d
ALLOC	Makefile	/^	echo MALLOC=$(MALLOC) >> .make-settings$/;"	m
AL_START_HEAD	adlist.h	90;"	d
AL_START_HEAD	quicklist.h	166;"	d
AL_START_TAIL	adlist.h	91;"	d
AL_START_TAIL	quicklist.h	167;"	d
ANET_CONNECT_BE_BINDING	anet.c	267;"	d	file:
ANET_CONNECT_NONBLOCK	anet.c	266;"	d	file:
ANET_CONNECT_NONE	anet.c	265;"	d	file:
ANET_ERR	anet.h	37;"	d
ANET_ERR_LEN	anet.h	38;"	d
ANET_H	anet.h	32;"	d
ANET_IP_ONLY	anet.h	42;"	d
ANET_NONE	anet.h	41;"	d
ANET_OK	anet.h	36;"	d
AOF_AUTOSYNC_BYTES	server.h	163;"	d
AOF_FSYNC_ALWAYS	server.h	365;"	d
AOF_FSYNC_EVERYSEC	server.h	366;"	d
AOF_FSYNC_NO	server.h	364;"	d
AOF_OFF	server.h	240;"	d
AOF_ON	server.h	241;"	d
AOF_REWRITE_ITEMS_PER_CMD	server.h	94;"	d
AOF_REWRITE_MIN_SIZE	server.h	93;"	d
AOF_REWRITE_PERC	server.h	92;"	d
AOF_RW_BUF_BLOCK_SIZE	aof.c	60;"	d	file:
AOF_WAIT_REWRITE	server.h	242;"	d
AOF_WRITE_LOG_ERROR_RATE	aof.c	286;"	d	file:
ARN	Makefile	/^	echo WARN=$(WARN) >> .make-settings$/;"	m
AVOID_ERRNO	lzfP.h	100;"	d
BFOVERFLOW_FAIL	bitops.c	279;"	d	file:
BFOVERFLOW_SAT	bitops.c	278;"	d	file:
BFOVERFLOW_WRAP	bitops.c	277;"	d	file:
BIG_ENDIAN	config.h	142;"	d
BIG_ENDIAN	config.h	176;"	d
BINCOLOR	Makefile	/^BINCOLOR="\\033[37;1m"$/;"	m
BIO_AOF_FSYNC	bio.h	40;"	d
BIO_CLOSE_FILE	bio.h	39;"	d
BIO_NUM_OPS	bio.h	41;"	d
BITFIELDOP_GET	bitops.c	393;"	d	file:
BITFIELDOP_INCRBY	bitops.c	395;"	d	file:
BITFIELDOP_SET	bitops.c	394;"	d	file:
BITOP_AND	bitops.c	388;"	d	file:
BITOP_NOT	bitops.c	391;"	d	file:
BITOP_OR	bitops.c	389;"	d	file:
BITOP_XOR	bitops.c	390;"	d	file:
BLOCKED_LIST	server.h	282;"	d
BLOCKED_NONE	server.h	281;"	d
BLOCKED_WAIT	server.h	283;"	d
BUFSIZE	sha1.c	201;"	d	file:
BYTE_ORDER	config.h	149;"	d
BYTE_ORDER	config.h	159;"	d
BYTE_ORDER	config.h	179;"	d
BYTE_ORDER	config.h	181;"	d
C	rand.c	60;"	d	file:
CARRY	rand.c	52;"	d	file:
CCCOLOR	Makefile	/^CCCOLOR="\\033[34m"$/;"	m
CHECK_INPUT	lzfP.h	121;"	d
CLIENTS_CRON_MIN_ITERATIONS	server.c	1039;"	d	file:
CLIENT_ASKING	server.h	255;"	d
CLIENT_BLOCKED	server.h	249;"	d
CLIENT_CLOSE_AFTER_REPLY	server.h	251;"	d
CLIENT_CLOSE_ASAP	server.h	256;"	d
CLIENT_DIRTY_CAS	server.h	250;"	d
CLIENT_DIRTY_EXEC	server.h	258;"	d
CLIENT_FORCE_AOF	server.h	260;"	d
CLIENT_FORCE_REPL	server.h	261;"	d
CLIENT_LUA	server.h	254;"	d
CLIENT_LUA_DEBUG	server.h	273;"	d
CLIENT_LUA_DEBUG_SYNC	server.h	274;"	d
CLIENT_MASTER	server.h	246;"	d
CLIENT_MASTER_FORCE_REPLY	server.h	259;"	d
CLIENT_MONITOR	server.h	247;"	d
CLIENT_MULTI	server.h	248;"	d
CLIENT_PENDING_WRITE	server.h	268;"	d
CLIENT_PREVENT_AOF_PROP	server.h	265;"	d
CLIENT_PREVENT_PROP	server.h	267;"	d
CLIENT_PREVENT_REPL_PROP	server.h	266;"	d
CLIENT_PRE_PSYNC	server.h	262;"	d
CLIENT_PUBSUB	server.h	264;"	d
CLIENT_READONLY	server.h	263;"	d
CLIENT_REPLY_OFF	server.h	270;"	d
CLIENT_REPLY_SKIP	server.h	272;"	d
CLIENT_REPLY_SKIP_NEXT	server.h	271;"	d
CLIENT_SLAVE	server.h	245;"	d
CLIENT_SLOTSMGRT_ASYNC_CACHED_CLIENT	server.h	276;"	d
CLIENT_SLOTSMGRT_ASYNC_NORMAL_CLIENT	server.h	277;"	d
CLIENT_TYPE_MASTER	server.h	294;"	d
CLIENT_TYPE_NORMAL	server.h	291;"	d
CLIENT_TYPE_OBUF_COUNT	server.h	295;"	d
CLIENT_TYPE_PUBSUB	server.h	293;"	d
CLIENT_TYPE_SLAVE	server.h	292;"	d
CLIENT_UNBLOCKED	server.h	252;"	d
CLIENT_UNIX_SOCKET	server.h	257;"	d
CLI_HELP_COMMAND	redis-cli.c	205;"	d	file:
CLI_HELP_GROUP	redis-cli.c	206;"	d	file:
CLUSTERMSG_FLAG0_FORCEACK	cluster.h	253;"	d
CLUSTERMSG_FLAG0_PAUSED	cluster.h	252;"	d
CLUSTERMSG_MIN_LEN	cluster.h	248;"	d
CLUSTERMSG_TYPE_FAIL	cluster.h	159;"	d
CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK	cluster.h	162;"	d
CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST	cluster.h	161;"	d
CLUSTERMSG_TYPE_MEET	cluster.h	158;"	d
CLUSTERMSG_TYPE_MFSTART	cluster.h	164;"	d
CLUSTERMSG_TYPE_PING	cluster.h	156;"	d
CLUSTERMSG_TYPE_PONG	cluster.h	157;"	d
CLUSTERMSG_TYPE_PUBLISH	cluster.h	160;"	d
CLUSTERMSG_TYPE_UPDATE	cluster.h	163;"	d
CLUSTER_BLACKLIST_TTL	cluster.c	1074;"	d	file:
CLUSTER_BROADCAST_ALL	cluster.c	2307;"	d	file:
CLUSTER_BROADCAST_LOCAL_SLAVES	cluster.c	2308;"	d	file:
CLUSTER_CANT_FAILOVER_DATA_AGE	cluster.h	70;"	d
CLUSTER_CANT_FAILOVER_EXPIRED	cluster.h	72;"	d
CLUSTER_CANT_FAILOVER_NONE	cluster.h	69;"	d
CLUSTER_CANT_FAILOVER_RELOG_PERIOD	cluster.h	74;"	d
CLUSTER_CANT_FAILOVER_WAITING_DELAY	cluster.h	71;"	d
CLUSTER_CANT_FAILOVER_WAITING_VOTES	cluster.h	73;"	d
CLUSTER_DEFAULT_MIGRATION_BARRIER	cluster.h	23;"	d
CLUSTER_DEFAULT_NODE_TIMEOUT	cluster.h	16;"	d
CLUSTER_DEFAULT_REQUIRE_FULL_COVERAGE	cluster.h	18;"	d
CLUSTER_DEFAULT_SLAVE_VALIDITY	cluster.h	17;"	d
CLUSTER_FAIL	cluster.h	10;"	d
CLUSTER_FAILOVER_DELAY	cluster.h	22;"	d
CLUSTER_FAIL_REPORT_VALIDITY_MULT	cluster.h	19;"	d
CLUSTER_FAIL_UNDO_TIME_ADD	cluster.h	21;"	d
CLUSTER_FAIL_UNDO_TIME_MULT	cluster.h	20;"	d
CLUSTER_MAX_REJOIN_DELAY	cluster.c	3466;"	d	file:
CLUSTER_MF_PAUSE_MULT	cluster.h	25;"	d
CLUSTER_MF_TIMEOUT	cluster.h	24;"	d
CLUSTER_MIN_REJOIN_DELAY	cluster.c	3467;"	d	file:
CLUSTER_NAMELEN	cluster.h	11;"	d
CLUSTER_NODE_FAIL	cluster.h	52;"	d
CLUSTER_NODE_HANDSHAKE	cluster.h	54;"	d
CLUSTER_NODE_MASTER	cluster.h	49;"	d
CLUSTER_NODE_MEET	cluster.h	56;"	d
CLUSTER_NODE_MIGRATE_TO	cluster.h	57;"	d
CLUSTER_NODE_MYSELF	cluster.h	53;"	d
CLUSTER_NODE_NOADDR	cluster.h	55;"	d
CLUSTER_NODE_NULL_NAME	cluster.h	58;"	d
CLUSTER_NODE_PFAIL	cluster.h	51;"	d
CLUSTER_NODE_SLAVE	cluster.h	50;"	d
CLUSTER_OK	cluster.h	9;"	d
CLUSTER_PORT_INCR	cluster.h	12;"	d
CLUSTER_PROTO_VER	cluster.h	222;"	d
CLUSTER_REDIR_ASK	cluster.h	32;"	d
CLUSTER_REDIR_CROSS_SLOT	cluster.h	30;"	d
CLUSTER_REDIR_DOWN_STATE	cluster.h	34;"	d
CLUSTER_REDIR_DOWN_UNBOUND	cluster.h	35;"	d
CLUSTER_REDIR_MOVED	cluster.h	33;"	d
CLUSTER_REDIR_NONE	cluster.h	29;"	d
CLUSTER_REDIR_UNSTABLE	cluster.h	31;"	d
CLUSTER_SLAVE_MIGRATION_DELAY	cluster.h	26;"	d
CLUSTER_SLOTS	cluster.h	8;"	d
CLUSTER_TODO_FSYNC_CONFIG	cluster.h	148;"	d
CLUSTER_TODO_HANDLE_FAILOVER	cluster.h	145;"	d
CLUSTER_TODO_SAVE_CONFIG	cluster.h	147;"	d
CLUSTER_TODO_UPDATE_STATE	cluster.h	146;"	d
CLUSTER_WRITABLE_DELAY	cluster.c	3468;"	d	file:
CMD_ADMIN	server.h	180;"	d
CMD_ASKING	server.h	188;"	d
CMD_CALL_FULL	server.h	417;"	d
CMD_CALL_NONE	server.h	411;"	d
CMD_CALL_PROPAGATE	server.h	416;"	d
CMD_CALL_PROPAGATE_AOF	server.h	414;"	d
CMD_CALL_PROPAGATE_REPL	server.h	415;"	d
CMD_CALL_SLOWLOG	server.h	412;"	d
CMD_CALL_STATS	server.h	413;"	d
CMD_DENYOOM	server.h	178;"	d
CMD_FAST	server.h	189;"	d
CMD_LOADING	server.h	185;"	d
CMD_NOSCRIPT	server.h	182;"	d
CMD_NOT_USED_1	server.h	179;"	d
CMD_PUBSUB	server.h	181;"	d
CMD_RANDOM	server.h	183;"	d
CMD_READONLY	server.h	177;"	d
CMD_SKIP_MONITOR	server.h	187;"	d
CMD_SORT_FOR_SCRIPT	server.h	184;"	d
CMD_STALE	server.h	186;"	d
CMD_WRITE	server.h	176;"	d
COMPRESS_MAX	quicklist.c	106;"	d	file:
CONFIG_AUTHPASS_MAX_LEN	server.h	98;"	d
CONFIG_BGSAVE_RETRY_DELAY	server.h	107;"	d
CONFIG_BINDADDR_MAX	server.h	139;"	d
CONFIG_DEFAULT_ACTIVE_REHASHING	server.h	133;"	d
CONFIG_DEFAULT_AOF_FILENAME	server.h	130;"	d
CONFIG_DEFAULT_AOF_FSYNC	server.h	367;"	d
CONFIG_DEFAULT_AOF_LOAD_TRUNCATED	server.h	132;"	d
CONFIG_DEFAULT_AOF_NO_FSYNC_ON_REWRITE	server.h	131;"	d
CONFIG_DEFAULT_AOF_REWRITE_INCREMENTAL_FSYNC	server.h	134;"	d
CONFIG_DEFAULT_CLIENT_TIMEOUT	server.h	83;"	d
CONFIG_DEFAULT_CLUSTER_CONFIG_FILE	server.h	110;"	d
CONFIG_DEFAULT_DAEMONIZE	server.h	111;"	d
CONFIG_DEFAULT_DBNUM	server.h	84;"	d
CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES	server.h	381;"	d
CONFIG_DEFAULT_HZ	server.h	78;"	d
CONFIG_DEFAULT_LATENCY_MONITOR_THRESHOLD	server.h	141;"	d
CONFIG_DEFAULT_LOGFILE	server.h	115;"	d
CONFIG_DEFAULT_MAXMEMORY	server.h	128;"	d
CONFIG_DEFAULT_MAXMEMORY_POLICY	server.h	395;"	d
CONFIG_DEFAULT_MAXMEMORY_SAMPLES	server.h	129;"	d
CONFIG_DEFAULT_MAX_CLIENTS	server.h	97;"	d
CONFIG_DEFAULT_MIN_SLAVES_MAX_LAG	server.h	136;"	d
CONFIG_DEFAULT_MIN_SLAVES_TO_WRITE	server.h	135;"	d
CONFIG_DEFAULT_PID_FILE	server.h	108;"	d
CONFIG_DEFAULT_PROTECTED_MODE	server.h	114;"	d
CONFIG_DEFAULT_RDB_CHECKSUM	server.h	119;"	d
CONFIG_DEFAULT_RDB_COMPRESSION	server.h	118;"	d
CONFIG_DEFAULT_RDB_FILENAME	server.h	120;"	d
CONFIG_DEFAULT_REPL_BACKLOG_SIZE	server.h	104;"	d
CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT	server.h	105;"	d
CONFIG_DEFAULT_REPL_DISABLE_TCP_NODELAY	server.h	127;"	d
CONFIG_DEFAULT_REPL_DISKLESS_SYNC	server.h	121;"	d
CONFIG_DEFAULT_REPL_DISKLESS_SYNC_DELAY	server.h	122;"	d
CONFIG_DEFAULT_REPL_PING_SLAVE_PERIOD	server.h	101;"	d
CONFIG_DEFAULT_REPL_TIMEOUT	server.h	100;"	d
CONFIG_DEFAULT_SERVER_PORT	server.h	81;"	d
CONFIG_DEFAULT_SLAVE_ANNOUNCE_IP	server.h	125;"	d
CONFIG_DEFAULT_SLAVE_ANNOUNCE_PORT	server.h	126;"	d
CONFIG_DEFAULT_SLAVE_PRIORITY	server.h	99;"	d
CONFIG_DEFAULT_SLAVE_READ_ONLY	server.h	124;"	d
CONFIG_DEFAULT_SLAVE_SERVE_STALE_DATA	server.h	123;"	d
CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN	server.h	95;"	d
CONFIG_DEFAULT_SLOWLOG_MAX_LEN	server.h	96;"	d
CONFIG_DEFAULT_STOP_WRITES_ON_BGSAVE_ERROR	server.h	117;"	d
CONFIG_DEFAULT_SYSLOG_ENABLED	server.h	116;"	d
CONFIG_DEFAULT_SYSLOG_IDENT	server.h	109;"	d
CONFIG_DEFAULT_TCP_BACKLOG	server.h	82;"	d
CONFIG_DEFAULT_TCP_KEEPALIVE	server.h	113;"	d
CONFIG_DEFAULT_UNIX_SOCKET_PERM	server.h	112;"	d
CONFIG_DEFAULT_VERBOSITY	server.h	349;"	d
CONFIG_FDSET_INCR	server.h	169;"	d
CONFIG_MAX_HZ	server.h	80;"	d
CONFIG_MAX_LINE	server.h	85;"	d
CONFIG_MIN_HZ	server.h	79;"	d
CONFIG_MIN_RESERVED_FDS	server.h	140;"	d
CONFIG_REPL_BACKLOG_MIN_SIZE	server.h	106;"	d
CONFIG_REPL_SYNCIO_TIMEOUT	server.h	334;"	d
CONFIG_RUN_ID_SIZE	server.h	102;"	d
CRC64_H	crc64.h	2;"	d
CRON_DBS_PER_CALL	server.h	86;"	d
C_ERR	server.h	75;"	d
C_OK	server.h	74;"	d
ClusterNode	redis-trib.rb	/^class ClusterNode$/;"	c
D	debugmacro.h	34;"	d
D	quicklist.c	63;"	d	file:
D	quicklist.c	65;"	d	file:
DEBUG	Makefile	/^DEBUG=-g -ggdb$/;"	m
DEPENDENCY_TARGETS	Makefile	/^DEPENDENCY_TARGETS=hiredis linenoise lua geohash-int$/;"	m
DFLAGS	Makefile	/^	echo LDFLAGS=$(LDFLAGS) >> .make-settings$/;"	m
DICT_ERR	dict.h	42;"	d
DICT_HT_INITIAL_SIZE	dict.h	100;"	d
DICT_NOTUSED	dict.h	45;"	d
DICT_OK	dict.h	41;"	d
DICT_STATS_VECTLEN	dict.c	1007;"	d	file:
EDIS_CFLAGS	Makefile	/^	echo REDIS_CFLAGS=$(REDIS_CFLAGS) >> .make-settings$/;"	m
EDIS_LDFLAGS	Makefile	/^	echo REDIS_LDFLAGS=$(REDIS_LDFLAGS) >> .make-settings$/;"	m
ENDCOLOR	Makefile	/^ENDCOLOR="\\033[0m"$/;"	m
ERR	quicklist.c	1437;"	d	file:
ERROR	quicklist.c	1431;"	d	file:
ERROR	redis-check-aof.c	39;"	d	file:
EVICTION_SAMPLES_ARRAY_SIZE	server.c	3478;"	d	file:
FILL_MAX	quicklist.c	116;"	d	file:
FINAL_CFLAGS	Makefile	/^FINAL_CFLAGS=$(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS) $(REDIS_CFLAGS) -I..\/deps\/geohash-int$/;"	m
FINAL_LDFLAGS	Makefile	/^FINAL_LDFLAGS=$(LDFLAGS) $(REDIS_LDFLAGS) $(DEBUG)$/;"	m
FINAL_LIBS	Makefile	/^FINAL_LIBS=-lm$/;"	m
FLAGS	Makefile	/^	echo CFLAGS=$(CFLAGS) >> .make-settings$/;"	m
FRST	lzf_c.c	48;"	d	file:
GNUC_VERSION	config.h	198;"	d
HASHTABLE_MIN_FILL	server.h	172;"	d
HASH_SLOTS_MASK	server.h	509;"	d
HASH_SLOTS_SIZE	server.h	510;"	d
HAVE_ATOMIC	config.h	200;"	d
HAVE_ATOMIC	config.h	204;"	d
HAVE_BACKTRACE	config.h	66;"	d
HAVE_EPOLL	config.h	76;"	d
HAVE_EVPORT	config.h	86;"	d
HAVE_KQUEUE	config.h	80;"	d
HAVE_MALLOC_SIZE	zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	zmalloc.h	60;"	d
HAVE_MSG_NOSIGNAL	config.h	71;"	d
HAVE_PROC_MAPS	config.h	54;"	d
HAVE_PROC_SMAPS	config.h	55;"	d
HAVE_PROC_SOMAXCONN	config.h	56;"	d
HAVE_PROC_STAT	config.h	53;"	d
HAVE_SETPROCTITLE	setproctitle.c	42;"	d	file:
HAVE_SYNC_FILE_RANGE	config.h	102;"	d
HAVE_SYNC_FILE_RANGE	config.h	106;"	d
HAVE_TASKINFO	config.h	61;"	d
HIGH	rand.c	49;"	d	file:
HI_BIT	rand.c	66;"	d	file:
HLL_BITS	hyperloglog.c	197;"	d	file:
HLL_DENSE	hyperloglog.c	201;"	d	file:
HLL_DENSE_GET_REGISTER	hyperloglog.c	337;"	d	file:
HLL_DENSE_SET_REGISTER	hyperloglog.c	349;"	d	file:
HLL_DENSE_SIZE	hyperloglog.c	200;"	d	file:
HLL_HDR_SIZE	hyperloglog.c	199;"	d	file:
HLL_INVALIDATE_CACHE	hyperloglog.c	191;"	d	file:
HLL_MAX_ENCODING	hyperloglog.c	204;"	d	file:
HLL_P	hyperloglog.c	194;"	d	file:
HLL_P_MASK	hyperloglog.c	196;"	d	file:
HLL_RAW	hyperloglog.c	203;"	d	file:
HLL_REGISTERS	hyperloglog.c	195;"	d	file:
HLL_REGISTER_MAX	hyperloglog.c	198;"	d	file:
HLL_SPARSE	hyperloglog.c	202;"	d	file:
HLL_SPARSE_IS_VAL	hyperloglog.c	367;"	d	file:
HLL_SPARSE_IS_XZERO	hyperloglog.c	366;"	d	file:
HLL_SPARSE_IS_ZERO	hyperloglog.c	365;"	d	file:
HLL_SPARSE_VAL_BIT	hyperloglog.c	364;"	d	file:
HLL_SPARSE_VAL_LEN	hyperloglog.c	371;"	d	file:
HLL_SPARSE_VAL_MAX_LEN	hyperloglog.c	373;"	d	file:
HLL_SPARSE_VAL_MAX_VALUE	hyperloglog.c	372;"	d	file:
HLL_SPARSE_VAL_SET	hyperloglog.c	376;"	d	file:
HLL_SPARSE_VAL_VALUE	hyperloglog.c	370;"	d	file:
HLL_SPARSE_XZERO_BIT	hyperloglog.c	363;"	d	file:
HLL_SPARSE_XZERO_LEN	hyperloglog.c	369;"	d	file:
HLL_SPARSE_XZERO_MAX_LEN	hyperloglog.c	375;"	d	file:
HLL_SPARSE_XZERO_SET	hyperloglog.c	382;"	d	file:
HLL_SPARSE_ZERO_LEN	hyperloglog.c	368;"	d	file:
HLL_SPARSE_ZERO_MAX_LEN	hyperloglog.c	374;"	d	file:
HLL_SPARSE_ZERO_SET	hyperloglog.c	379;"	d	file:
HLL_TEST_CYCLES	hyperloglog.c	1350;"	d	file:
HLL_VALID_CACHE	hyperloglog.c	192;"	d	file:
HLOG	lzfP.h	55;"	d
HSIZE	lzf_c.c	39;"	d	file:
IDX	lzf_c.c	51;"	d	file:
IDX	lzf_c.c	53;"	d	file:
IDX	lzf_c.c	55;"	d	file:
IEEE_POLY	crc32.c	/^static const uint32_t IEEE_POLY = 0xedb88320;$/;"	v	file:
INIT_HTAB	lzfP.h	91;"	d
INIT_SETPROCTITLE_REPLACEMENT	config.h	126;"	d
INSTALL	Makefile	/^	INSTALL=cp -pf$/;"	m
INSTALL	Makefile	/^INSTALL=install$/;"	m
INSTALL_BIN	Makefile	/^INSTALL_BIN=$(PREFIX)\/bin$/;"	m
INT24_MAX	ziplist.c	135;"	d	file:
INT24_MIN	ziplist.c	136;"	d	file:
INTSET_ENC_INT16	intset.c	40;"	d	file:
INTSET_ENC_INT32	intset.c	41;"	d	file:
INTSET_ENC_INT64	intset.c	42;"	d	file:
LATENCY_DIST_DEFAULT_INTERVAL	redis-cli.c	1519;"	d	file:
LATENCY_GRAPH_COLS	latency.c	515;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	redis-cli.c	1472;"	d	file:
LATENCY_SAMPLE_RATE	redis-cli.c	1471;"	d	file:
LATENCY_TS_LEN	latency.h	37;"	d
LDB_BREAKPOINTS_MAX	scripting.c	58;"	d	file:
LDB_MAX_LEN_DEFAULT	scripting.c	59;"	d	file:
LDB_MAX_VALUES_DEPTH	scripting.c	1853;"	d	file:
LINKCOLOR	Makefile	/^LINKCOLOR="\\033[34;1m"$/;"	m
LIST_HEAD	server.h	337;"	d
LIST_TAIL	server.h	338;"	d
LITTLE_ENDIAN	config.h	141;"	d
LITTLE_ENDIAN	config.h	173;"	d
LL_DEBUG	server.h	344;"	d
LL_NOTICE	server.h	346;"	d
LL_RAW	server.h	348;"	d
LL_VERBOSE	server.h	345;"	d
LL_WARNING	server.h	347;"	d
LOG_MAX_LEN	server.h	91;"	d
LONG_STR_SIZE	server.h	162;"	d
LOOKUP_NONE	server.h	1445;"	d
LOOKUP_NOTOUCH	server.h	1446;"	d
LOW	rand.c	48;"	d	file:
LRUTestGenKey	redis-cli.c	/^void LRUTestGenKey(char *buf, size_t buflen) {$/;"	f	signature:(char *buf, size_t buflen)
LRUTestMode	redis-cli.c	/^static void LRUTestMode(void) {$/;"	f	file:	signature:(void)
LRU_BITS	server.h	463;"	d
LRU_CLOCK	server.h	478;"	d
LRU_CLOCK_MAX	server.h	464;"	d
LRU_CLOCK_RESOLUTION	server.h	465;"	d
LRU_CYCLE_PERIOD	redis-cli.c	2419;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	redis-cli.c	2420;"	d	file:
LUA_CMD_OBJCACHE_MAX_LEN	scripting.c	347;"	d	file:
LUA_CMD_OBJCACHE_SIZE	scripting.c	346;"	d	file:
LUA_GC_CYCLE_PERIOD	scripting.c	1338;"	d	file:
LUA_SCRIPT_TIME_LIMIT	server.h	398;"	d
LZFP_h	lzfP.h	38;"	d
LZF_H	lzf.h	38;"	d
LZF_HSLOT	lzfP.h	/^  typedef const u8 *LZF_HSLOT;$/;"	t
LZF_HSLOT	lzfP.h	/^  typedef unsigned int LZF_HSLOT;$/;"	t
LZF_HSLOT_BIAS	lzfP.h	159;"	d
LZF_HSLOT_BIAS	lzfP.h	162;"	d
LZF_STATE	lzfP.h	/^typedef LZF_HSLOT LZF_STATE[1 << (HLOG)];$/;"	t
LZF_STATE_ARG	lzfP.h	109;"	d
LZF_USE_OFFSETS	lzfP.h	145;"	d
LZF_VERSION	lzf.h	49;"	d
MAKECOLOR	Makefile	/^MAKECOLOR="\\033[32;1m"$/;"	m
MALLOC	Makefile	/^	MALLOC=jemalloc$/;"	m
MALLOC	Makefile	/^	MALLOC=libc$/;"	m
MALLOC	Makefile	/^	MALLOC=tcmalloc$/;"	m
MALLOC	Makefile	/^	MALLOC=tcmalloc_minimal$/;"	m
MASK	rand.c	47;"	d	file:
MAXMEMORY_ALLKEYS_LRU	server.h	392;"	d
MAXMEMORY_ALLKEYS_RANDOM	server.h	393;"	d
MAXMEMORY_EVICTION_POOL_SIZE	server.h	498;"	d
MAXMEMORY_NO_EVICTION	server.h	394;"	d
MAXMEMORY_VOLATILE_LRU	server.h	389;"	d
MAXMEMORY_VOLATILE_RANDOM	server.h	391;"	d
MAXMEMORY_VOLATILE_TTL	server.h	390;"	d
MAX_ACCEPTS_PER_CALL	networking.c	617;"	d	file:
MAX_CLUSTER_ACCEPTS_PER_CALL	cluster.c	573;"	d	file:
MAX_EVENT_BATCHSZ	ae_evport.c	66;"	d	file:
MAX_LIT	lzf_c.c	74;"	d	file:
MAX_OFF	lzf_c.c	75;"	d	file:
MAX_REF	lzf_c.c	76;"	d	file:
MEMTEST_32BIT	memtest.c	44;"	d	file:
MEMTEST_64BIT	memtest.c	46;"	d	file:
MEMTEST_BACKUP_WORDS	memtest.c	275;"	d	file:
MEMTEST_DECACHE_SIZE	memtest.c	279;"	d	file:
MEMTEST_MAX_REGIONS	debug.c	914;"	d	file:
MIGRATE_SOCKET_CACHE_ITEMS	cluster.c	4534;"	d	file:
MIGRATE_SOCKET_CACHE_TTL	cluster.c	4535;"	d	file:
MIN_COMPRESS_BYTES	quicklist.c	54;"	d	file:
MIN_COMPRESS_IMPROVE	quicklist.c	59;"	d	file:
MUL	rand.c	50;"	d	file:
MurmurHash64A	hyperloglog.c	/^uint64_t MurmurHash64A (const void * key, int len, unsigned int seed) {$/;"	f	signature:(const void * key, int len, unsigned int seed)
N	rand.c	46;"	d	file:
NET_FIRST_BIND_ADDR	server.h	444;"	d
NET_IP_STR_LEN	server.h	137;"	d
NET_MAX_WRITES_PER_EVENT	server.h	87;"	d
NET_PEER_ID_LEN	server.h	138;"	d
NEXT	lzf_c.c	49;"	d	file:
NOTIFY_ALL	server.h	441;"	d
NOTIFY_EVICTED	server.h	440;"	d
NOTIFY_EXPIRED	server.h	439;"	d
NOTIFY_GENERIC	server.h	433;"	d
NOTIFY_HASH	server.h	437;"	d
NOTIFY_KEYEVENT	server.h	432;"	d
NOTIFY_KEYSPACE	server.h	431;"	d
NOTIFY_LIST	server.h	435;"	d
NOTIFY_SET	server.h	436;"	d
NOTIFY_STRING	server.h	434;"	d
NOTIFY_ZSET	server.h	438;"	d
OBJ_ENCODING_EMBSTR	server.h	209;"	d
OBJ_ENCODING_EMBSTR_SIZE_LIMIT	object.c	88;"	d	file:
OBJ_ENCODING_HT	server.h	203;"	d
OBJ_ENCODING_INT	server.h	202;"	d
OBJ_ENCODING_INTSET	server.h	207;"	d
OBJ_ENCODING_LINKEDLIST	server.h	205;"	d
OBJ_ENCODING_QUICKLIST	server.h	210;"	d
OBJ_ENCODING_RAW	server.h	201;"	d
OBJ_ENCODING_SKIPLIST	server.h	208;"	d
OBJ_ENCODING_ZIPLIST	server.h	206;"	d
OBJ_ENCODING_ZIPMAP	server.h	204;"	d
OBJ_HASH	server.h	196;"	d
OBJ_HASH_KEY	server.h	1093;"	d
OBJ_HASH_MAX_ZIPLIST_ENTRIES	server.h	370;"	d
OBJ_HASH_MAX_ZIPLIST_VALUE	server.h	371;"	d
OBJ_HASH_VALUE	server.h	1094;"	d
OBJ_LIST	server.h	193;"	d
OBJ_LIST_COMPRESS_DEPTH	server.h	378;"	d
OBJ_LIST_MAX_ZIPLIST_SIZE	server.h	377;"	d
OBJ_SET	server.h	194;"	d
OBJ_SET_EX	t_string.c	64;"	d	file:
OBJ_SET_MAX_INTSET_ENTRIES	server.h	372;"	d
OBJ_SET_NO_FLAGS	t_string.c	61;"	d	file:
OBJ_SET_NX	t_string.c	62;"	d	file:
OBJ_SET_PX	t_string.c	65;"	d	file:
OBJ_SET_XX	t_string.c	63;"	d	file:
OBJ_SHARED_BULKHDR_LEN	server.h	90;"	d
OBJ_SHARED_INTEGERS	server.h	89;"	d
OBJ_STRING	server.h	192;"	d
OBJ_ZSET	server.h	195;"	d
OBJ_ZSET_MAX_ZIPLIST_ENTRIES	server.h	373;"	d
OBJ_ZSET_MAX_ZIPLIST_VALUE	server.h	374;"	d
OK	quicklist.c	1429;"	d	file:
OPT	Makefile	/^OPT=$(OPTIMIZATION)$/;"	m
OPTIMIZATION	Makefile	/^OPTIMIZATION?=-O2$/;"	m
OPVAL_DIRTY_LL	t_zset.c	1629;"	d	file:
OPVAL_DIRTY_ROBJ	t_zset.c	1628;"	d	file:
OPVAL_VALID_LL	t_zset.c	1630;"	d	file:
OUTPUT_CSV	redis-cli.c	61;"	d	file:
OUTPUT_RAW	redis-cli.c	60;"	d	file:
OUTPUT_STANDARD	redis-cli.c	59;"	d	file:
PDP_ENDIAN	config.h	143;"	d
PIPEMODE_WRITE_LOOP_MAX_BYTES	redis-cli.c	1777;"	d	file:
PREFIX	Makefile	/^PREFIX?=\/usr\/local$/;"	m
PREFIX_SIZE	zmalloc.c	48;"	d	file:
PREFIX_SIZE	zmalloc.c	51;"	d	file:
PREFIX_SIZE	zmalloc.c	53;"	d	file:
PROPAGATE_AOF	server.h	421;"	d
PROPAGATE_NONE	server.h	420;"	d
PROPAGATE_REPL	server.h	422;"	d
PROTO_INLINE_MAX_SIZE	server.h	160;"	d
PROTO_IOBUF_LEN	server.h	158;"	d
PROTO_MAX_QUERYBUF_LEN	server.h	157;"	d
PROTO_MBULK_BIG_ARG	server.h	161;"	d
PROTO_REPLY_CHUNK_BYTES	server.h	159;"	d
PROTO_REQ_INLINE	server.h	286;"	d
PROTO_REQ_MULTIBULK	server.h	287;"	d
PROTO_SHARED_SELECT_CMDS	server.h	88;"	d
PSYNC_CONTINUE	replication.c	1277;"	d	file:
PSYNC_FULLRESYNC	replication.c	1278;"	d	file:
PSYNC_NOT_SUPPORTED	replication.c	1279;"	d	file:
PSYNC_WAIT_REPLY	replication.c	1276;"	d	file:
PSYNC_WRITE_ERROR	replication.c	1275;"	d	file:
PT	Makefile	/^	echo OPT=$(OPT) >> .make-settings$/;"	m
QL_TEST_VERBOSE	quicklist.c	1447;"	d	file:
QUICKLIST_HEAD	quicklist.h	100;"	d
QUICKLIST_NOCOMPRESS	quicklist.h	108;"	d
QUICKLIST_NODE_CONTAINER_NONE	quicklist.h	111;"	d
QUICKLIST_NODE_CONTAINER_ZIPLIST	quicklist.h	112;"	d
QUICKLIST_NODE_ENCODING_LZF	quicklist.h	105;"	d
QUICKLIST_NODE_ENCODING_RAW	quicklist.h	104;"	d
QUICKLIST_TAIL	quicklist.h	101;"	d
QUIET_CC	Makefile	/^QUIET_CC = @printf '    %b %b\\n' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
QUIET_INSTALL	Makefile	/^QUIET_INSTALL = @printf '    %b %b\\n' $(LINKCOLOR)INSTALL$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
QUIET_LINK	Makefile	/^QUIET_LINK = @printf '    %b %b\\n' $(LINKCOLOR)LINK$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
R0	sha1.c	47;"	d	file:
R1	sha1.c	48;"	d	file:
R2	sha1.c	49;"	d	file:
R3	sha1.c	50;"	d	file:
R4	sha1.c	51;"	d	file:
RADIUS_COORDS	geo.c	457;"	d	file:
RADIUS_MEMBER	geo.c	458;"	d	file:
RANDPTR_INITIAL_SIZE	redis-benchmark.c	50;"	d	file:
RDB_14BITLEN	rdb.h	57;"	d
RDB_14BITLEN	server.h	226;"	d
RDB_32BITLEN	rdb.h	58;"	d
RDB_32BITLEN	server.h	227;"	d
RDB_6BITLEN	rdb.h	56;"	d
RDB_6BITLEN	server.h	225;"	d
RDB_CHECK_DOING_CHECK_SUM	redis-check-rdb.c	59;"	d	file:
RDB_CHECK_DOING_READ_AUX	redis-check-rdb.c	61;"	d	file:
RDB_CHECK_DOING_READ_EXPIRE	redis-check-rdb.c	56;"	d	file:
RDB_CHECK_DOING_READ_KEY	redis-check-rdb.c	57;"	d	file:
RDB_CHECK_DOING_READ_LEN	redis-check-rdb.c	60;"	d	file:
RDB_CHECK_DOING_READ_OBJECT_VALUE	redis-check-rdb.c	58;"	d	file:
RDB_CHECK_DOING_READ_TYPE	redis-check-rdb.c	55;"	d	file:
RDB_CHECK_DOING_START	redis-check-rdb.c	54;"	d	file:
RDB_CHILD_TYPE_DISK	server.h	426;"	d
RDB_CHILD_TYPE_NONE	server.h	425;"	d
RDB_CHILD_TYPE_SOCKET	server.h	427;"	d
RDB_ENCVAL	rdb.h	59;"	d
RDB_ENCVAL	server.h	228;"	d
RDB_ENC_INT16	rdb.h	66;"	d
RDB_ENC_INT16	server.h	235;"	d
RDB_ENC_INT32	rdb.h	67;"	d
RDB_ENC_INT32	server.h	236;"	d
RDB_ENC_INT8	rdb.h	65;"	d
RDB_ENC_INT8	server.h	234;"	d
RDB_ENC_LZF	rdb.h	68;"	d
RDB_ENC_LZF	server.h	237;"	d
RDB_EOF_MARK_SIZE	server.h	103;"	d
RDB_LENERR	rdb.h	60;"	d
RDB_LENERR	server.h	229;"	d
RDB_LOAD_ENC	rdb.c	45;"	d	file:
RDB_LOAD_NONE	rdb.c	44;"	d	file:
RDB_LOAD_PLAIN	rdb.c	46;"	d	file:
RDB_OPCODE_AUX	rdb.h	92;"	d
RDB_OPCODE_EOF	rdb.h	97;"	d
RDB_OPCODE_EXPIRETIME	rdb.h	95;"	d
RDB_OPCODE_EXPIRETIME_MS	rdb.h	94;"	d
RDB_OPCODE_RESIZEDB	rdb.h	93;"	d
RDB_OPCODE_SELECTDB	rdb.h	96;"	d
RDB_TYPE_HASH	rdb.h	76;"	d
RDB_TYPE_HASH_ZIPLIST	rdb.h	84;"	d
RDB_TYPE_HASH_ZIPMAP	rdb.h	80;"	d
RDB_TYPE_LIST	rdb.h	73;"	d
RDB_TYPE_LIST_QUICKLIST	rdb.h	85;"	d
RDB_TYPE_LIST_ZIPLIST	rdb.h	81;"	d
RDB_TYPE_SET	rdb.h	74;"	d
RDB_TYPE_SET_INTSET	rdb.h	82;"	d
RDB_TYPE_STRING	rdb.h	72;"	d
RDB_TYPE_ZSET	rdb.h	75;"	d
RDB_TYPE_ZSET_ZIPLIST	rdb.h	83;"	d
RDB_VERSION	rdb.h	41;"	d
REDIS_AGGR_MAX	t_zset.c	1917;"	d	file:
REDIS_AGGR_MIN	t_zset.c	1916;"	d	file:
REDIS_AGGR_SUM	t_zset.c	1915;"	d	file:
REDIS_BENCHMARK_NAME	Makefile	/^REDIS_BENCHMARK_NAME=redis-benchmark$/;"	m
REDIS_BENCHMARK_OBJ	Makefile	/^REDIS_BENCHMARK_OBJ=ae.o anet.o redis-benchmark.o adlist.o zmalloc.o redis-benchmark.o$/;"	m
REDIS_BUILD_ID	release.h	3;"	d
REDIS_CC	Makefile	/^REDIS_CC=$(QUIET_CC)$(CC) $(FINAL_CFLAGS)$/;"	m
REDIS_CHECK_AOF_NAME	Makefile	/^REDIS_CHECK_AOF_NAME=redis-check-aof$/;"	m
REDIS_CHECK_AOF_OBJ	Makefile	/^REDIS_CHECK_AOF_OBJ=redis-check-aof.o$/;"	m
REDIS_CHECK_RDB_NAME	Makefile	/^REDIS_CHECK_RDB_NAME=redis-check-rdb$/;"	m
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	redis-cli.c	63;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	redis-cli.c	65;"	d	file:
REDIS_CLI_HISTFILE_ENV	redis-cli.c	64;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	redis-cli.c	62;"	d	file:
REDIS_CLI_NAME	Makefile	/^REDIS_CLI_NAME=redis-cli$/;"	m
REDIS_CLI_OBJ	Makefile	/^REDIS_CLI_OBJ=anet.o adlist.o redis-cli.o zmalloc.o release.o anet.o ae.o crc64.o$/;"	m
REDIS_CLI_RCFILE_DEFAULT	redis-cli.c	67;"	d	file:
REDIS_CLI_RCFILE_ENV	redis-cli.c	66;"	d	file:
REDIS_COMPARE_BINARY	object.c	466;"	d	file:
REDIS_COMPARE_COLL	object.c	467;"	d	file:
REDIS_CONFIG_REWRITE_SIGNATURE	config.c	1252;"	d	file:
REDIS_GEOHASH_OBJ	Makefile	/^REDIS_GEOHASH_OBJ=..\/deps\/geohash-int\/geohash.o ..\/deps\/geohash-int\/geohash_helper.o$/;"	m
REDIS_GIT_DIRTY	release.h	2;"	d
REDIS_GIT_SHA1	release.h	1;"	d
REDIS_INSTALL	Makefile	/^REDIS_INSTALL=$(QUIET_INSTALL)$(INSTALL)$/;"	m
REDIS_LD	Makefile	/^REDIS_LD=$(QUIET_LINK)$(CC) $(FINAL_LDFLAGS)$/;"	m
REDIS_LRAND48_MAX	rand.h	36;"	d
REDIS_RANDOM_H	rand.h	31;"	d
REDIS_SENTINEL_NAME	Makefile	/^REDIS_SENTINEL_NAME=redis-sentinel$/;"	m
REDIS_SENTINEL_PORT	sentinel.c	43;"	d	file:
REDIS_SERVER_NAME	Makefile	/^REDIS_SERVER_NAME=redis-server$/;"	m
REDIS_SERVER_OBJ	Makefile	/^REDIS_SERVER_OBJ=adlist.o quicklist.o ae.o anet.o dict.o server.o sds.o zmalloc.o lzf_c.o lzf_d.o pqsort.o zipmap.o sha1.o ziplist.o release.o networking.o util.o object.o db.o replication.o rdb.o t_string.o t_list.o t_set.o t_zset.o t_hash.o config.o aof.o pubsub.o multi.o debug.o sort.o intset.o syncio.o cluster.o crc16.o endianconv.o slowlog.o scripting.o bio.o rio.o rand.o memtest.o crc64.o bitops.o sentinel.o notify.o setproctitle.o blocked.o hyperloglog.o latency.o sparkline.o redis-check-rdb.o geo.o slots.o slots_async.o crc32.o$/;"	m
REDIS_STATIC	quicklist.c	43;"	d	file:
REDIS_THREAD_STACK_SIZE	bio.c	89;"	d	file:
REDIS_VERSION	version.h	1;"	d
REPL_MAX_WRITTEN_BEFORE_FSYNC	replication.c	983;"	d	file:
REPL_STATE_CONNECT	server.h	302;"	d
REPL_STATE_CONNECTED	server.h	318;"	d
REPL_STATE_CONNECTING	server.h	303;"	d
REPL_STATE_NONE	server.h	301;"	d
REPL_STATE_RECEIVE_AUTH	server.h	307;"	d
REPL_STATE_RECEIVE_CAPA	server.h	313;"	d
REPL_STATE_RECEIVE_IP	server.h	311;"	d
REPL_STATE_RECEIVE_PONG	server.h	305;"	d
REPL_STATE_RECEIVE_PORT	server.h	309;"	d
REPL_STATE_RECEIVE_PSYNC	server.h	315;"	d
REPL_STATE_SEND_AUTH	server.h	306;"	d
REPL_STATE_SEND_CAPA	server.h	312;"	d
REPL_STATE_SEND_IP	server.h	310;"	d
REPL_STATE_SEND_PORT	server.h	308;"	d
REPL_STATE_SEND_PSYNC	server.h	314;"	d
REPL_STATE_TRANSFER	server.h	317;"	d
REST	rand.c	64;"	d	file:
RESTART_SERVER_CONFIG_REWRITE	server.h	1376;"	d
RESTART_SERVER_GRACEFULLY	server.h	1375;"	d
RESTART_SERVER_NONE	server.h	1374;"	d
REV_FINAL_CFLAGS	Makefile	/^	echo PREV_FINAL_CFLAGS=$(FINAL_CFLAGS) >> .make-settings$/;"	m
REV_FINAL_LDFLAGS	Makefile	/^	echo PREV_FINAL_LDFLAGS=$(FINAL_LDFLAGS) >> .make-settings$/;"	m
R_Nan	server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_NegInf	server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_PosInf	server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Zero	server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
RedisClusterCRC16	redis-trib.rb	/^module RedisClusterCRC16$/;"	m	class:RedisTrib
RedisTrib	redis-trib.rb	/^class RedisTrib$/;"	c
SA_ONSTACK	debug.c	48;"	d	file:
SDS_HDR	sds.h	83;"	d
SDS_HDR_VAR	sds.h	82;"	d
SDS_LLSTR_SIZE	sds.c	428;"	d	file:
SDS_MAX_PREALLOC	sds.h	36;"	d
SDS_TYPE_16	sds.h	77;"	d
SDS_TYPE_32	sds.h	78;"	d
SDS_TYPE_5	sds.h	75;"	d
SDS_TYPE_5_LEN	sds.h	84;"	d
SDS_TYPE_64	sds.h	79;"	d
SDS_TYPE_8	sds.h	76;"	d
SDS_TYPE_BITS	sds.h	81;"	d
SDS_TYPE_MASK	sds.h	80;"	d
SEED	rand.c	63;"	d	file:
SENTINEL_ASK_FORCED	sentinel.c	3550;"	d	file:
SENTINEL_ASK_PERIOD	sentinel.c	73;"	d	file:
SENTINEL_DEFAULT_DOWN_AFTER	sentinel.c	75;"	d	file:
SENTINEL_DEFAULT_FAILOVER_TIMEOUT	sentinel.c	83;"	d	file:
SENTINEL_DEFAULT_PARALLEL_SYNCS	sentinel.c	81;"	d	file:
SENTINEL_DEFAULT_SLAVE_PRIORITY	sentinel.c	79;"	d	file:
SENTINEL_ELECTION_TIMEOUT	sentinel.c	85;"	d	file:
SENTINEL_FAILOVER_STATE_NONE	sentinel.c	89;"	d	file:
SENTINEL_FAILOVER_STATE_RECONF_SLAVES	sentinel.c	94;"	d	file:
SENTINEL_FAILOVER_STATE_SELECT_SLAVE	sentinel.c	91;"	d	file:
SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE	sentinel.c	92;"	d	file:
SENTINEL_FAILOVER_STATE_UPDATE_CONFIG	sentinel.c	95;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_PROMOTION	sentinel.c	93;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_START	sentinel.c	90;"	d	file:
SENTINEL_GENERATE_EVENT	sentinel.c	104;"	d	file:
SENTINEL_HELLO_CHANNEL	sentinel.c	76;"	d	file:
SENTINEL_INFO_PERIOD	sentinel.c	71;"	d	file:
SENTINEL_ISQR_NOAUTH	sentinel.c	2859;"	d	file:
SENTINEL_ISQR_NOQUORUM	sentinel.c	2858;"	d	file:
SENTINEL_ISQR_OK	sentinel.c	2857;"	d	file:
SENTINEL_LEADER	sentinel.c	105;"	d	file:
SENTINEL_MASTER_LINK_STATUS_DOWN	sentinel.c	98;"	d	file:
SENTINEL_MASTER_LINK_STATUS_UP	sentinel.c	97;"	d	file:
SENTINEL_MAX_DESYNC	sentinel.c	86;"	d	file:
SENTINEL_MAX_PENDING_COMMANDS	sentinel.c	84;"	d	file:
SENTINEL_MIN_LINK_RECONNECT_PERIOD	sentinel.c	82;"	d	file:
SENTINEL_NO_FLAGS	sentinel.c	103;"	d	file:
SENTINEL_OBSERVER	sentinel.c	106;"	d	file:
SENTINEL_PING_PERIOD	sentinel.c	72;"	d	file:
SENTINEL_PUBLISH_PERIOD	sentinel.c	74;"	d	file:
SENTINEL_RESET_NO_SENTINELS	sentinel.c	1397;"	d	file:
SENTINEL_SCRIPT_MAX_ARGS	sentinel.c	666;"	d	file:
SENTINEL_SCRIPT_MAX_QUEUE	sentinel.c	111;"	d	file:
SENTINEL_SCRIPT_MAX_RETRY	sentinel.c	114;"	d	file:
SENTINEL_SCRIPT_MAX_RUNNING	sentinel.c	112;"	d	file:
SENTINEL_SCRIPT_MAX_RUNTIME	sentinel.c	113;"	d	file:
SENTINEL_SCRIPT_NONE	sentinel.c	109;"	d	file:
SENTINEL_SCRIPT_RETRY_DELAY	sentinel.c	115;"	d	file:
SENTINEL_SCRIPT_RUNNING	sentinel.c	110;"	d	file:
SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION	sentinel.c	119;"	d	file:
SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION	sentinel.c	120;"	d	file:
SENTINEL_SIMFAILURE_NONE	sentinel.c	118;"	d	file:
SENTINEL_SLAVE_RECONF_TIMEOUT	sentinel.c	80;"	d	file:
SENTINEL_TILT_PERIOD	sentinel.c	78;"	d	file:
SENTINEL_TILT_TRIGGER	sentinel.c	77;"	d	file:
SET3	rand.c	61;"	d	file:
SETLOW	rand.c	62;"	d	file:
SET_ERRNO	lzf_d.c	40;"	d	file:
SET_ERRNO	lzf_d.c	43;"	d	file:
SET_OP_DIFF	server.h	385;"	d
SET_OP_DIFF	t_set.c	936;"	d	file:
SET_OP_INTER	server.h	386;"	d
SET_OP_INTER	t_set.c	937;"	d	file:
SET_OP_UNION	server.h	384;"	d
SET_OP_UNION	t_set.c	935;"	d	file:
SHA1Final	sha1.c	/^void SHA1Final(unsigned char digest[20], SHA1_CTX* context)$/;"	f	signature:(unsigned char digest[20], SHA1_CTX* context)
SHA1Final	sha1.h	/^void SHA1Final(unsigned char digest[20], SHA1_CTX* context);$/;"	p	signature:(unsigned char digest[20], SHA1_CTX* context)
SHA1HANDSOFF	sha1.c	22;"	d	file:
SHA1Init	sha1.c	/^void SHA1Init(SHA1_CTX* context)$/;"	f	signature:(SHA1_CTX* context)
SHA1Init	sha1.h	/^void SHA1Init(SHA1_CTX* context);$/;"	p	signature:(SHA1_CTX* context)
SHA1Transform	sha1.c	/^void SHA1Transform(uint32_t state[5], const unsigned char buffer[64])$/;"	f	signature:(uint32_t state[5], const unsigned char buffer[64])
SHA1Transform	sha1.h	/^void SHA1Transform(uint32_t state[5], const unsigned char buffer[64]);$/;"	p	signature:(uint32_t state[5], const unsigned char buffer[64])
SHA1Update	sha1.c	/^void SHA1Update(SHA1_CTX* context, const unsigned char* data, uint32_t len)$/;"	f	signature:(SHA1_CTX* context, const unsigned char* data, uint32_t len)
SHA1Update	sha1.h	/^void SHA1Update(SHA1_CTX* context, const unsigned char* data, uint32_t len);$/;"	p	signature:(SHA1_CTX* context, const unsigned char* data, uint32_t len)
SHA1_CTX	sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon15
SHA1_H	sha1.h	2;"	d
SHUTDOWN_NOFLAGS	server.h	405;"	d
SHUTDOWN_NOSAVE	server.h	408;"	d
SHUTDOWN_SAVE	server.h	406;"	d
SIZE_SAFETY_LIMIT	quicklist.c	51;"	d	file:
SLAVE_CAPA_EOF	server.h	331;"	d
SLAVE_CAPA_NONE	server.h	330;"	d
SLAVE_STATE_ONLINE	server.h	327;"	d
SLAVE_STATE_SEND_BULK	server.h	326;"	d
SLAVE_STATE_WAIT_BGSAVE_END	server.h	325;"	d
SLAVE_STATE_WAIT_BGSAVE_START	server.h	324;"	d
SLOWLOG_ENTRY_MAX_ARGC	slowlog.h	30;"	d
SLOWLOG_ENTRY_MAX_STRING	slowlog.h	31;"	d
SORT_ASC	geo.c	454;"	d	file:
SORT_DESC	geo.c	455;"	d	file:
SORT_NONE	geo.c	453;"	d	file:
SORT_OP_GET	server.h	341;"	d
SPARKLINE_FILL	sparkline.h	47;"	d
SPARKLINE_LOG_SCALE	sparkline.h	48;"	d
SPARKLINE_NO_FLAGS	sparkline.h	46;"	d
SPOP_MOVE_STRATEGY_MUL	t_set.c	409;"	d	file:
SPT	setproctitle.c	/^} SPT;$/;"	v	typeref:struct:__anon39	file:
SPT_MAXTITLE	setproctitle.c	213;"	d	file:
SPT_MIN	setproctitle.c	67;"	d	file:
SRANDMEMBER_SUB_STRATEGY_MUL	t_set.c	620;"	d	file:
SRCCOLOR	Makefile	/^SRCCOLOR="\\033[33m"$/;"	m
SRI_FAILOVER_IN_PROGRESS	sentinel.c	61;"	d	file:
SRI_FORCE_FAILOVER	sentinel.c	67;"	d	file:
SRI_MASTER	sentinel.c	54;"	d	file:
SRI_MASTER_DOWN	sentinel.c	59;"	d	file:
SRI_O_DOWN	sentinel.c	58;"	d	file:
SRI_PROMOTED	sentinel.c	63;"	d	file:
SRI_RECONF_DONE	sentinel.c	66;"	d	file:
SRI_RECONF_INPROG	sentinel.c	65;"	d	file:
SRI_RECONF_SENT	sentinel.c	64;"	d	file:
SRI_SCRIPT_KILL_SENT	sentinel.c	68;"	d	file:
SRI_SENTINEL	sentinel.c	56;"	d	file:
SRI_SLAVE	sentinel.c	55;"	d	file:
SRI_S_DOWN	sentinel.c	57;"	d	file:
STAGE_CHUNKED	slots_async.c	232;"	d	file:
STAGE_DONE	slots_async.c	234;"	d	file:
STAGE_FILLTTL	slots_async.c	233;"	d	file:
STAGE_PAYLOAD	slots_async.c	231;"	d	file:
STAGE_PREPARE	slots_async.c	230;"	d	file:
STANDALONE	lzfP.h	40;"	d
STATS_METRIC_COMMAND	server.h	151;"	d
STATS_METRIC_COUNT	server.h	154;"	d
STATS_METRIC_NET_INPUT	server.h	152;"	d
STATS_METRIC_NET_OUTPUT	server.h	153;"	d
STATS_METRIC_SAMPLES	server.h	150;"	d
STD	Makefile	/^STD=-std=c99 -pedantic -DREDIS_STATIC=''$/;"	m
STRICT_ALIGN	lzfP.h	175;"	d
STRICT_ALIGN	lzfP.h	176;"	d
STRICT_ALIGN	lzfP.h	82;"	d
SUPERVISED_AUTODETECT	server.h	353;"	d
SUPERVISED_NONE	server.h	352;"	d
SUPERVISED_SYSTEMD	server.h	354;"	d
SUPERVISED_UPSTART	server.h	355;"	d
SWAPINIT	pqsort.c	65;"	d	file:
SYNCIO__RESOLUTION	syncio.c	43;"	d	file:
SYNC_CMD_FULL	replication.c	1180;"	d	file:
SYNC_CMD_READ	replication.c	1178;"	d	file:
SYNC_CMD_WRITE	replication.c	1179;"	d	file:
TD	Makefile	/^	echo STD=$(STD) >> .make-settings$/;"	m
TEST	quicklist.c	1444;"	d	file:
TEST_DESC	quicklist.c	1445;"	d	file:
THPGetAnonHugePagesSize	latency.c	/^int THPGetAnonHugePagesSize(void) {$/;"	f	signature:(void)
THPIsEnabled	latency.c	/^int THPIsEnabled(void) {$/;"	f	signature:(void)
THPIsEnabled	latency.h	/^int THPIsEnabled(void);$/;"	p	signature:(void)
TYPE_HASH	redis-cli.c	1940;"	d	file:
TYPE_LIST	redis-cli.c	1938;"	d	file:
TYPE_NONE	redis-cli.c	1942;"	d	file:
TYPE_SET	redis-cli.c	1939;"	d	file:
TYPE_STRING	redis-cli.c	1937;"	d	file:
TYPE_ZSET	redis-cli.c	1941;"	d	file:
ULONG_ONEZERO	memtest.c	52;"	d	file:
ULONG_ONEZERO	memtest.c	55;"	d	file:
ULONG_ZEROONE	memtest.c	53;"	d	file:
ULONG_ZEROONE	memtest.c	56;"	d	file:
ULTRA_FAST	lzfP.h	75;"	d
UNIT_MILLISECONDS	server.h	402;"	d
UNIT_SECONDS	server.h	401;"	d
UNUSED	crc64.c	187;"	d	file:
UNUSED	endianconv.c	107;"	d	file:
UNUSED	intset.c	351;"	d	file:
UNUSED	quicklist.c	1449;"	d	file:
UNUSED	redis-benchmark.c	49;"	d	file:
UNUSED	redis-cli.c	57;"	d	file:
UNUSED	sds.c	1105;"	d	file:
UNUSED	server.h	358;"	d
UNUSED	sha1.c	203;"	d	file:
UNUSED	util.c	737;"	d	file:
UNUSED	zipmap.c	407;"	d	file:
USE_SETPROCTITLE	config.h	121;"	d
USE_SETPROCTITLE	config.h	125;"	d
VERY_FAST	lzfP.h	181;"	d
VERY_FAST	lzfP.h	64;"	d
WARN	Makefile	/^WARN=-Wall -W$/;"	m
X0	rand.c	54;"	d	file:
X1	rand.c	55;"	d	file:
X2	rand.c	56;"	d	file:
ZADD_CH	t_zset.c	1210;"	d	file:
ZADD_INCR	t_zset.c	1207;"	d	file:
ZADD_NONE	t_zset.c	1206;"	d	file:
ZADD_NX	t_zset.c	1208;"	d	file:
ZADD_XX	t_zset.c	1209;"	d	file:
ZIPLIST_BYTES	ziplist.c	142;"	d	file:
ZIPLIST_END_SIZE	ziplist.c	146;"	d	file:
ZIPLIST_ENTRY_END	ziplist.c	149;"	d	file:
ZIPLIST_ENTRY_HEAD	ziplist.c	147;"	d	file:
ZIPLIST_ENTRY_TAIL	ziplist.c	148;"	d	file:
ZIPLIST_ENTRY_ZERO	ziplist.c	166;"	d	file:
ZIPLIST_HEAD	ziplist.h	34;"	d
ZIPLIST_HEADER_SIZE	ziplist.c	145;"	d	file:
ZIPLIST_INCR_LENGTH	ziplist.c	153;"	d	file:
ZIPLIST_LENGTH	ziplist.c	144;"	d	file:
ZIPLIST_TAIL	ziplist.h	35;"	d
ZIPLIST_TAIL_OFFSET	ziplist.c	143;"	d	file:
ZIPMAP_BIGLEN	zipmap.c	83;"	d	file:
ZIPMAP_END	zipmap.c	84;"	d	file:
ZIPMAP_LEN_BYTES	zipmap.c	93;"	d	file:
ZIPMAP_VALUE_MAX_FREE	zipmap.c	88;"	d	file:
ZIP_BIGLEN	ziplist.c	116;"	d	file:
ZIP_DECODE_LENGTH	ziplist.c	236;"	d	file:
ZIP_DECODE_PREVLEN	ziplist.c	299;"	d	file:
ZIP_DECODE_PREVLENSIZE	ziplist.c	289;"	d	file:
ZIP_END	ziplist.c	115;"	d	file:
ZIP_ENTRY_ENCODING	ziplist.c	175;"	d	file:
ZIP_INT_16B	ziplist.c	124;"	d	file:
ZIP_INT_24B	ziplist.c	127;"	d	file:
ZIP_INT_32B	ziplist.c	125;"	d	file:
ZIP_INT_64B	ziplist.c	126;"	d	file:
ZIP_INT_8B	ziplist.c	128;"	d	file:
ZIP_INT_IMM_MASK	ziplist.c	130;"	d	file:
ZIP_INT_IMM_MAX	ziplist.c	132;"	d	file:
ZIP_INT_IMM_MIN	ziplist.c	131;"	d	file:
ZIP_INT_IMM_VAL	ziplist.c	133;"	d	file:
ZIP_INT_MASK	ziplist.c	120;"	d	file:
ZIP_IS_STR	ziplist.c	139;"	d	file:
ZIP_STR_06B	ziplist.c	121;"	d	file:
ZIP_STR_14B	ziplist.c	122;"	d	file:
ZIP_STR_32B	ziplist.c	123;"	d	file:
ZIP_STR_MASK	ziplist.c	119;"	d	file:
ZMALLOC_LIB	zmalloc.h	39;"	d
ZMALLOC_LIB	zmalloc.h	49;"	d
ZMALLOC_LIB	zmalloc.h	65;"	d
ZRANGE_LEX	t_zset.c	1474;"	d	file:
ZRANGE_RANK	t_zset.c	1472;"	d	file:
ZRANGE_SCORE	t_zset.c	1473;"	d	file:
ZSKIPLIST_MAXLEVEL	server.h	360;"	d
ZSKIPLIST_P	server.h	361;"	d
_ALL_SOURCE	fmacros.h	41;"	d
_BSD_SOURCE	fmacros.h	33;"	d
_DEFAULT_SOURCE	fmacros.h	37;"	d
_FILE_OFFSET_BITS	fmacros.h	59;"	d
_GNU_SOURCE	fmacros.h	36;"	d
_GNU_SOURCE	setproctitle.c	29;"	d	file:
_LARGEFILE_SOURCE	fmacros.h	58;"	d
_POSIX_C_SOURCE	fmacros.h	55;"	d
_REDIS_FMACRO_H	fmacros.h	31;"	d
_XOPEN_SOURCE	fmacros.h	45;"	d
_XOPEN_SOURCE	fmacros.h	51;"	d
_ZIPLIST_H	ziplist.h	32;"	d
_ZIPMAP_H	zipmap.h	36;"	d
__ADLIST_H__	adlist.h	32;"	d
__AE_H__	ae.h	34;"	d
__CLUSTER_H	cluster.h	2;"	d
__CONFIG_H	config.h	31;"	d
__DICT_H	dict.h	39;"	d
__ENDIANCONV_H	endianconv.h	34;"	d
__GEO_H__	geo.h	2;"	d
__INTSET_H	intset.h	32;"	d
__LATENCY_H	latency.h	35;"	d
__PQSORT_H	pqsort.h	34;"	d
__QUICKLIST_H__	quicklist.h	32;"	d
__RDB_H	rdb.h	31;"	d
__REDIS_ASSERT_H__	redisassert.h	39;"	d
__REDIS_H	server.h	31;"	d
__REDIS_HELP_H	help.h	4;"	d
__REDIS_RIO_H	rio.h	33;"	d
__REDIS_UTIL_H	util.h	31;"	d
__SDS_H	sds.h	34;"	d
__SPARKLINE_H	sparkline.h	31;"	d
__TESTHELP_H	testhelp.h	40;"	d
__ZMALLOC_H	zmalloc.h	32;"	d
__anon10::cursor	slots_async.c	/^    unsigned long cursor;$/;"	m	struct:__anon10	file:	access:public
__anon10::val	slots_async.c	/^    robj *val;$/;"	m	struct:__anon10	file:	access:public
__anon11::last_numcommands	slots_async.c	/^    long long last_numcommands;$/;"	m	struct:__anon11	file:	access:public
__anon11::step	slots_async.c	/^    int step;$/;"	m	struct:__anon11	file:	access:public
__anon12::chunked	slots_async.c	/^    int chunked;$/;"	m	struct:__anon12	file:	access:public
__anon12::cursor	slots_async.c	/^    unsigned long cursor;$/;"	m	struct:__anon12	file:	access:public
__anon12::expire	slots_async.c	/^    long long expire;$/;"	m	struct:__anon12	file:	access:public
__anon12::key	slots_async.c	/^    robj *key;$/;"	m	struct:__anon12	file:	access:public
__anon12::lindex	slots_async.c	/^    unsigned long lindex;$/;"	m	struct:__anon12	file:	access:public
__anon12::stage	slots_async.c	/^    int stage;$/;"	m	struct:__anon12	file:	access:public
__anon12::val	slots_async.c	/^    robj *val;$/;"	m	struct:__anon12	file:	access:public
__anon12::zindex	slots_async.c	/^    unsigned long zindex;$/;"	m	struct:__anon12	file:	access:public
__anon13::chunked_vals	slots_async.c	/^    list *chunked_vals;$/;"	m	struct:__anon13	file:	access:public
__anon13::estimate_msgs	slots_async.c	/^    long estimate_msgs;$/;"	m	struct:__anon13	file:	access:public
__anon13::hash_slot	slots_async.c	/^    dict *hash_slot;$/;"	m	struct:__anon13	file:	access:public
__anon13::hash_tags	slots_async.c	/^    struct zskiplist *hash_tags;$/;"	m	struct:__anon13	typeref:struct:__anon13::zskiplist	file:	access:public
__anon13::keys	slots_async.c	/^    dict *keys;$/;"	m	struct:__anon13	file:	access:public
__anon13::list	slots_async.c	/^    list *list;$/;"	m	struct:__anon13	file:	access:public
__anon13::maxbulks	slots_async.c	/^    unsigned int maxbulks;$/;"	m	struct:__anon13	file:	access:public
__anon13::maxbytes	slots_async.c	/^    unsigned int maxbytes;$/;"	m	struct:__anon13	file:	access:public
__anon13::removed_keys	slots_async.c	/^    list *removed_keys;$/;"	m	struct:__anon13	file:	access:public
__anon13::tags	slots_async.c	/^    struct zskiplist *tags;$/;"	m	struct:__anon13	typeref:struct:__anon13::zskiplist	file:	access:public
__anon13::timeout	slots_async.c	/^    long long timeout;$/;"	m	struct:__anon13	file:	access:public
__anon15::buffer	sha1.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon15	access:public
__anon15::count	sha1.h	/^    uint32_t count[2];$/;"	m	struct:__anon15	access:public
__anon15::state	sha1.h	/^    uint32_t state[5];$/;"	m	struct:__anon15	access:public
__anon16::__anon17::_iterset	t_zset.c	/^        union _iterset {$/;"	u	union:__anon16::__anon17	file:	access:public
__anon16::__anon17::_iterset::__anon18::ii	t_zset.c	/^                int ii;$/;"	m	struct:__anon16::__anon17::_iterset::__anon18	file:	access:public
__anon16::__anon17::_iterset::__anon18::is	t_zset.c	/^                intset *is;$/;"	m	struct:__anon16::__anon17::_iterset::__anon18	file:	access:public
__anon16::__anon17::_iterset::__anon19::de	t_zset.c	/^                dictEntry *de;$/;"	m	struct:__anon16::__anon17::_iterset::__anon19	file:	access:public
__anon16::__anon17::_iterset::__anon19::di	t_zset.c	/^                dictIterator *di;$/;"	m	struct:__anon16::__anon17::_iterset::__anon19	file:	access:public
__anon16::__anon17::_iterset::__anon19::dict	t_zset.c	/^                dict *dict;$/;"	m	struct:__anon16::__anon17::_iterset::__anon19	file:	access:public
__anon16::__anon17::_iterset::ht	t_zset.c	/^            } ht;$/;"	m	union:__anon16::__anon17::_iterset	typeref:struct:__anon16::__anon17::_iterset::__anon19	file:	access:public
__anon16::__anon17::_iterset::is	t_zset.c	/^            } is;$/;"	m	union:__anon16::__anon17::_iterset	typeref:struct:__anon16::__anon17::_iterset::__anon18	file:	access:public
__anon16::__anon17::_iterzset	t_zset.c	/^        union _iterzset {$/;"	u	union:__anon16::__anon17	file:	access:public
__anon16::__anon17::_iterzset::__anon20::eptr	t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon20	file:	access:public
__anon16::__anon17::_iterzset::__anon20::sptr	t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon20	file:	access:public
__anon16::__anon17::_iterzset::__anon20::zl	t_zset.c	/^                unsigned char *zl;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon20	file:	access:public
__anon16::__anon17::_iterzset::__anon21::node	t_zset.c	/^                zskiplistNode *node;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon21	file:	access:public
__anon16::__anon17::_iterzset::__anon21::zs	t_zset.c	/^                zset *zs;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon21	file:	access:public
__anon16::__anon17::_iterzset::sl	t_zset.c	/^            } sl;$/;"	m	union:__anon16::__anon17::_iterzset	typeref:struct:__anon16::__anon17::_iterzset::__anon21	file:	access:public
__anon16::__anon17::_iterzset::zl	t_zset.c	/^            } zl;$/;"	m	union:__anon16::__anon17::_iterzset	typeref:struct:__anon16::__anon17::_iterzset::__anon20	file:	access:public
__anon16::__anon17::set	t_zset.c	/^        } set;$/;"	m	union:__anon16::__anon17	typeref:union:__anon16::__anon17::_iterset	file:	access:public
__anon16::__anon17::zset	t_zset.c	/^        } zset;$/;"	m	union:__anon16::__anon17	typeref:union:__anon16::__anon17::_iterzset	file:	access:public
__anon16::encoding	t_zset.c	/^    int encoding;$/;"	m	struct:__anon16	file:	access:public
__anon16::iter	t_zset.c	/^    } iter;$/;"	m	struct:__anon16	typeref:union:__anon16::__anon17	file:	access:public
__anon16::subject	t_zset.c	/^    robj *subject;$/;"	m	struct:__anon16	file:	access:public
__anon16::type	t_zset.c	/^    int type; \/* Set, sorted set *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::weight	t_zset.c	/^    double weight;$/;"	m	struct:__anon16	file:	access:public
__anon1::flags	cluster.h	/^    uint16_t flags;             \/* node->flags copy *\/$/;"	m	struct:__anon1	access:public
__anon1::ip	cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* IP address last time it was seen *\/$/;"	m	struct:__anon1	access:public
__anon1::nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon1	access:public
__anon1::notused1	cluster.h	/^    uint16_t notused1;          \/* Some room for future improvements. *\/$/;"	m	struct:__anon1	access:public
__anon1::notused2	cluster.h	/^    uint32_t notused2;$/;"	m	struct:__anon1	access:public
__anon1::ping_sent	cluster.h	/^    uint32_t ping_sent;$/;"	m	struct:__anon1	access:public
__anon1::pong_received	cluster.h	/^    uint32_t pong_received;$/;"	m	struct:__anon1	access:public
__anon1::port	cluster.h	/^    uint16_t port;              \/* port last time it was seen *\/$/;"	m	struct:__anon1	access:public
__anon22::_buf	t_zset.c	/^    unsigned char _buf[32]; \/* Private buffer. *\/$/;"	m	struct:__anon22	file:	access:public
__anon22::ele	t_zset.c	/^    robj *ele;$/;"	m	struct:__anon22	file:	access:public
__anon22::elen	t_zset.c	/^    unsigned int elen;$/;"	m	struct:__anon22	file:	access:public
__anon22::ell	t_zset.c	/^    long long ell;$/;"	m	struct:__anon22	file:	access:public
__anon22::estr	t_zset.c	/^    unsigned char *estr;$/;"	m	struct:__anon22	file:	access:public
__anon22::flags	t_zset.c	/^    int flags;$/;"	m	struct:__anon22	file:	access:public
__anon22::score	t_zset.c	/^    double score;$/;"	m	struct:__anon22	file:	access:public
__anon23::already_expired	redis-check-rdb.c	/^    unsigned long already_expired;  \/* Number of keys already expired. *\/$/;"	m	struct:__anon23	file:	access:public
__anon23::doing	redis-check-rdb.c	/^    int doing;                      \/* The state while reading the RDB. *\/$/;"	m	struct:__anon23	file:	access:public
__anon23::error	redis-check-rdb.c	/^    char error[1024];$/;"	m	struct:__anon23	file:	access:public
__anon23::error_set	redis-check-rdb.c	/^    int error_set;                  \/* True if error is populated. *\/$/;"	m	struct:__anon23	file:	access:public
__anon23::expires	redis-check-rdb.c	/^    unsigned long expires;          \/* Number of keys with an expire. *\/$/;"	m	struct:__anon23	file:	access:public
__anon23::key	redis-check-rdb.c	/^    robj *key;                      \/* Current key we are reading. *\/$/;"	m	struct:__anon23	file:	access:public
__anon23::key_type	redis-check-rdb.c	/^    int key_type;                   \/* Current key type if != -1. *\/$/;"	m	struct:__anon23	file:	access:public
__anon23::keys	redis-check-rdb.c	/^    unsigned long keys;             \/* Number of keys processed. *\/$/;"	m	struct:__anon23	file:	access:public
__anon23::rio	redis-check-rdb.c	/^    rio *rio;$/;"	m	struct:__anon23	file:	access:public
__anon28::authorized	slots.c	/^    int authorized;$/;"	m	struct:__anon28	file:	access:public
__anon28::db	slots.c	/^    int db;$/;"	m	struct:__anon28	file:	access:public
__anon28::fd	slots.c	/^    int fd;$/;"	m	struct:__anon28	file:	access:public
__anon28::lasttime	slots.c	/^    time_t lasttime;$/;"	m	struct:__anon28	file:	access:public
__anon29::batched_iter	server.h	/^    void *batched_iter;$/;"	m	struct:__anon29	access:public
__anon29::blocked_list	server.h	/^    list *blocked_list;$/;"	m	struct:__anon29	access:public
__anon29::c	server.h	/^    client *c;$/;"	m	struct:__anon29	access:public
__anon29::host	server.h	/^    sds host;$/;"	m	struct:__anon29	access:public
__anon29::lastuse	server.h	/^    long long lastuse;$/;"	m	struct:__anon29	access:public
__anon29::port	server.h	/^    int port;$/;"	m	struct:__anon29	access:public
__anon29::sending_msgs	server.h	/^    long sending_msgs;$/;"	m	struct:__anon29	access:public
__anon29::timeout	server.h	/^    long long timeout;$/;"	m	struct:__anon29	access:public
__anon29::used	server.h	/^    int used;$/;"	m	struct:__anon29	access:public
__anon2::nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon2	access:public
__anon32::direction	server.h	/^    unsigned char direction; \/* Iteration direction *\/$/;"	m	struct:__anon32	access:public
__anon32::encoding	server.h	/^    unsigned char encoding;$/;"	m	struct:__anon32	access:public
__anon32::iter	server.h	/^    quicklistIter *iter;$/;"	m	struct:__anon32	access:public
__anon32::subject	server.h	/^    robj *subject;$/;"	m	struct:__anon32	access:public
__anon33::entry	server.h	/^    quicklistEntry entry; \/* Entry in quicklist *\/$/;"	m	struct:__anon33	access:public
__anon33::li	server.h	/^    listTypeIterator *li;$/;"	m	struct:__anon33	access:public
__anon34::di	server.h	/^    dictIterator *di;$/;"	m	struct:__anon34	access:public
__anon34::encoding	server.h	/^    int encoding;$/;"	m	struct:__anon34	access:public
__anon34::ii	server.h	/^    int ii; \/* intset iterator *\/$/;"	m	struct:__anon34	access:public
__anon34::subject	server.h	/^    robj *subject;$/;"	m	struct:__anon34	access:public
__anon35::de	server.h	/^    dictEntry *de;$/;"	m	struct:__anon35	access:public
__anon35::di	server.h	/^    dictIterator *di;$/;"	m	struct:__anon35	access:public
__anon35::encoding	server.h	/^    int encoding;$/;"	m	struct:__anon35	access:public
__anon35::fptr	server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon35	access:public
__anon35::subject	server.h	/^    robj *subject;$/;"	m	struct:__anon35	access:public
__anon35::vptr	server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon35	access:public
__anon36::max	server.h	/^    double min, max;$/;"	m	struct:__anon36	access:public
__anon36::maxex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon36	access:public
__anon36::min	server.h	/^    double min, max;$/;"	m	struct:__anon36	access:public
__anon36::minex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon36	access:public
__anon37::max	server.h	/^    robj *min, *max;  \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon37	access:public
__anon37::maxex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon37	access:public
__anon37::min	server.h	/^    robj *min, *max;  \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon37	access:public
__anon37::minex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon37	access:public
__anon38::argc	redis-cli.c	/^    int argc;$/;"	m	struct:__anon38	file:	access:public
__anon38::argv	redis-cli.c	/^    sds *argv;$/;"	m	struct:__anon38	file:	access:public
__anon38::full	redis-cli.c	/^    sds full;$/;"	m	struct:__anon38	file:	access:public
__anon38::org	redis-cli.c	/^    struct commandHelp *org;$/;"	m	struct:__anon38	typeref:struct:__anon38::commandHelp	file:	access:public
__anon38::type	redis-cli.c	/^    int type;$/;"	m	struct:__anon38	file:	access:public
__anon39::arg0	setproctitle.c	/^	const char *arg0;$/;"	m	struct:__anon39	file:	access:public
__anon39::base	setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon39	file:	access:public
__anon39::end	setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon39	file:	access:public
__anon39::error	setproctitle.c	/^	int error;$/;"	m	struct:__anon39	file:	access:public
__anon39::nul	setproctitle.c	/^	char *nul;$/;"	m	struct:__anon39	file:	access:public
__anon39::reset	setproctitle.c	/^	_Bool reset;$/;"	m	struct:__anon39	file:	access:public
__anon3::bulk_data	cluster.h	/^    unsigned char bulk_data[8];$/;"	m	struct:__anon3	access:public
__anon3::channel_len	cluster.h	/^    uint32_t channel_len;$/;"	m	struct:__anon3	access:public
__anon3::message_len	cluster.h	/^    uint32_t message_len;$/;"	m	struct:__anon3	access:public
__anon4::configEpoch	cluster.h	/^    uint64_t configEpoch; \/* Config epoch of the specified instance. *\/$/;"	m	struct:__anon4	access:public
__anon4::nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN]; \/* Name of the slots owner. *\/$/;"	m	struct:__anon4	access:public
__anon4::slots	cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* Slots bitmap. *\/$/;"	m	struct:__anon4	access:public
__anon9::configEpoch	cluster.h	/^    uint64_t configEpoch;   \/* The config epoch if it's a master, or the last$/;"	m	struct:__anon9	access:public
__anon9::count	cluster.h	/^    uint16_t count;     \/* Only used for some kind of messages. *\/$/;"	m	struct:__anon9	access:public
__anon9::currentEpoch	cluster.h	/^    uint64_t currentEpoch;  \/* The epoch accordingly to the sending node. *\/$/;"	m	struct:__anon9	access:public
__anon9::data	cluster.h	/^    union clusterMsgData data;$/;"	m	struct:__anon9	typeref:union:__anon9::clusterMsgData	access:public
__anon9::flags	cluster.h	/^    uint16_t flags;     \/* Sender node flags *\/$/;"	m	struct:__anon9	access:public
__anon9::mflags	cluster.h	/^    unsigned char mflags[3]; \/* Message flags: CLUSTERMSG_FLAG[012]_... *\/$/;"	m	struct:__anon9	access:public
__anon9::myslots	cluster.h	/^    unsigned char myslots[CLUSTER_SLOTS\/8];$/;"	m	struct:__anon9	access:public
__anon9::notused0	cluster.h	/^    uint16_t notused0;  \/* 2 bytes not used. *\/$/;"	m	struct:__anon9	access:public
__anon9::notused1	cluster.h	/^    char notused1[32];  \/* 32 bytes reserved for future usage. *\/$/;"	m	struct:__anon9	access:public
__anon9::offset	cluster.h	/^    uint64_t offset;    \/* Master replication offset if node is a master or$/;"	m	struct:__anon9	access:public
__anon9::port	cluster.h	/^    uint16_t port;      \/* Sender TCP base port *\/$/;"	m	struct:__anon9	access:public
__anon9::sender	cluster.h	/^    char sender[CLUSTER_NAMELEN]; \/* Name of the sender node *\/$/;"	m	struct:__anon9	access:public
__anon9::sig	cluster.h	/^    char sig[4];        \/* Siganture "RCmb" (Redis Cluster message bus). *\/$/;"	m	struct:__anon9	access:public
__anon9::slaveof	cluster.h	/^    char slaveof[CLUSTER_NAMELEN];$/;"	m	struct:__anon9	access:public
__anon9::state	cluster.h	/^    unsigned char state; \/* Cluster state from the POV of the sender *\/$/;"	m	struct:__anon9	access:public
__anon9::totlen	cluster.h	/^    uint32_t totlen;    \/* Total length of this message *\/$/;"	m	struct:__anon9	access:public
__anon9::type	cluster.h	/^    uint16_t type;      \/* Message type *\/$/;"	m	struct:__anon9	access:public
__anon9::ver	cluster.h	/^    uint16_t ver;       \/* Protocol version, currently set to 0. *\/$/;"	m	struct:__anon9	access:public
__failed_tests	testhelp.h	/^int __failed_tests = 0;$/;"	v
__quicklistCompress	quicklist.c	/^REDIS_STATIC void __quicklistCompress(const quicklist *quicklist,$/;"	f	signature:(const quicklist *quicklist, quicklistNode *node)
__quicklistCompressNode	quicklist.c	/^REDIS_STATIC int __quicklistCompressNode(quicklistNode *node) {$/;"	f	signature:(quicklistNode *node)
__quicklistDecompressNode	quicklist.c	/^REDIS_STATIC int __quicklistDecompressNode(quicklistNode *node) {$/;"	f	signature:(quicklistNode *node)
__quicklistDelNode	quicklist.c	/^REDIS_STATIC void __quicklistDelNode(quicklist *quicklist,$/;"	f	signature:(quicklist *quicklist, quicklistNode *node)
__quicklistInsertNode	quicklist.c	/^REDIS_STATIC void __quicklistInsertNode(quicklist *quicklist,$/;"	f	signature:(quicklist *quicklist, quicklistNode *old_node, quicklistNode *new_node, int after)
__str	zmalloc.h	36;"	d
__test_num	testhelp.h	/^int __test_num = 0;$/;"	v
__xstr	zmalloc.h	35;"	d
__ziplistCascadeUpdate	ziplist.c	/^unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f	signature:(unsigned char *zl, unsigned char *p)
__ziplistDelete	ziplist.c	/^unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f	signature:(unsigned char *zl, unsigned char *p, unsigned int num)
__ziplistInsert	ziplist.c	/^unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f	signature:(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen)
_addReplyObjectToList	networking.c	/^void _addReplyObjectToList(client *c, robj *o) {$/;"	f	signature:(client *c, robj *o)
_addReplySdsToList	networking.c	/^void _addReplySdsToList(client *c, sds s) {$/;"	f	signature:(client *c, sds s)
_addReplyStringToList	networking.c	/^void _addReplyStringToList(client *c, const char *s, size_t len) {$/;"	f	signature:(client *c, const char *s, size_t len)
_addReplyToBuffer	networking.c	/^int _addReplyToBuffer(client *c, const char *s, size_t len) {$/;"	f	signature:(client *c, const char *s, size_t len)
_anetTcpServer	anet.c	/^static int _anetTcpServer(char *err, int port, char *bindaddr, int af, int backlog)$/;"	f	file:	signature:(char *err, int port, char *bindaddr, int af, int backlog)
_assert	intset.c	/^static void _assert(char *estr, char *file, int line) {$/;"	f	file:	signature:(char *estr, char *file, int line)
_buf	t_zset.c	/^    unsigned char _buf[32]; \/* Private buffer. *\/$/;"	m	struct:__anon22	file:	access:public
_client	redis-benchmark.c	/^typedef struct _client {$/;"	s	file:
_client::context	redis-benchmark.c	/^    redisContext *context;$/;"	m	struct:_client	file:	access:public
_client::latency	redis-benchmark.c	/^    long long latency;      \/* Request latency *\/$/;"	m	struct:_client	file:	access:public
_client::obuf	redis-benchmark.c	/^    sds obuf;$/;"	m	struct:_client	file:	access:public
_client::pending	redis-benchmark.c	/^    int pending;            \/* Number of pending requests (replies to consume) *\/$/;"	m	struct:_client	file:	access:public
_client::prefix_pending	redis-benchmark.c	/^    int prefix_pending;     \/* If non-zero, number of pending prefix commands. Commands$/;"	m	struct:_client	file:	access:public
_client::prefixlen	redis-benchmark.c	/^    int prefixlen;          \/* Size in bytes of the pending prefix commands *\/$/;"	m	struct:_client	file:	access:public
_client::randfree	redis-benchmark.c	/^    size_t randfree;        \/* Number of unused pointers in client->randptr *\/$/;"	m	struct:_client	file:	access:public
_client::randlen	redis-benchmark.c	/^    size_t randlen;         \/* Number of pointers in client->randptr *\/$/;"	m	struct:_client	file:	access:public
_client::randptr	redis-benchmark.c	/^    char **randptr;         \/* Pointers to :rand: strings inside the command buf *\/$/;"	m	struct:_client	file:	access:public
_client::start	redis-benchmark.c	/^    long long start;        \/* Start time of a request *\/$/;"	m	struct:_client	file:	access:public
_client::written	redis-benchmark.c	/^    size_t written;         \/* Bytes of 'obuf' already written *\/$/;"	m	struct:_client	file:	access:public
_dictClear	dict.c	/^int _dictClear(dict *d, dictht *ht, void(callback)(void *)) {$/;"	f	signature:(dict *d, dictht *ht, void(callback)(void *))
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:	signature:(dict *d)
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *ht);$/;"	p	file:	signature:(dict *ht)
_dictGetStatsHt	dict.c	/^size_t _dictGetStatsHt(char *buf, size_t bufsize, dictht *ht, int tableid) {$/;"	f	signature:(char *buf, size_t bufsize, dictht *ht, int tableid)
_dictInit	dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f	signature:(dict *d, dictType *type, void *privDataPtr)
_dictInit	dict.c	/^static int _dictInit(dict *ht, dictType *type, void *privDataPtr);$/;"	p	file:	signature:(dict *ht, dictType *type, void *privDataPtr)
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:	signature:(dict *d, const void *key)
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *ht, const void *key);$/;"	p	file:	signature:(dict *ht, const void *key)
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:	signature:(unsigned long size)
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size);$/;"	p	file:	signature:(unsigned long size)
_dictRehashStep	dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:	signature:(dict *d)
_dictReset	dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:	signature:(dictht *ht)
_intsetGet	intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	file:	signature:(intset *is, int pos)
_intsetGetEncoded	intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	file:	signature:(intset *is, int pos, uint8_t enc)
_intsetSet	intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	file:	signature:(intset *is, int pos, int64_t value)
_intsetValueEncoding	intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	file:	signature:(int64_t v)
_iterset	t_zset.c	/^        union _iterset {$/;"	u	union:__anon16::__anon17	file:	access:public
_iterzset	t_zset.c	/^        union _iterzset {$/;"	u	union:__anon16::__anon17	file:	access:public
_itrprintr	quicklist.c	/^static int _itrprintr(quicklist *ql, int print, int forward) {$/;"	f	file:	signature:(quicklist *ql, int print, int forward)
_pqsort	pqsort.c	/^_pqsort(void *a, size_t n, size_t es,$/;"	f	file:	signature:(void *a, size_t n, size_t es, int (*cmp) (const void *, const void *), void *lrange, void *rrange)
_ql_verify	quicklist.c	/^static int _ql_verify(quicklist *ql, uint32_t len, uint32_t count,$/;"	f	file:	signature:(quicklist *ql, uint32_t len, uint32_t count, uint32_t head_count, uint32_t tail_count)
_quicklistInsert	quicklist.c	/^REDIS_STATIC void _quicklistInsert(quicklist *quicklist, quicklistEntry *entry,$/;"	f	signature:(quicklist *quicklist, quicklistEntry *entry, void *value, const size_t sz, int after)
_quicklistInsertNodeAfter	quicklist.c	/^REDIS_STATIC void _quicklistInsertNodeAfter(quicklist *quicklist,$/;"	f	signature:(quicklist *quicklist, quicklistNode *old_node, quicklistNode *new_node)
_quicklistInsertNodeBefore	quicklist.c	/^REDIS_STATIC void _quicklistInsertNodeBefore(quicklist *quicklist,$/;"	f	signature:(quicklist *quicklist, quicklistNode *old_node, quicklistNode *new_node)
_quicklistMergeNodes	quicklist.c	/^REDIS_STATIC void _quicklistMergeNodes(quicklist *quicklist,$/;"	f	signature:(quicklist *quicklist, quicklistNode *center)
_quicklistNodeAllowInsert	quicklist.c	/^REDIS_STATIC int _quicklistNodeAllowInsert(const quicklistNode *node,$/;"	f	signature:(const quicklistNode *node, const int fill, const size_t sz)
_quicklistNodeAllowMerge	quicklist.c	/^REDIS_STATIC int _quicklistNodeAllowMerge(const quicklistNode *a,$/;"	f	signature:(const quicklistNode *a, const quicklistNode *b, const int fill)
_quicklistNodeSizeMeetsOptimizationRequirement	quicklist.c	/^_quicklistNodeSizeMeetsOptimizationRequirement(const size_t sz,$/;"	f	signature:(const size_t sz, const int fill)
_quicklistSaver	quicklist.c	/^REDIS_STATIC void *_quicklistSaver(unsigned char *data, unsigned int sz) {$/;"	f	signature:(unsigned char *data, unsigned int sz)
_quicklistSplitNode	quicklist.c	/^REDIS_STATIC quicklistNode *_quicklistSplitNode(quicklistNode *node, int offset,$/;"	f	signature:(quicklistNode *node, int offset, int after)
_quicklistZiplistMerge	quicklist.c	/^REDIS_STATIC quicklistNode *_quicklistZiplistMerge(quicklist *quicklist,$/;"	f	signature:(quicklist *quicklist, quicklistNode *a, quicklistNode *b)
_redisSortObject	server.h	/^typedef struct _redisSortObject {$/;"	s
_redisSortObject::__anon31::cmpobj	server.h	/^        robj *cmpobj;$/;"	m	union:_redisSortObject::__anon31	access:public
_redisSortObject::__anon31::score	server.h	/^        double score;$/;"	m	union:_redisSortObject::__anon31	access:public
_redisSortObject::obj	server.h	/^    robj *obj;$/;"	m	struct:_redisSortObject	access:public
_redisSortObject::u	server.h	/^    } u;$/;"	m	struct:_redisSortObject	typeref:union:_redisSortObject::__anon31	access:public
_redisSortOperation	server.h	/^typedef struct _redisSortOperation {$/;"	s
_redisSortOperation::pattern	server.h	/^    robj *pattern;$/;"	m	struct:_redisSortOperation	access:public
_redisSortOperation::type	server.h	/^    int type;$/;"	m	struct:_redisSortOperation	access:public
_rfds	ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:	access:public
_rio	rio.h	/^struct _rio {$/;"	s
_rio::__anon24::__anon25::pos	rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anon24::__anon25	access:public
_rio::__anon24::__anon25::ptr	rio.h	/^            sds ptr;$/;"	m	struct:_rio::__anon24::__anon25	access:public
_rio::__anon24::__anon26::autosync	rio.h	/^            off_t autosync; \/* fsync after 'autosync' bytes written. *\/$/;"	m	struct:_rio::__anon24::__anon26	access:public
_rio::__anon24::__anon26::buffered	rio.h	/^            off_t buffered; \/* Bytes written since last fsync. *\/$/;"	m	struct:_rio::__anon24::__anon26	access:public
_rio::__anon24::__anon26::fp	rio.h	/^            FILE *fp;$/;"	m	struct:_rio::__anon24::__anon26	access:public
_rio::__anon24::__anon27::buf	rio.h	/^            sds buf;$/;"	m	struct:_rio::__anon24::__anon27	access:public
_rio::__anon24::__anon27::fds	rio.h	/^            int *fds;       \/* File descriptors. *\/$/;"	m	struct:_rio::__anon24::__anon27	access:public
_rio::__anon24::__anon27::numfds	rio.h	/^            int numfds;$/;"	m	struct:_rio::__anon24::__anon27	access:public
_rio::__anon24::__anon27::pos	rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anon24::__anon27	access:public
_rio::__anon24::__anon27::state	rio.h	/^            int *state;     \/* Error state of each fd. 0 (if ok) or errno. *\/$/;"	m	struct:_rio::__anon24::__anon27	access:public
_rio::__anon24::buffer	rio.h	/^        } buffer;$/;"	m	union:_rio::__anon24	typeref:struct:_rio::__anon24::__anon25	access:public
_rio::__anon24::fdset	rio.h	/^        } fdset;$/;"	m	union:_rio::__anon24	typeref:struct:_rio::__anon24::__anon27	access:public
_rio::__anon24::file	rio.h	/^        } file;$/;"	m	union:_rio::__anon24	typeref:struct:_rio::__anon24::__anon26	access:public
_rio::cksum	rio.h	/^    uint64_t cksum;$/;"	m	struct:_rio	access:public
_rio::flush	rio.h	/^    int (*flush)(struct _rio *);$/;"	m	struct:_rio	access:public
_rio::io	rio.h	/^    } io;$/;"	m	struct:_rio	typeref:union:_rio::__anon24	access:public
_rio::max_processing_chunk	rio.h	/^    size_t max_processing_chunk;$/;"	m	struct:_rio	access:public
_rio::processed_bytes	rio.h	/^    size_t processed_bytes;$/;"	m	struct:_rio	access:public
_rio::read	rio.h	/^    size_t (*read)(struct _rio *, void *buf, size_t len);$/;"	m	struct:_rio	access:public
_rio::tell	rio.h	/^    off_t (*tell)(struct _rio *);$/;"	m	struct:_rio	access:public
_rio::update_cksum	rio.h	/^    void (*update_cksum)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio	access:public
_rio::write	rio.h	/^    size_t (*write)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio	access:public
_serverAssert	debug.c	/^void _serverAssert(char *estr, char *file, int line) {$/;"	f	signature:(char *estr, char *file, int line)
_serverAssert	redisassert.h	/^void _serverAssert(char *estr, char *file, int line);$/;"	p	signature:(char *estr, char *file, int line)
_serverAssert	server.h	/^void _serverAssert(char *estr, char *file, int line);$/;"	p	signature:(char *estr, char *file, int line)
_serverAssertPrintClientInfo	debug.c	/^void _serverAssertPrintClientInfo(client *c) {$/;"	f	signature:(client *c)
_serverAssertPrintObject	debug.c	/^void _serverAssertPrintObject(robj *o) {$/;"	f	signature:(robj *o)
_serverAssertWithInfo	debug.c	/^void _serverAssertWithInfo(client *c, robj *o, char *estr, char *file, int line) {$/;"	f	signature:(client *c, robj *o, char *estr, char *file, int line)
_serverAssertWithInfo	server.h	/^void _serverAssertWithInfo(client *c, robj *o, char *estr, char *file, int line);$/;"	p	signature:(client *c, robj *o, char *estr, char *file, int line)
_serverPanic	debug.c	/^void _serverPanic(char *msg, char *file, int line) {$/;"	f	signature:(char *msg, char *file, int line)
_serverPanic	server.h	/^void _serverPanic(char *msg, char *file, int line);$/;"	p	signature:(char *msg, char *file, int line)
_wfds	ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:	access:public
a	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
about	cluster.h	/^        clusterMsgDataFail about;$/;"	m	struct:clusterMsgData::__anon6	access:public
acceptCommonHandler	networking.c	/^static void acceptCommonHandler(int fd, int flags, char *ip) {$/;"	f	file:	signature:(int fd, int flags, char *ip)
acceptHandler	server.h	/^void acceptHandler(aeEventLoop *el, int fd, void *privdata, int mask);$/;"	p	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
acceptTcpHandler	networking.c	/^void acceptTcpHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
acceptTcpHandler	server.h	/^void acceptTcpHandler(aeEventLoop *el, int fd, void *privdata, int mask);$/;"	p	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
acceptUnixHandler	networking.c	/^void acceptUnixHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
acceptUnixHandler	server.h	/^void acceptUnixHandler(aeEventLoop *el, int fd, void *privdata, int mask);$/;"	p	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
act_ping_time	sentinel.c	/^    mstime_t act_ping_time;   \/* Time at which the last pending ping (no pong$/;"	m	struct:instanceLink	file:	access:public
active	scripting.c	/^    int active; \/* Are we debugging EVAL right now? *\/$/;"	m	struct:ldbState	file:	access:public
activeExpireCycle	server.c	/^void activeExpireCycle(int type) {$/;"	f	signature:(int type)
activeExpireCycleTryExpire	server.c	/^int activeExpireCycleTryExpire(redisDb *db, dictEntry *de, long long now) {$/;"	f	signature:(redisDb *db, dictEntry *de, long long now)
active_expire_enabled	server.h	/^    int active_expire_enabled;      \/* Can be disabled for testing purposes. *\/$/;"	m	struct:redisServer	access:public
activerehashing	server.h	/^    int activerehashing;        \/* Incremental rehash in serverCron() *\/$/;"	m	struct:redisServer	access:public
addDeferredMultiBulkLength	networking.c	/^void *addDeferredMultiBulkLength(client *c) {$/;"	f	signature:(client *c)
addDeferredMultiBulkLength	server.h	/^void *addDeferredMultiBulkLength(client *c);$/;"	p	signature:(client *c)
addHashFieldToReply	t_hash.c	/^static void addHashFieldToReply(client *c, robj *o, robj *field) {$/;"	f	file:	signature:(client *c, robj *o, robj *field)
addHashIteratorCursorToReply	t_hash.c	/^static void addHashIteratorCursorToReply(client *c, hashTypeIterator *hi, int what) {$/;"	f	file:	signature:(client *c, hashTypeIterator *hi, int what)
addReply	networking.c	/^void addReply(client *c, robj *obj) {$/;"	f	signature:(client *c, robj *obj)
addReply	server.h	/^void addReply(client *c, robj *obj);$/;"	p	signature:(client *c, robj *obj)
addReplyBulk	networking.c	/^void addReplyBulk(client *c, robj *obj) {$/;"	f	signature:(client *c, robj *obj)
addReplyBulk	server.h	/^void addReplyBulk(client *c, robj *obj);$/;"	p	signature:(client *c, robj *obj)
addReplyBulkCBuffer	networking.c	/^void addReplyBulkCBuffer(client *c, const void *p, size_t len) {$/;"	f	signature:(client *c, const void *p, size_t len)
addReplyBulkCBuffer	server.h	/^void addReplyBulkCBuffer(client *c, const void *p, size_t len);$/;"	p	signature:(client *c, const void *p, size_t len)
addReplyBulkCString	networking.c	/^void addReplyBulkCString(client *c, const char *s) {$/;"	f	signature:(client *c, const char *s)
addReplyBulkCString	server.h	/^void addReplyBulkCString(client *c, const char *s);$/;"	p	signature:(client *c, const char *s)
addReplyBulkLen	networking.c	/^void addReplyBulkLen(client *c, robj *obj) {$/;"	f	signature:(client *c, robj *obj)
addReplyBulkLongLong	networking.c	/^void addReplyBulkLongLong(client *c, long long ll) {$/;"	f	signature:(client *c, long long ll)
addReplyBulkLongLong	server.h	/^void addReplyBulkLongLong(client *c, long long ll);$/;"	p	signature:(client *c, long long ll)
addReplyBulkSds	networking.c	/^void addReplyBulkSds(client *c, sds s)  {$/;"	f	signature:(client *c, sds s)
addReplyBulkSds	server.h	/^void addReplyBulkSds(client *c, sds s);$/;"	p	signature:(client *c, sds s)
addReplyCommand	server.c	/^void addReplyCommand(client *c, struct redisCommand *cmd) {$/;"	f	signature:(client *c, struct redisCommand *cmd)
addReplyCommandFlag	server.c	/^int addReplyCommandFlag(client *c, struct redisCommand *cmd, int f, char *reply) {$/;"	f	signature:(client *c, struct redisCommand *cmd, int f, char *reply)
addReplyDictOfRedisInstances	sentinel.c	/^void addReplyDictOfRedisInstances(client *c, dict *instances) {$/;"	f	signature:(client *c, dict *instances)
addReplyDouble	networking.c	/^void addReplyDouble(client *c, double d) {$/;"	f	signature:(client *c, double d)
addReplyDouble	server.h	/^void addReplyDouble(client *c, double d);$/;"	p	signature:(client *c, double d)
addReplyDoubleDistance	geo.c	/^void addReplyDoubleDistance(client *c, double d) {$/;"	f	signature:(client *c, double d)
addReplyError	networking.c	/^void addReplyError(client *c, const char *err) {$/;"	f	signature:(client *c, const char *err)
addReplyError	server.h	/^void addReplyError(client *c, const char *err);$/;"	p	signature:(client *c, const char *err)
addReplyErrorFormat	networking.c	/^void addReplyErrorFormat(client *c, const char *fmt, ...) {$/;"	f	signature:(client *c, const char *fmt, ...)
addReplyErrorFormat	server.h	/^void addReplyErrorFormat(client *c, const char *fmt, ...)$/;"	p	signature:(client *c, const char *fmt, ...)
addReplyErrorFormat	server.h	/^void addReplyErrorFormat(client *c, const char *fmt, ...);$/;"	p	signature:(client *c, const char *fmt, ...)
addReplyErrorLength	networking.c	/^void addReplyErrorLength(client *c, const char *s, size_t len) {$/;"	f	signature:(client *c, const char *s, size_t len)
addReplyHumanLongDouble	networking.c	/^void addReplyHumanLongDouble(client *c, long double d) {$/;"	f	signature:(client *c, long double d)
addReplyHumanLongDouble	server.h	/^void addReplyHumanLongDouble(client *c, long double d);$/;"	p	signature:(client *c, long double d)
addReplyLongLong	networking.c	/^void addReplyLongLong(client *c, long long ll) {$/;"	f	signature:(client *c, long long ll)
addReplyLongLong	server.h	/^void addReplyLongLong(client *c, long long ll);$/;"	p	signature:(client *c, long long ll)
addReplyLongLongWithPrefix	networking.c	/^void addReplyLongLongWithPrefix(client *c, long long ll, char prefix) {$/;"	f	signature:(client *c, long long ll, char prefix)
addReplyMultiBulkLen	networking.c	/^void addReplyMultiBulkLen(client *c, long length) {$/;"	f	signature:(client *c, long length)
addReplyMultiBulkLen	server.h	/^void addReplyMultiBulkLen(client *c, long length);$/;"	p	signature:(client *c, long length)
addReplyReplicationBacklog	replication.c	/^long long addReplyReplicationBacklog(client *c, long long offset) {$/;"	f	signature:(client *c, long long offset)
addReplySds	networking.c	/^void addReplySds(client *c, sds s) {$/;"	f	signature:(client *c, sds s)
addReplySds	server.h	/^void addReplySds(client *c, sds s);$/;"	p	signature:(client *c, sds s)
addReplySentinelRedisInstance	sentinel.c	/^void addReplySentinelRedisInstance(client *c, sentinelRedisInstance *ri) {$/;"	f	signature:(client *c, sentinelRedisInstance *ri)
addReplyStatus	networking.c	/^void addReplyStatus(client *c, const char *status) {$/;"	f	signature:(client *c, const char *status)
addReplyStatus	server.h	/^void addReplyStatus(client *c, const char *status);$/;"	p	signature:(client *c, const char *status)
addReplyStatusFormat	networking.c	/^void addReplyStatusFormat(client *c, const char *fmt, ...) {$/;"	f	signature:(client *c, const char *fmt, ...)
addReplyStatusFormat	server.h	/^void addReplyStatusFormat(client *c, const char *fmt, ...)$/;"	p	signature:(client *c, const char *fmt, ...)
addReplyStatusFormat	server.h	/^void addReplyStatusFormat(client *c, const char *fmt, ...);$/;"	p	signature:(client *c, const char *fmt, ...)
addReplyStatusLength	networking.c	/^void addReplyStatusLength(client *c, const char *s, size_t len) {$/;"	f	signature:(client *c, const char *s, size_t len)
addReplyString	networking.c	/^void addReplyString(client *c, const char *s, size_t len) {$/;"	f	signature:(client *c, const char *s, size_t len)
add_node	redis-trib.rb	/^    def add_node(node)$/;"	f	class:RedisTrib
add_slots	redis-trib.rb	/^    def add_slots(slots)$/;"	f	class:ClusterNode
addnode_cluster_cmd	redis-trib.rb	/^    def addnode_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
addr	sentinel.c	/^    sentinelAddr *addr; \/* Master host. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
adjustOpenFilesLimit	server.c	/^void adjustOpenFilesLimit(void) {$/;"	f	signature:(void)
adjustOpenFilesLimit	server.h	/^void adjustOpenFilesLimit(void);$/;"	p	signature:(void)
aeAddMillisecondsToNow	ae.c	/^static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {$/;"	f	file:	signature:(long long milliseconds, long *sec, long *ms)
aeApiAddEvent	ae_epoll.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeApiAddEvent	ae_evport.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeApiAddEvent	ae_kqueue.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeApiAddEvent	ae_select.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeApiAssociate	ae_evport.c	/^static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {$/;"	f	file:	signature:(const char *where, int portfd, int fd, int mask)
aeApiCreate	ae_epoll.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiCreate	ae_evport.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiCreate	ae_kqueue.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiCreate	ae_select.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiDelEvent	ae_epoll.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int delmask)
aeApiDelEvent	ae_evport.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeApiDelEvent	ae_kqueue.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeApiDelEvent	ae_select.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeApiFree	ae_epoll.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiFree	ae_evport.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiFree	ae_kqueue.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiFree	ae_select.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeApiLookupPending	ae_evport.c	/^static int aeApiLookupPending(aeApiState *state, int fd) {$/;"	f	file:	signature:(aeApiState *state, int fd)
aeApiName	ae_epoll.c	/^static char *aeApiName(void) {$/;"	f	file:	signature:(void)
aeApiName	ae_evport.c	/^static char *aeApiName(void) {$/;"	f	file:	signature:(void)
aeApiName	ae_kqueue.c	/^static char *aeApiName(void) {$/;"	f	file:	signature:(void)
aeApiName	ae_select.c	/^static char *aeApiName(void) {$/;"	f	file:	signature:(void)
aeApiPoll	ae_epoll.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, struct timeval *tvp)
aeApiPoll	ae_evport.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, struct timeval *tvp)
aeApiPoll	ae_kqueue.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, struct timeval *tvp)
aeApiPoll	ae_select.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, struct timeval *tvp)
aeApiResize	ae_epoll.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int setsize)
aeApiResize	ae_evport.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int setsize)
aeApiResize	ae_kqueue.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int setsize)
aeApiResize	ae_select.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:	signature:(aeEventLoop *eventLoop, int setsize)
aeApiState	ae_epoll.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_epoll.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	ae_evport.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_evport.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	ae_kqueue.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_kqueue.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	ae_select.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_select.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState::_rfds	ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:	access:public
aeApiState::_wfds	ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:	access:public
aeApiState::epfd	ae_epoll.c	/^    int epfd;$/;"	m	struct:aeApiState	file:	access:public
aeApiState::events	ae_epoll.c	/^    struct epoll_event *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::epoll_event	file:	access:public
aeApiState::events	ae_kqueue.c	/^    struct kevent *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::kevent	file:	access:public
aeApiState::kqfd	ae_kqueue.c	/^    int kqfd;$/;"	m	struct:aeApiState	file:	access:public
aeApiState::npending	ae_evport.c	/^    int     npending;                           \/* # of pending fds *\/$/;"	m	struct:aeApiState	file:	access:public
aeApiState::pending_fds	ae_evport.c	/^    int     pending_fds[MAX_EVENT_BATCHSZ];     \/* pending fds *\/$/;"	m	struct:aeApiState	file:	access:public
aeApiState::pending_masks	ae_evport.c	/^    int     pending_masks[MAX_EVENT_BATCHSZ];   \/* pending fds' masks *\/$/;"	m	struct:aeApiState	file:	access:public
aeApiState::portfd	ae_evport.c	/^    int     portfd;                             \/* event port *\/$/;"	m	struct:aeApiState	file:	access:public
aeApiState::rfds	ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:	access:public
aeApiState::wfds	ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:	access:public
aeBeforeSleepProc	ae.h	/^typedef void aeBeforeSleepProc(struct aeEventLoop *eventLoop);$/;"	t
aeCreateEventLoop	ae.c	/^aeEventLoop *aeCreateEventLoop(int setsize) {$/;"	f	signature:(int setsize)
aeCreateEventLoop	ae.h	/^aeEventLoop *aeCreateEventLoop(int setsize);$/;"	p	signature:(int setsize)
aeCreateFileEvent	ae.c	/^int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,$/;"	f	signature:(aeEventLoop *eventLoop, int fd, int mask, aeFileProc *proc, void *clientData)
aeCreateFileEvent	ae.h	/^int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,$/;"	p	signature:(aeEventLoop *eventLoop, int fd, int mask, aeFileProc *proc, void *clientData)
aeCreateTimeEvent	ae.c	/^long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds,$/;"	f	signature:(aeEventLoop *eventLoop, long long milliseconds, aeTimeProc *proc, void *clientData, aeEventFinalizerProc *finalizerProc)
aeCreateTimeEvent	ae.h	/^long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds,$/;"	p	signature:(aeEventLoop *eventLoop, long long milliseconds, aeTimeProc *proc, void *clientData, aeEventFinalizerProc *finalizerProc)
aeDeleteEventLoop	ae.c	/^void aeDeleteEventLoop(aeEventLoop *eventLoop) {$/;"	f	signature:(aeEventLoop *eventLoop)
aeDeleteEventLoop	ae.h	/^void aeDeleteEventLoop(aeEventLoop *eventLoop);$/;"	p	signature:(aeEventLoop *eventLoop)
aeDeleteFileEvent	ae.c	/^void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)$/;"	f	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeDeleteFileEvent	ae.h	/^void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask);$/;"	p	signature:(aeEventLoop *eventLoop, int fd, int mask)
aeDeleteTimeEvent	ae.c	/^int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)$/;"	f	signature:(aeEventLoop *eventLoop, long long id)
aeDeleteTimeEvent	ae.h	/^int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id);$/;"	p	signature:(aeEventLoop *eventLoop, long long id)
aeEventFinalizerProc	ae.h	/^typedef void aeEventFinalizerProc(struct aeEventLoop *eventLoop, void *clientData);$/;"	t
aeEventLoop	ae.h	/^typedef struct aeEventLoop {$/;"	s
aeEventLoop	ae.h	/^} aeEventLoop;$/;"	t	typeref:struct:aeEventLoop
aeEventLoop::apidata	ae.h	/^    void *apidata; \/* This is used for polling API specific data *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::beforesleep	ae.h	/^    aeBeforeSleepProc *beforesleep;$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::events	ae.h	/^    aeFileEvent *events; \/* Registered events *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::fired	ae.h	/^    aeFiredEvent *fired; \/* Fired events *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::lastTime	ae.h	/^    time_t lastTime;     \/* Used to detect system clock skew *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::maxfd	ae.h	/^    int maxfd;   \/* highest file descriptor currently registered *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::setsize	ae.h	/^    int setsize; \/* max number of file descriptors tracked *\/$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::stop	ae.h	/^    int stop;$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::timeEventHead	ae.h	/^    aeTimeEvent *timeEventHead;$/;"	m	struct:aeEventLoop	access:public
aeEventLoop::timeEventNextId	ae.h	/^    long long timeEventNextId;$/;"	m	struct:aeEventLoop	access:public
aeFileEvent	ae.h	/^typedef struct aeFileEvent {$/;"	s
aeFileEvent	ae.h	/^} aeFileEvent;$/;"	t	typeref:struct:aeFileEvent
aeFileEvent::clientData	ae.h	/^    void *clientData;$/;"	m	struct:aeFileEvent	access:public
aeFileEvent::mask	ae.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE) *\/$/;"	m	struct:aeFileEvent	access:public
aeFileEvent::rfileProc	ae.h	/^    aeFileProc *rfileProc;$/;"	m	struct:aeFileEvent	access:public
aeFileEvent::wfileProc	ae.h	/^    aeFileProc *wfileProc;$/;"	m	struct:aeFileEvent	access:public
aeFileProc	ae.h	/^typedef void aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask);$/;"	t
aeFiredEvent	ae.h	/^typedef struct aeFiredEvent {$/;"	s
aeFiredEvent	ae.h	/^} aeFiredEvent;$/;"	t	typeref:struct:aeFiredEvent
aeFiredEvent::fd	ae.h	/^    int fd;$/;"	m	struct:aeFiredEvent	access:public
aeFiredEvent::mask	ae.h	/^    int mask;$/;"	m	struct:aeFiredEvent	access:public
aeGetApiName	ae.c	/^char *aeGetApiName(void) {$/;"	f	signature:(void)
aeGetApiName	ae.h	/^char *aeGetApiName(void);$/;"	p	signature:(void)
aeGetFileEvents	ae.c	/^int aeGetFileEvents(aeEventLoop *eventLoop, int fd) {$/;"	f	signature:(aeEventLoop *eventLoop, int fd)
aeGetFileEvents	ae.h	/^int aeGetFileEvents(aeEventLoop *eventLoop, int fd);$/;"	p	signature:(aeEventLoop *eventLoop, int fd)
aeGetSetSize	ae.c	/^int aeGetSetSize(aeEventLoop *eventLoop) {$/;"	f	signature:(aeEventLoop *eventLoop)
aeGetSetSize	ae.h	/^int aeGetSetSize(aeEventLoop *eventLoop);$/;"	p	signature:(aeEventLoop *eventLoop)
aeGetTime	ae.c	/^static void aeGetTime(long *seconds, long *milliseconds)$/;"	f	file:	signature:(long *seconds, long *milliseconds)
aeMain	ae.c	/^void aeMain(aeEventLoop *eventLoop) {$/;"	f	signature:(aeEventLoop *eventLoop)
aeMain	ae.h	/^void aeMain(aeEventLoop *eventLoop);$/;"	p	signature:(aeEventLoop *eventLoop)
aeProcessEvents	ae.c	/^int aeProcessEvents(aeEventLoop *eventLoop, int flags)$/;"	f	signature:(aeEventLoop *eventLoop, int flags)
aeProcessEvents	ae.h	/^int aeProcessEvents(aeEventLoop *eventLoop, int flags);$/;"	p	signature:(aeEventLoop *eventLoop, int flags)
aeResizeSetSize	ae.c	/^int aeResizeSetSize(aeEventLoop *eventLoop, int setsize) {$/;"	f	signature:(aeEventLoop *eventLoop, int setsize)
aeResizeSetSize	ae.h	/^int aeResizeSetSize(aeEventLoop *eventLoop, int setsize);$/;"	p	signature:(aeEventLoop *eventLoop, int setsize)
aeSearchNearestTimer	ae.c	/^static aeTimeEvent *aeSearchNearestTimer(aeEventLoop *eventLoop)$/;"	f	file:	signature:(aeEventLoop *eventLoop)
aeSetBeforeSleepProc	ae.c	/^void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep) {$/;"	f	signature:(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep)
aeSetBeforeSleepProc	ae.h	/^void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep);$/;"	p	signature:(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep)
aeStop	ae.c	/^void aeStop(aeEventLoop *eventLoop) {$/;"	f	signature:(aeEventLoop *eventLoop)
aeStop	ae.h	/^void aeStop(aeEventLoop *eventLoop);$/;"	p	signature:(aeEventLoop *eventLoop)
aeTimeEvent	ae.h	/^typedef struct aeTimeEvent {$/;"	s
aeTimeEvent	ae.h	/^} aeTimeEvent;$/;"	t	typeref:struct:aeTimeEvent
aeTimeEvent::clientData	ae.h	/^    void *clientData;$/;"	m	struct:aeTimeEvent	access:public
aeTimeEvent::finalizerProc	ae.h	/^    aeEventFinalizerProc *finalizerProc;$/;"	m	struct:aeTimeEvent	access:public
aeTimeEvent::id	ae.h	/^    long long id; \/* time event identifier. *\/$/;"	m	struct:aeTimeEvent	access:public
aeTimeEvent::next	ae.h	/^    struct aeTimeEvent *next;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent::aeTimeEvent	access:public
aeTimeEvent::timeProc	ae.h	/^    aeTimeProc *timeProc;$/;"	m	struct:aeTimeEvent	access:public
aeTimeEvent::when_ms	ae.h	/^    long when_ms; \/* milliseconds *\/$/;"	m	struct:aeTimeEvent	access:public
aeTimeEvent::when_sec	ae.h	/^    long when_sec; \/* seconds *\/$/;"	m	struct:aeTimeEvent	access:public
aeTimeProc	ae.h	/^typedef int aeTimeProc(struct aeEventLoop *eventLoop, long long id, void *clientData);$/;"	t
aeWait	ae.c	/^int aeWait(int fd, int mask, long long milliseconds) {$/;"	f	signature:(int fd, int mask, long long milliseconds)
aeWait	ae.h	/^int aeWait(int fd, int mask, long long milliseconds);$/;"	p	signature:(int fd, int mask, long long milliseconds)
all_time_high	latency.h	/^    uint32_t all_time_high; \/* Absolute max observed since latest reset. *\/$/;"	m	struct:latencyStats	access:public
alloc	sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16	access:public
alloc	sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32	access:public
alloc	sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64	access:public
alloc	sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8	access:public
alloc_slots	redis-trib.rb	/^    def alloc_slots$/;"	f	class:RedisTrib
already_expired	redis-check-rdb.c	/^    unsigned long already_expired;  \/* Number of keys already expired. *\/$/;"	m	struct:__anon23	file:	access:public
alsoPropagate	server.c	/^void alsoPropagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f	signature:(struct redisCommand *cmd, int dbid, robj **argv, int argc, int target)
alsoPropagate	server.h	/^void alsoPropagate(struct redisCommand *cmd, int dbid, robj **argv, int argc, int target);$/;"	p	signature:(struct redisCommand *cmd, int dbid, robj **argv, int argc, int target)
also_propagate	server.h	/^    redisOpArray also_propagate;    \/* Additional command to propagate. *\/$/;"	m	struct:redisServer	access:public
analyzeLatencyForEvent	latency.c	/^void analyzeLatencyForEvent(char *event, struct latencyStats *ls) {$/;"	f	signature:(char *event, struct latencyStats *ls)
anetBlock	anet.c	/^int anetBlock(char *err, int fd) {$/;"	f	signature:(char *err, int fd)
anetBlock	anet.h	/^int anetBlock(char *err, int fd);$/;"	p	signature:(char *err, int fd)
anetCreateSocket	anet.c	/^static int anetCreateSocket(char *err, int domain) {$/;"	f	file:	signature:(char *err, int domain)
anetDisableTcpNoDelay	anet.c	/^int anetDisableTcpNoDelay(char *err, int fd)$/;"	f	signature:(char *err, int fd)
anetDisableTcpNoDelay	anet.h	/^int anetDisableTcpNoDelay(char *err, int fd);$/;"	p	signature:(char *err, int fd)
anetEnableTcpNoDelay	anet.c	/^int anetEnableTcpNoDelay(char *err, int fd)$/;"	f	signature:(char *err, int fd)
anetEnableTcpNoDelay	anet.h	/^int anetEnableTcpNoDelay(char *err, int fd);$/;"	p	signature:(char *err, int fd)
anetFormatAddr	anet.c	/^int anetFormatAddr(char *buf, size_t buf_len, char *ip, int port) {$/;"	f	signature:(char *buf, size_t buf_len, char *ip, int port)
anetFormatAddr	anet.h	/^int anetFormatAddr(char *fmt, size_t fmt_len, char *ip, int port);$/;"	p	signature:(char *fmt, size_t fmt_len, char *ip, int port)
anetFormatPeer	anet.c	/^int anetFormatPeer(int fd, char *buf, size_t buf_len) {$/;"	f	signature:(int fd, char *buf, size_t buf_len)
anetFormatPeer	anet.h	/^int anetFormatPeer(int fd, char *fmt, size_t fmt_len);$/;"	p	signature:(int fd, char *fmt, size_t fmt_len)
anetFormatSock	anet.c	/^int anetFormatSock(int fd, char *fmt, size_t fmt_len) {$/;"	f	signature:(int fd, char *fmt, size_t fmt_len)
anetFormatSock	anet.h	/^int anetFormatSock(int fd, char *fmt, size_t fmt_len);$/;"	p	signature:(int fd, char *fmt, size_t fmt_len)
anetGenericAccept	anet.c	/^static int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {$/;"	f	file:	signature:(char *err, int s, struct sockaddr *sa, socklen_t *len)
anetGenericResolve	anet.c	/^int anetGenericResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len,$/;"	f	signature:(char *err, char *host, char *ipbuf, size_t ipbuf_len, int flags)
anetKeepAlive	anet.c	/^int anetKeepAlive(char *err, int fd, int interval)$/;"	f	signature:(char *err, int fd, int interval)
anetKeepAlive	anet.h	/^int anetKeepAlive(char *err, int fd, int interval);$/;"	p	signature:(char *err, int fd, int interval)
anetListen	anet.c	/^static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {$/;"	f	file:	signature:(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog)
anetNonBlock	anet.c	/^int anetNonBlock(char *err, int fd) {$/;"	f	signature:(char *err, int fd)
anetNonBlock	anet.h	/^int anetNonBlock(char *err, int fd);$/;"	p	signature:(char *err, int fd)
anetPeerToString	anet.c	/^int anetPeerToString(int fd, char *ip, size_t ip_len, int *port) {$/;"	f	signature:(int fd, char *ip, size_t ip_len, int *port)
anetPeerToString	anet.h	/^int anetPeerToString(int fd, char *ip, size_t ip_len, int *port);$/;"	p	signature:(int fd, char *ip, size_t ip_len, int *port)
anetRead	anet.c	/^int anetRead(int fd, char *buf, int count)$/;"	f	signature:(int fd, char *buf, int count)
anetRead	anet.h	/^int anetRead(int fd, char *buf, int count);$/;"	p	signature:(int fd, char *buf, int count)
anetResolve	anet.c	/^int anetResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len) {$/;"	f	signature:(char *err, char *host, char *ipbuf, size_t ipbuf_len)
anetResolve	anet.h	/^int anetResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len);$/;"	p	signature:(char *err, char *host, char *ipbuf, size_t ipbuf_len)
anetResolveIP	anet.c	/^int anetResolveIP(char *err, char *host, char *ipbuf, size_t ipbuf_len) {$/;"	f	signature:(char *err, char *host, char *ipbuf, size_t ipbuf_len)
anetResolveIP	anet.h	/^int anetResolveIP(char *err, char *host, char *ipbuf, size_t ipbuf_len);$/;"	p	signature:(char *err, char *host, char *ipbuf, size_t ipbuf_len)
anetSendTimeout	anet.c	/^int anetSendTimeout(char *err, int fd, long long ms) {$/;"	f	signature:(char *err, int fd, long long ms)
anetSendTimeout	anet.h	/^int anetSendTimeout(char *err, int fd, long long ms);$/;"	p	signature:(char *err, int fd, long long ms)
anetSetBlock	anet.c	/^int anetSetBlock(char *err, int fd, int non_block) {$/;"	f	signature:(char *err, int fd, int non_block)
anetSetError	anet.c	/^static void anetSetError(char *err, const char *fmt, ...)$/;"	f	file:	signature:(char *err, const char *fmt, ...)
anetSetReuseAddr	anet.c	/^static int anetSetReuseAddr(char *err, int fd) {$/;"	f	file:	signature:(char *err, int fd)
anetSetSendBuffer	anet.c	/^int anetSetSendBuffer(char *err, int fd, int buffsize)$/;"	f	signature:(char *err, int fd, int buffsize)
anetSetTcpNoDelay	anet.c	/^static int anetSetTcpNoDelay(char *err, int fd, int val)$/;"	f	file:	signature:(char *err, int fd, int val)
anetSockName	anet.c	/^int anetSockName(int fd, char *ip, size_t ip_len, int *port) {$/;"	f	signature:(int fd, char *ip, size_t ip_len, int *port)
anetSockName	anet.h	/^int anetSockName(int fd, char *ip, size_t ip_len, int *port);$/;"	p	signature:(int fd, char *ip, size_t ip_len, int *port)
anetTcp6Server	anet.c	/^int anetTcp6Server(char *err, int port, char *bindaddr, int backlog)$/;"	f	signature:(char *err, int port, char *bindaddr, int backlog)
anetTcp6Server	anet.h	/^int anetTcp6Server(char *err, int port, char *bindaddr, int backlog);$/;"	p	signature:(char *err, int port, char *bindaddr, int backlog)
anetTcpAccept	anet.c	/^int anetTcpAccept(char *err, int s, char *ip, size_t ip_len, int *port) {$/;"	f	signature:(char *err, int s, char *ip, size_t ip_len, int *port)
anetTcpAccept	anet.h	/^int anetTcpAccept(char *err, int serversock, char *ip, size_t ip_len, int *port);$/;"	p	signature:(char *err, int serversock, char *ip, size_t ip_len, int *port)
anetTcpConnect	anet.c	/^int anetTcpConnect(char *err, char *addr, int port)$/;"	f	signature:(char *err, char *addr, int port)
anetTcpConnect	anet.h	/^int anetTcpConnect(char *err, char *addr, int port);$/;"	p	signature:(char *err, char *addr, int port)
anetTcpGenericConnect	anet.c	/^static int anetTcpGenericConnect(char *err, char *addr, int port,$/;"	f	file:	signature:(char *err, char *addr, int port, char *source_addr, int flags)
anetTcpKeepAlive	anet.c	/^int anetTcpKeepAlive(char *err, int fd)$/;"	f	signature:(char *err, int fd)
anetTcpKeepAlive	anet.h	/^int anetTcpKeepAlive(char *err, int fd);$/;"	p	signature:(char *err, int fd)
anetTcpNonBlockBestEffortBindConnect	anet.c	/^int anetTcpNonBlockBestEffortBindConnect(char *err, char *addr, int port,$/;"	f	signature:(char *err, char *addr, int port, char *source_addr)
anetTcpNonBlockBestEffortBindConnect	anet.h	/^int anetTcpNonBlockBestEffortBindConnect(char *err, char *addr, int port, char *source_addr);$/;"	p	signature:(char *err, char *addr, int port, char *source_addr)
anetTcpNonBlockBindConnect	anet.c	/^int anetTcpNonBlockBindConnect(char *err, char *addr, int port,$/;"	f	signature:(char *err, char *addr, int port, char *source_addr)
anetTcpNonBlockBindConnect	anet.h	/^int anetTcpNonBlockBindConnect(char *err, char *addr, int port, char *source_addr);$/;"	p	signature:(char *err, char *addr, int port, char *source_addr)
anetTcpNonBlockConnect	anet.c	/^int anetTcpNonBlockConnect(char *err, char *addr, int port)$/;"	f	signature:(char *err, char *addr, int port)
anetTcpNonBlockConnect	anet.h	/^int anetTcpNonBlockConnect(char *err, char *addr, int port);$/;"	p	signature:(char *err, char *addr, int port)
anetTcpServer	anet.c	/^int anetTcpServer(char *err, int port, char *bindaddr, int backlog)$/;"	f	signature:(char *err, int port, char *bindaddr, int backlog)
anetTcpServer	anet.h	/^int anetTcpServer(char *err, int port, char *bindaddr, int backlog);$/;"	p	signature:(char *err, int port, char *bindaddr, int backlog)
anetUnixAccept	anet.c	/^int anetUnixAccept(char *err, int s) {$/;"	f	signature:(char *err, int s)
anetUnixAccept	anet.h	/^int anetUnixAccept(char *err, int serversock);$/;"	p	signature:(char *err, int serversock)
anetUnixConnect	anet.c	/^int anetUnixConnect(char *err, char *path)$/;"	f	signature:(char *err, char *path)
anetUnixConnect	anet.h	/^int anetUnixConnect(char *err, char *path);$/;"	p	signature:(char *err, char *path)
anetUnixGenericConnect	anet.c	/^int anetUnixGenericConnect(char *err, char *path, int flags)$/;"	f	signature:(char *err, char *path, int flags)
anetUnixNonBlockConnect	anet.c	/^int anetUnixNonBlockConnect(char *err, char *path)$/;"	f	signature:(char *err, char *path)
anetUnixNonBlockConnect	anet.h	/^int anetUnixNonBlockConnect(char *err, char *path);$/;"	p	signature:(char *err, char *path)
anetUnixServer	anet.c	/^int anetUnixServer(char *err, char *path, mode_t perm, int backlog)$/;"	f	signature:(char *err, char *path, mode_t perm, int backlog)
anetUnixServer	anet.h	/^int anetUnixServer(char *err, char *path, mode_t perm, int backlog);$/;"	p	signature:(char *err, char *path, mode_t perm, int backlog)
anetV6Only	anet.c	/^static int anetV6Only(char *err, int s) {$/;"	f	file:	signature:(char *err, int s)
anetWrite	anet.c	/^int anetWrite(int fd, char *buf, int count)$/;"	f	signature:(int fd, char *buf, int count)
anetWrite	anet.h	/^int anetWrite(int fd, char *buf, int count);$/;"	p	signature:(int fd, char *buf, int count)
announce_ip	sentinel.c	/^    char *announce_ip;  \/* IP addr that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:	access:public
announce_port	sentinel.c	/^    int announce_port;  \/* Port that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:	access:public
aofChildPipeReadable	aof.c	/^void aofChildPipeReadable(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
aofChildWriteDiffData	aof.c	/^void aofChildWriteDiffData(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
aofClosePipes	aof.c	/^void aofClosePipes(void) {$/;"	f	signature:(void)
aofClosePipes	aof.c	/^void aofClosePipes(void);$/;"	p	file:	signature:(void)
aofCreatePipes	aof.c	/^int aofCreatePipes(void) {$/;"	f	signature:(void)
aofReadDiffFromParent	aof.c	/^ssize_t aofReadDiffFromParent(void) {$/;"	f	signature:(void)
aofRemoveTempFile	aof.c	/^void aofRemoveTempFile(pid_t childpid) {$/;"	f	signature:(pid_t childpid)
aofRemoveTempFile	server.h	/^void aofRemoveTempFile(pid_t childpid);$/;"	p	signature:(pid_t childpid)
aofRewriteBufferAppend	aof.c	/^void aofRewriteBufferAppend(unsigned char *s, unsigned long len) {$/;"	f	signature:(unsigned char *s, unsigned long len)
aofRewriteBufferReset	aof.c	/^void aofRewriteBufferReset(void) {$/;"	f	signature:(void)
aofRewriteBufferReset	server.h	/^void aofRewriteBufferReset(void);$/;"	p	signature:(void)
aofRewriteBufferSize	aof.c	/^unsigned long aofRewriteBufferSize(void) {$/;"	f	signature:(void)
aofRewriteBufferSize	server.h	/^unsigned long aofRewriteBufferSize(void);$/;"	p	signature:(void)
aofRewriteBufferWrite	aof.c	/^ssize_t aofRewriteBufferWrite(int fd) {$/;"	f	signature:(int fd)
aofUpdateCurrentSize	aof.c	/^void aofUpdateCurrentSize(void) {$/;"	f	signature:(void)
aofUpdateCurrentSize	aof.c	/^void aofUpdateCurrentSize(void);$/;"	p	file:	signature:(void)
aof_background_fsync	aof.c	/^void aof_background_fsync(int fd) {$/;"	f	signature:(int fd)
aof_buf	server.h	/^    sds aof_buf;      \/* AOF buffer, written before entering the event loop *\/$/;"	m	struct:redisServer	access:public
aof_child_diff	server.h	/^    sds aof_child_diff;             \/* AOF diff accumulator child side. *\/$/;"	m	struct:redisServer	access:public
aof_child_pid	server.h	/^    pid_t aof_child_pid;            \/* PID if rewriting process *\/$/;"	m	struct:redisServer	access:public
aof_current_size	server.h	/^    off_t aof_current_size;         \/* AOF current size. *\/$/;"	m	struct:redisServer	access:public
aof_delayed_fsync	server.h	/^    unsigned long aof_delayed_fsync;  \/* delayed AOF fsync() counter *\/$/;"	m	struct:redisServer	access:public
aof_fd	server.h	/^    int aof_fd;       \/* File descriptor of currently selected AOF file *\/$/;"	m	struct:redisServer	access:public
aof_filename	server.h	/^    char *aof_filename;             \/* Name of the AOF file *\/$/;"	m	struct:redisServer	access:public
aof_flush_postponed_start	server.h	/^    time_t aof_flush_postponed_start; \/* UNIX time of postponed AOF flush *\/$/;"	m	struct:redisServer	access:public
aof_fsync	config.h	92;"	d
aof_fsync	config.h	94;"	d
aof_fsync	server.h	/^    int aof_fsync;                  \/* Kind of fsync() policy *\/$/;"	m	struct:redisServer	access:public
aof_fsync_enum	config.c	/^configEnum aof_fsync_enum[] = {$/;"	v
aof_last_fsync	server.h	/^    time_t aof_last_fsync;            \/* UNIX time of last fsync() *\/$/;"	m	struct:redisServer	access:public
aof_last_write_errno	server.h	/^    int aof_last_write_errno;       \/* Valid if aof_last_write_status is ERR *\/$/;"	m	struct:redisServer	access:public
aof_last_write_status	server.h	/^    int aof_last_write_status;      \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	access:public
aof_lastbgrewrite_status	server.h	/^    int aof_lastbgrewrite_status;   \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	access:public
aof_load_truncated	server.h	/^    int aof_load_truncated;         \/* Don't stop on unexpected AOF EOF. *\/$/;"	m	struct:redisServer	access:public
aof_no_fsync_on_rewrite	server.h	/^    int aof_no_fsync_on_rewrite;    \/* Don't fsync if a rewrite is in prog. *\/$/;"	m	struct:redisServer	access:public
aof_pipe_read_ack_from_child	server.h	/^    int aof_pipe_read_ack_from_child;$/;"	m	struct:redisServer	access:public
aof_pipe_read_ack_from_parent	server.h	/^    int aof_pipe_read_ack_from_parent;$/;"	m	struct:redisServer	access:public
aof_pipe_read_data_from_parent	server.h	/^    int aof_pipe_read_data_from_parent;$/;"	m	struct:redisServer	access:public
aof_pipe_write_ack_to_child	server.h	/^    int aof_pipe_write_ack_to_child;$/;"	m	struct:redisServer	access:public
aof_pipe_write_ack_to_parent	server.h	/^    int aof_pipe_write_ack_to_parent;$/;"	m	struct:redisServer	access:public
aof_pipe_write_data_to_child	server.h	/^    int aof_pipe_write_data_to_child;$/;"	m	struct:redisServer	access:public
aof_rewrite_base_size	server.h	/^    off_t aof_rewrite_base_size;    \/* AOF size on latest startup or rewrite. *\/$/;"	m	struct:redisServer	access:public
aof_rewrite_buf_blocks	server.h	/^    list *aof_rewrite_buf_blocks;   \/* Hold changes during an AOF rewrite. *\/$/;"	m	struct:redisServer	access:public
aof_rewrite_incremental_fsync	server.h	/^    int aof_rewrite_incremental_fsync;\/* fsync incrementally while rewriting? *\/$/;"	m	struct:redisServer	access:public
aof_rewrite_min_size	server.h	/^    off_t aof_rewrite_min_size;     \/* the AOF file is at least N bytes. *\/$/;"	m	struct:redisServer	access:public
aof_rewrite_perc	server.h	/^    int aof_rewrite_perc;           \/* Rewrite AOF if % growth is > M and... *\/$/;"	m	struct:redisServer	access:public
aof_rewrite_scheduled	server.h	/^    int aof_rewrite_scheduled;      \/* Rewrite once BGSAVE terminates. *\/$/;"	m	struct:redisServer	access:public
aof_rewrite_time_last	server.h	/^    time_t aof_rewrite_time_last;   \/* Time used by last AOF rewrite run. *\/$/;"	m	struct:redisServer	access:public
aof_rewrite_time_start	server.h	/^    time_t aof_rewrite_time_start;  \/* Current AOF rewrite start time. *\/$/;"	m	struct:redisServer	access:public
aof_selected_db	server.h	/^    int aof_selected_db; \/* Currently selected DB in AOF *\/$/;"	m	struct:redisServer	access:public
aof_state	server.h	/^    int aof_state;                  \/* AOF_(ON|OFF|WAIT_REWRITE) *\/$/;"	m	struct:redisServer	access:public
aof_stop_sending_diff	server.h	/^    int aof_stop_sending_diff;     \/* If true stop sending accumulated diffs$/;"	m	struct:redisServer	access:public
aofrwblock	aof.c	/^typedef struct aofrwblock {$/;"	s	file:
aofrwblock	aof.c	/^} aofrwblock;$/;"	t	typeref:struct:aofrwblock	file:
aofrwblock::buf	aof.c	/^    char buf[AOF_RW_BUF_BLOCK_SIZE];$/;"	m	struct:aofrwblock	file:	access:public
aofrwblock::free	aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:	access:public
aofrwblock::used	aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:	access:public
apidata	ae.h	/^    void *apidata; \/* This is used for polling API specific data *\/$/;"	m	struct:aeEventLoop	access:public
appendCommand	server.h	/^void appendCommand(client *c);$/;"	p	signature:(client *c)
appendCommand	t_string.c	/^void appendCommand(client *c) {$/;"	f	signature:(client *c)
appendServerSaveParams	config.c	/^void appendServerSaveParams(time_t seconds, int changes) {$/;"	f	signature:(time_t seconds, int changes)
appendServerSaveParams	server.h	/^void appendServerSaveParams(time_t seconds, int changes);$/;"	p	signature:(time_t seconds, int changes)
arch_bits	server.h	/^    int arch_bits;              \/* 32 or 64 depending on sizeof(long) *\/$/;"	m	struct:redisServer	access:public
arg0	setproctitle.c	/^	const char *arg0;$/;"	m	struct:__anon39	file:	access:public
arg1	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:	access:public
arg2	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:	access:public
arg3	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:	access:public
argc	redis-cli.c	/^    int argc;$/;"	m	struct:__anon38	file:	access:public
argc	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	access:public
argc	server.h	/^    int argc;               \/* Num of arguments of current command. *\/$/;"	m	struct:client	access:public
argc	server.h	/^    int argc;$/;"	m	struct:multiCmd	access:public
argc	slowlog.h	/^    int argc;$/;"	m	struct:slowlogEntry	access:public
argv	redis-cli.c	/^    sds *argv;$/;"	m	struct:__anon38	file:	access:public
argv	sentinel.c	/^    char **argv;            \/* Arguments to call the script. *\/$/;"	m	struct:sentinelScriptJob	file:	access:public
argv	server.h	/^    robj **argv;            \/* Arguments of current command. *\/$/;"	m	struct:client	access:public
argv	server.h	/^    robj **argv;$/;"	m	struct:multiCmd	access:public
argv	server.h	/^    robj **argv;$/;"	m	struct:redisOp	access:public
argv	slowlog.h	/^    robj **argv;$/;"	m	struct:slowlogEntry	access:public
arity	server.h	/^    int arity;$/;"	m	struct:redisCommand	access:public
array	geo.h	/^    struct geoPoint *array;$/;"	m	struct:geoArray	typeref:struct:geoArray::geoPoint	access:public
ascii_logo	asciilogo.h	/^char *ascii_logo =$/;"	v
askingCommand	cluster.c	/^void askingCommand(client *c) {$/;"	f	signature:(client *c)
askingCommand	server.h	/^void askingCommand(client *c);$/;"	p	signature:(client *c)
assert	intset.c	312;"	d	file:
assert	quicklist.c	1418;"	d	file:
assert	redisassert.h	43;"	d
assert_cluster	redis-trib.rb	/^    def assert_cluster$/;"	f	class:ClusterNode
assert_empty	redis-trib.rb	/^    def assert_empty$/;"	f	class:ClusterNode
assert_failed	server.h	/^    char *assert_failed;$/;"	m	struct:redisServer	access:public
assert_file	server.h	/^    char *assert_file;$/;"	m	struct:redisServer	access:public
assert_line	server.h	/^    int assert_line;$/;"	m	struct:redisServer	access:public
assign_config_epoch	redis-trib.rb	/^    def assign_config_epoch$/;"	f	class:RedisTrib.alloc_slots
asyncCloseClientOnOutputBufferLimitReached	networking.c	/^void asyncCloseClientOnOutputBufferLimitReached(client *c) {$/;"	f	signature:(client *c)
asyncCloseClientOnOutputBufferLimitReached	server.h	/^void asyncCloseClientOnOutputBufferLimitReached(client *c);$/;"	p	signature:(client *c)
attempted_compress	quicklist.h	/^    unsigned int attempted_compress : 1; \/* node can't compress; too small *\/$/;"	m	struct:quicklistNode	access:public
auth	redis-benchmark.c	/^    char *auth;$/;"	m	struct:config	file:	access:public
auth	redis-cli.c	/^    char *auth;$/;"	m	struct:config	file:	access:public
authCommand	server.c	/^void authCommand(client *c) {$/;"	f	signature:(client *c)
authCommand	server.h	/^void authCommand(client *c);$/;"	p	signature:(client *c)
auth_pass	sentinel.c	/^    char *auth_pass;    \/* Password to use for AUTH against master & slaves. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
authenticated	server.h	/^    int authenticated;      \/* When requirepass is non-NULL. *\/$/;"	m	struct:client	access:public
authorized	slots.c	/^    int authorized;$/;"	m	struct:__anon28	file:	access:public
autosync	rio.h	/^            off_t autosync; \/* fsync after 'autosync' bytes written. *\/$/;"	m	struct:_rio::__anon24::__anon26	access:public
avg	latency.h	/^    uint32_t avg;           \/* Average of current samples. *\/$/;"	m	struct:latencyStats	access:public
avg_ttl	server.h	/^    long long avg_ttl;          \/* Average TTL, just for stats *\/$/;"	m	struct:redisDb	access:public
backgroundRewriteDoneHandler	aof.c	/^void backgroundRewriteDoneHandler(int exitcode, int bysignal) {$/;"	f	signature:(int exitcode, int bysignal)
backgroundRewriteDoneHandler	server.h	/^void backgroundRewriteDoneHandler(int exitcode, int bysignal);$/;"	p	signature:(int exitcode, int bysignal)
backgroundSaveDoneHandler	rdb.c	/^void backgroundSaveDoneHandler(int exitcode, int bysignal) {$/;"	f	signature:(int exitcode, int bysignal)
backgroundSaveDoneHandler	rdb.h	/^void backgroundSaveDoneHandler(int exitcode, int bysignal);$/;"	p	signature:(int exitcode, int bysignal)
backgroundSaveDoneHandlerDisk	rdb.c	/^void backgroundSaveDoneHandlerDisk(int exitcode, int bysignal) {$/;"	f	signature:(int exitcode, int bysignal)
backgroundSaveDoneHandlerSocket	rdb.c	/^void backgroundSaveDoneHandlerSocket(int exitcode, int bysignal) {$/;"	f	signature:(int exitcode, int bysignal)
backward	server.h	/^    struct zskiplistNode *backward;$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistNode	access:public
base	setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon39	file:	access:public
batchedObjectIterator	slots_async.c	/^} batchedObjectIterator;$/;"	t	typeref:struct:__anon13	file:
batchedObjectIteratorAddKey	slots_async.c	/^batchedObjectIteratorAddKey(redisDb *db, batchedObjectIterator *it, robj *key) {$/;"	f	file:	signature:(redisDb *db, batchedObjectIterator *it, robj *key)
batchedObjectIteratorAddKeyCallback	slots_async.c	/^batchedObjectIteratorAddKeyCallback(void *data, const dictEntry *de) {$/;"	f	file:	signature:(void *data, const dictEntry *de)
batchedObjectIteratorContains	slots_async.c	/^batchedObjectIteratorContains(batchedObjectIterator *it, robj *key, int usetag) {$/;"	f	file:	signature:(batchedObjectIterator *it, robj *key, int usetag)
batchedObjectIteratorHasNext	slots_async.c	/^batchedObjectIteratorHasNext(batchedObjectIterator *it) {$/;"	f	file:	signature:(batchedObjectIterator *it)
batchedObjectIteratorNext	slots_async.c	/^batchedObjectIteratorNext(client *c, batchedObjectIterator *it) {$/;"	f	file:	signature:(client *c, batchedObjectIterator *it)
batched_iter	server.h	/^    void *batched_iter;$/;"	m	struct:__anon29	access:public
beforeSleep	server.c	/^void beforeSleep(struct aeEventLoop *eventLoop) {$/;"	f	signature:(struct aeEventLoop *eventLoop)
beforesleep	ae.h	/^    aeBeforeSleepProc *beforesleep;$/;"	m	struct:aeEventLoop	access:public
benchmark	redis-benchmark.c	/^static void benchmark(char *title, char *cmd, int len) {$/;"	f	file:	signature:(char *title, char *cmd, int len)
bgrewriteaofCommand	aof.c	/^void bgrewriteaofCommand(client *c) {$/;"	f	signature:(client *c)
bgrewriteaofCommand	server.h	/^void bgrewriteaofCommand(client *c);$/;"	p	signature:(client *c)
bgsaveCommand	rdb.c	/^void bgsaveCommand(client *c) {$/;"	f	signature:(client *c)
bgsaveCommand	server.h	/^void bgsaveCommand(client *c);$/;"	p	signature:(client *c)
bgsaveerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
bigkeys	redis-cli.c	/^    int bigkeys;$/;"	m	struct:config	file:	access:public
bindaddr	server.h	/^    char *bindaddr[CONFIG_BINDADDR_MAX]; \/* Addresses we should bind to *\/$/;"	m	struct:redisServer	access:public
bindaddr_count	server.h	/^    int bindaddr_count;         \/* Number of addresses in server.bindaddr[] *\/$/;"	m	struct:redisServer	access:public
bioCreateBackgroundJob	bio.c	/^void bioCreateBackgroundJob(int type, void *arg1, void *arg2, void *arg3) {$/;"	f	signature:(int type, void *arg1, void *arg2, void *arg3)
bioCreateBackgroundJob	bio.h	/^void bioCreateBackgroundJob(int type, void *arg1, void *arg2, void *arg3);$/;"	p	signature:(int type, void *arg1, void *arg2, void *arg3)
bioInit	bio.c	/^void bioInit(void) {$/;"	f	signature:(void)
bioInit	bio.h	/^void bioInit(void);$/;"	p	signature:(void)
bioKillThreads	bio.c	/^void bioKillThreads(void) {$/;"	f	signature:(void)
bioKillThreads	bio.h	/^void bioKillThreads(void);$/;"	p	signature:(void)
bioOlderJobOfType	bio.h	/^time_t bioOlderJobOfType(int type);$/;"	p	signature:(int type)
bioPendingJobsOfType	bio.c	/^unsigned long long bioPendingJobsOfType(int type) {$/;"	f	signature:(int type)
bioPendingJobsOfType	bio.h	/^unsigned long long bioPendingJobsOfType(int type);$/;"	p	signature:(int type)
bioProcessBackgroundJobs	bio.c	/^void *bioProcessBackgroundJobs(void *arg) {$/;"	f	signature:(void *arg)
bioProcessBackgroundJobs	bio.c	/^void *bioProcessBackgroundJobs(void *arg);$/;"	p	file:	signature:(void *arg)
bioWaitPendingJobsLE	bio.h	/^void bioWaitPendingJobsLE(int type, unsigned long long num);$/;"	p	signature:(int type, unsigned long long num)
bio_condvar	bio.c	/^static pthread_cond_t bio_condvar[BIO_NUM_OPS];$/;"	v	file:
bio_job	bio.c	/^struct bio_job {$/;"	s	file:
bio_job::arg1	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:	access:public
bio_job::arg2	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:	access:public
bio_job::arg3	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:	access:public
bio_job::time	bio.c	/^    time_t time; \/* Time at which the job was created. *\/$/;"	m	struct:bio_job	file:	access:public
bio_jobs	bio.c	/^static list *bio_jobs[BIO_NUM_OPS];$/;"	v	file:
bio_mutex	bio.c	/^static pthread_mutex_t bio_mutex[BIO_NUM_OPS];$/;"	v	file:
bio_pending	bio.c	/^static unsigned long long bio_pending[BIO_NUM_OPS];$/;"	v	file:
bio_threads	bio.c	/^static pthread_t bio_threads[BIO_NUM_OPS];$/;"	v	file:
bitcountCommand	bitops.c	/^void bitcountCommand(client *c) {$/;"	f	signature:(client *c)
bitcountCommand	server.h	/^void bitcountCommand(client *c);$/;"	p	signature:(client *c)
bitfieldCommand	bitops.c	/^void bitfieldCommand(client *c) {$/;"	f	signature:(client *c)
bitfieldCommand	server.h	/^void bitfieldCommand(client *c);$/;"	p	signature:(client *c)
bitfieldOp	bitops.c	/^struct bitfieldOp {$/;"	s	file:
bitfieldOp::bits	bitops.c	/^    int bits;           \/* Integer bitfield bits width. *\/$/;"	m	struct:bitfieldOp	file:	access:public
bitfieldOp::i64	bitops.c	/^    int64_t i64;        \/* Increment amount (INCRBY) or SET value *\/$/;"	m	struct:bitfieldOp	file:	access:public
bitfieldOp::offset	bitops.c	/^    uint64_t offset;    \/* Bitfield offset. *\/$/;"	m	struct:bitfieldOp	file:	access:public
bitfieldOp::opcode	bitops.c	/^    int opcode;         \/* Operation id. *\/$/;"	m	struct:bitfieldOp	file:	access:public
bitfieldOp::owtype	bitops.c	/^    int owtype;         \/* Overflow type to use. *\/$/;"	m	struct:bitfieldOp	file:	access:public
bitfieldOp::sign	bitops.c	/^    int sign;           \/* True if signed, otherwise unsigned op. *\/$/;"	m	struct:bitfieldOp	file:	access:public
bitmapClearBit	cluster.c	/^void bitmapClearBit(unsigned char *bitmap, int pos) {$/;"	f	signature:(unsigned char *bitmap, int pos)
bitmapSetBit	cluster.c	/^void bitmapSetBit(unsigned char *bitmap, int pos) {$/;"	f	signature:(unsigned char *bitmap, int pos)
bitmapTestBit	cluster.c	/^int bitmapTestBit(unsigned char *bitmap, int pos) {$/;"	f	signature:(unsigned char *bitmap, int pos)
bitmapTestBit	cluster.c	/^int bitmapTestBit(unsigned char *bitmap, int pos);$/;"	p	file:	signature:(unsigned char *bitmap, int pos)
bitopCommand	bitops.c	/^void bitopCommand(client *c) {$/;"	f	signature:(client *c)
bitopCommand	server.h	/^void bitopCommand(client *c);$/;"	p	signature:(client *c)
bitposCommand	bitops.c	/^void bitposCommand(client *c) {$/;"	f	signature:(client *c)
bitposCommand	server.h	/^void bitposCommand(client *c);$/;"	p	signature:(client *c)
bits	bitops.c	/^    int bits;           \/* Integer bitfield bits width. *\/$/;"	m	struct:bitfieldOp	file:	access:public
blk	sha1.c	43;"	d	file:
blk0	sha1.c	36;"	d	file:
blk0	sha1.c	39;"	d	file:
blockClient	blocked.c	/^void blockClient(client *c, int btype) {$/;"	f	signature:(client *c, int btype)
blockClient	server.h	/^void blockClient(client *c, int btype);$/;"	p	signature:(client *c, int btype)
blockForKeys	t_list.c	/^void blockForKeys(client *c, robj **keys, int numkeys, mstime_t timeout, robj *target) {$/;"	f	signature:(client *c, robj **keys, int numkeys, mstime_t timeout, robj *target)
blocked_list	server.h	/^    list *blocked_list;$/;"	m	struct:__anon29	access:public
blockingPopGenericCommand	t_list.c	/^void blockingPopGenericCommand(client *c, int where) {$/;"	f	signature:(client *c, int where)
blockingState	server.h	/^typedef struct blockingState {$/;"	s
blockingState	server.h	/^} blockingState;$/;"	t	typeref:struct:blockingState
blockingState::keys	server.h	/^    dict *keys;             \/* The keys we are waiting to terminate a blocking$/;"	m	struct:blockingState	access:public
blockingState::numreplicas	server.h	/^    int numreplicas;        \/* Number of replicas we are waiting for ACK. *\/$/;"	m	struct:blockingState	access:public
blockingState::reploffset	server.h	/^    long long reploffset;   \/* Replication offset to reach. *\/$/;"	m	struct:blockingState	access:public
blockingState::target	server.h	/^    robj *target;           \/* The key that should receive the element,$/;"	m	struct:blockingState	access:public
blockingState::timeout	server.h	/^    mstime_t timeout;       \/* Blocking operation timeout. If UNIX current time$/;"	m	struct:blockingState	access:public
blocking_keys	server.h	/^    dict *blocking_keys;        \/* Keys with clients waiting for data (BLPOP) *\/$/;"	m	struct:redisDb	access:public
blpopCommand	server.h	/^void blpopCommand(client *c);$/;"	p	signature:(client *c)
blpopCommand	t_list.c	/^void blpopCommand(client *c) {$/;"	f	signature:(client *c)
bp	scripting.c	/^    int bp[LDB_BREAKPOINTS_MAX]; \/* An array of breakpoints line numbers. *\/$/;"	m	struct:ldbState	file:	access:public
bpcount	scripting.c	/^    int bpcount; \/* Number of valid entries inside bp. *\/$/;"	m	struct:ldbState	file:	access:public
bpop	server.h	/^    blockingState bpop;     \/* blocking state *\/$/;"	m	struct:client	access:public
bpop_blocked_clients	server.h	/^    unsigned int bpop_blocked_clients; \/* Number of clients blocked by lists *\/$/;"	m	struct:redisServer	access:public
brpopCommand	server.h	/^void brpopCommand(client *c);$/;"	p	signature:(client *c)
brpopCommand	t_list.c	/^void brpopCommand(client *c) {$/;"	f	signature:(client *c)
brpoplpushCommand	server.h	/^void brpoplpushCommand(client *c);$/;"	p	signature:(client *c)
brpoplpushCommand	t_list.c	/^void brpoplpushCommand(client *c) {$/;"	f	signature:(client *c)
btype	server.h	/^    int btype;              \/* Type of blocking op if CLIENT_BLOCKED. *\/$/;"	m	struct:client	access:public
buckets	geo.h	/^    size_t buckets;$/;"	m	struct:geoArray	access:public
buf	aof.c	/^    char buf[AOF_RW_BUF_BLOCK_SIZE];$/;"	m	struct:aofrwblock	file:	access:public
buf	rio.h	/^            sds buf;$/;"	m	struct:_rio::__anon24::__anon27	access:public
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr16	access:public
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr32	access:public
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr5	access:public
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr64	access:public
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr8	access:public
buf	server.h	/^    char buf[PROTO_REPLY_CHUNK_BYTES];$/;"	m	struct:client	access:public
buffer	rio.h	/^        } buffer;$/;"	m	union:_rio::__anon24	typeref:struct:_rio::__anon24::__anon25	access:public
buffer	sha1.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon15	access:public
buffered	rio.h	/^            off_t buffered; \/* Bytes written since last fsync. *\/$/;"	m	struct:_rio::__anon24::__anon26	access:public
bufpos	server.h	/^    int bufpos;$/;"	m	struct:client	access:public
bugReportStart	debug.c	/^void bugReportStart(void) {$/;"	f	signature:(void)
bugReportStart	server.h	/^void bugReportStart(void);$/;"	p	signature:(void)
bug_report_start	server.h	/^    int bug_report_start; \/* True if bug report header was already logged. *\/$/;"	m	struct:redisServer	access:public
bulk_data	cluster.h	/^    unsigned char bulk_data[8];$/;"	m	struct:__anon3	access:public
bulkhdr	server.h	/^    *bulkhdr[OBJ_SHARED_BULKHDR_LEN];  \/* "$<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct	access:public
bulklen	server.h	/^    long bulklen;           \/* Length of bulk argument in multi bulk request. *\/$/;"	m	struct:client	access:public
busykeyerr	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
bytesToHuman	redis-cli.c	/^void bytesToHuman(char *s, long long n) {$/;"	f	signature:(char *s, long long n)
bytesToHuman	server.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f	signature:(char *s, unsigned long long n)
c	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
c	server.h	/^    client *c;$/;"	m	struct:__anon29	access:public
cached_master	server.h	/^    client *cached_master; \/* Cached master to be reused for PSYNC. *\/$/;"	m	struct:redisServer	access:public
call	server.c	/^void call(client *c, int flags) {$/;"	f	signature:(client *c, int flags)
call	server.h	/^void call(client *c, int flags);$/;"	p	signature:(client *c, int flags)
call_cluster_cmd	redis-trib.rb	/^    def call_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
calloc	server.h	/^void *calloc(size_t count, size_t size) __attribute__ ((deprecated));$/;"	p	signature:(size_t count, size_t size)
calloc	zmalloc.c	60;"	d	file:
calloc	zmalloc.c	65;"	d	file:
calls	server.h	/^    long long microseconds, calls;$/;"	m	struct:redisCommand	access:public
cancelReplicationHandshake	replication.c	/^int cancelReplicationHandshake(void) {$/;"	f	signature:(void)
cancelReplicationHandshake	replication.c	/^int cancelReplicationHandshake(void);$/;"	p	file:	signature:(void)
cant_failover_reason	cluster.h	/^    int cant_failover_reason;   \/* Why a slave is currently not able to$/;"	m	struct:clusterState	access:public
card	hyperloglog.c	/^    uint8_t card[8];    \/* Cached cardinality, little endian. *\/$/;"	m	struct:hllhdr	file:	access:public
catAppendOnlyExpireAtCommand	aof.c	/^sds catAppendOnlyExpireAtCommand(sds buf, struct redisCommand *cmd, robj *key, robj *seconds) {$/;"	f	signature:(sds buf, struct redisCommand *cmd, robj *key, robj *seconds)
catAppendOnlyGenericCommand	aof.c	/^sds catAppendOnlyGenericCommand(sds dst, int argc, robj **argv) {$/;"	f	signature:(sds dst, int argc, robj **argv)
catClientInfoString	networking.c	/^sds catClientInfoString(sds s, client *client) {$/;"	f	signature:(sds s, client *client)
catClientInfoString	server.h	/^sds catClientInfoString(sds s, client *client);$/;"	p	signature:(sds s, client *client)
cbuf	scripting.c	/^    sds cbuf;   \/* Debugger client command buffer. *\/$/;"	m	struct:ldbState	file:	access:public
cc	sentinel.c	/^    redisAsyncContext *cc; \/* Hiredis context for commands. *\/$/;"	m	struct:instanceLink	file:	access:public
cc_conn_time	sentinel.c	/^    mstime_t cc_conn_time; \/* cc connection time. *\/$/;"	m	struct:instanceLink	file:	access:public
cfd	server.h	/^    int cfd[CONFIG_BINDADDR_MAX];\/* Cluster bus listening socket *\/$/;"	m	struct:redisServer	access:public
cfd_count	server.h	/^    int cfd_count;              \/* Used slots in cfd[] *\/$/;"	m	struct:redisServer	access:public
changes	server.h	/^    int changes;$/;"	m	struct:saveparam	access:public
channel_len	cluster.h	/^    uint32_t channel_len;$/;"	m	struct:__anon3	access:public
character	redis-cli.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:	access:public
charset	sparkline.c	/^static char charset[] = "_-`";$/;"	v	file:
charset_fill	sparkline.c	/^static char charset_fill[] = "_o#";$/;"	v	file:
charset_len	sparkline.c	/^static int charset_len = sizeof(charset)-1;$/;"	v	file:
checkClientOutputBufferLimits	networking.c	/^int checkClientOutputBufferLimits(client *c) {$/;"	f	signature:(client *c)
checkConsistency	intset.c	/^static void checkConsistency(intset *is) {$/;"	f	file:	signature:(intset *is)
checkForSentinelMode	server.c	/^int checkForSentinelMode(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
checkSignedBitfieldOverflow	bitops.c	/^int checkSignedBitfieldOverflow(int64_t value, int64_t incr, uint64_t bits, int owtype, int64_t *limit) {$/;"	f	signature:(int64_t value, int64_t incr, uint64_t bits, int owtype, int64_t *limit)
checkStringLength	t_string.c	/^static int checkStringLength(client *c, long long size) {$/;"	f	file:	signature:(client *c, long long size)
checkTcpBacklogSettings	server.c	/^void checkTcpBacklogSettings(void) {$/;"	f	signature:(void)
checkType	object.c	/^int checkType(client *c, robj *o, int type) {$/;"	f	signature:(client *c, robj *o, int type)
checkType	server.h	/^int checkType(client *c, robj *o, int type);$/;"	p	signature:(client *c, robj *o, int type)
checkUnsignedBitfieldOverflow	bitops.c	/^int checkUnsignedBitfieldOverflow(uint64_t value, int64_t incr, uint64_t bits, int owtype, uint64_t *limit) {$/;"	f	signature:(uint64_t value, int64_t incr, uint64_t bits, int owtype, uint64_t *limit)
check_arity	redis-trib.rb	/^    def check_arity(req_args, num_args)$/;"	f	class:RedisTrib
check_cluster	redis-trib.rb	/^    def check_cluster(opt={})$/;"	f	class:RedisTrib
check_cluster_cmd	redis-trib.rb	/^    def check_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
check_config_consistency	redis-trib.rb	/^    def check_config_consistency$/;"	f	class:RedisTrib
check_create_parameters	redis-trib.rb	/^    def check_create_parameters$/;"	f	class:RedisTrib.alloc_slots
check_open_slots	redis-trib.rb	/^    def check_open_slots$/;"	f	class:RedisTrib
check_slots_coverage	redis-trib.rb	/^    def check_slots_coverage$/;"	f	class:RedisTrib
children	scripting.c	/^    list *children; \/* All forked debugging sessions pids. *\/$/;"	m	struct:ldbState	file:	access:public
chunked	slots_async.c	/^    int chunked;$/;"	m	struct:__anon12	file:	access:public
chunked_vals	slots_async.c	/^    list *chunked_vals;$/;"	m	struct:__anon13	file:	access:public
cksum	rio.h	/^    uint64_t cksum;$/;"	m	struct:_rio	access:public
clearNodeFailureIfNeeded	cluster.c	/^void clearNodeFailureIfNeeded(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
cliAuth	redis-cli.c	/^static int cliAuth(void) {$/;"	f	file:	signature:(void)
cliConnect	redis-cli.c	/^static int cliConnect(int force) {$/;"	f	file:	signature:(int force)
cliConnect	redis-cli.c	/^static int cliConnect(int force);$/;"	p	file:	signature:(int force)
cliFormatReplyCSV	redis-cli.c	/^static sds cliFormatReplyCSV(redisReply *r) {$/;"	f	file:	signature:(redisReply *r)
cliFormatReplyRaw	redis-cli.c	/^static sds cliFormatReplyRaw(redisReply *r) {$/;"	f	file:	signature:(redisReply *r)
cliFormatReplyTTY	redis-cli.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	file:	signature:(redisReply *r, char *prefix)
cliInitHelp	redis-cli.c	/^static void cliInitHelp(void) {$/;"	f	file:	signature:(void)
cliIntegrateHelp	redis-cli.c	/^static void cliIntegrateHelp(void) {$/;"	f	file:	signature:(void)
cliLoadPreferences	redis-cli.c	/^void cliLoadPreferences(void) {$/;"	f	signature:(void)
cliOutputCommandHelp	redis-cli.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	file:	signature:(struct commandHelp *help, int group)
cliOutputGenericHelp	redis-cli.c	/^static void cliOutputGenericHelp(void) {$/;"	f	file:	signature:(void)
cliOutputHelp	redis-cli.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	file:	signature:(int argc, char **argv)
cliPrintContextError	redis-cli.c	/^static void cliPrintContextError(void) {$/;"	f	file:	signature:(void)
cliReadReply	redis-cli.c	/^static int cliReadReply(int output_raw_strings) {$/;"	f	file:	signature:(int output_raw_strings)
cliRefreshPrompt	redis-cli.c	/^static void cliRefreshPrompt(void) {$/;"	f	file:	signature:(void)
cliSelect	redis-cli.c	/^static int cliSelect(void) {$/;"	f	file:	signature:(void)
cliSendCommand	redis-cli.c	/^static int cliSendCommand(int argc, char **argv, int repeat) {$/;"	f	file:	signature:(int argc, char **argv, int repeat)
cliSetPreferences	redis-cli.c	/^void cliSetPreferences(char **argv, int argc, int interactive) {$/;"	f	signature:(char **argv, int argc, int interactive)
cliSplitArgs	redis-cli.c	/^static sds *cliSplitArgs(char *line, int *argc) {$/;"	f	file:	signature:(char *line, int *argc)
cliVersion	redis-cli.c	/^static sds cliVersion(void) {$/;"	f	file:	signature:(void)
client	redis-benchmark.c	/^} *client;$/;"	t	typeref:struct:_client	file:
client	server.h	/^    client *client;$/;"	m	struct:pubsubPattern	access:public
client	server.h	/^typedef struct client {$/;"	s
client	server.h	/^} client;$/;"	t	typeref:struct:client
client::argc	server.h	/^    int argc;               \/* Num of arguments of current command. *\/$/;"	m	struct:client	access:public
client::argv	server.h	/^    robj **argv;            \/* Arguments of current command. *\/$/;"	m	struct:client	access:public
client::authenticated	server.h	/^    int authenticated;      \/* When requirepass is non-NULL. *\/$/;"	m	struct:client	access:public
client::bpop	server.h	/^    blockingState bpop;     \/* blocking state *\/$/;"	m	struct:client	access:public
client::btype	server.h	/^    int btype;              \/* Type of blocking op if CLIENT_BLOCKED. *\/$/;"	m	struct:client	access:public
client::buf	server.h	/^    char buf[PROTO_REPLY_CHUNK_BYTES];$/;"	m	struct:client	access:public
client::bufpos	server.h	/^    int bufpos;$/;"	m	struct:client	access:public
client::bulklen	server.h	/^    long bulklen;           \/* Length of bulk argument in multi bulk request. *\/$/;"	m	struct:client	access:public
client::cmd	server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:client::redisCommand	access:public
client::ctime	server.h	/^    time_t ctime;           \/* Client creation time. *\/$/;"	m	struct:client	access:public
client::db	server.h	/^    redisDb *db;            \/* Pointer to currently SELECTed DB. *\/$/;"	m	struct:client	access:public
client::dictid	server.h	/^    int dictid;             \/* ID of the currently SELECTed DB. *\/$/;"	m	struct:client	access:public
client::fd	server.h	/^    int fd;                 \/* Client socket. *\/$/;"	m	struct:client	access:public
client::flags	server.h	/^    int flags;              \/* Client flags: CLIENT_* macros. *\/$/;"	m	struct:client	access:public
client::id	server.h	/^    uint64_t id;            \/* Client incremental unique ID. *\/$/;"	m	struct:client	access:public
client::lastcmd	server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:client::	access:public
client::lastinteraction	server.h	/^    time_t lastinteraction; \/* Time of the last interaction, used for timeout *\/$/;"	m	struct:client	access:public
client::mstate	server.h	/^    multiState mstate;      \/* MULTI\/EXEC state *\/$/;"	m	struct:client	access:public
client::multibulklen	server.h	/^    int multibulklen;       \/* Number of multi bulk arguments left to read. *\/$/;"	m	struct:client	access:public
client::name	server.h	/^    robj *name;             \/* As set by CLIENT SETNAME. *\/$/;"	m	struct:client	access:public
client::obuf_soft_limit_reached_time	server.h	/^    time_t obuf_soft_limit_reached_time;$/;"	m	struct:client	access:public
client::peerid	server.h	/^    sds peerid;             \/* Cached peer ID. *\/$/;"	m	struct:client	access:public
client::psync_initial_offset	server.h	/^    long long psync_initial_offset; \/* FULLRESYNC reply offset other slaves$/;"	m	struct:client	access:public
client::pubsub_channels	server.h	/^    dict *pubsub_channels;  \/* channels a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client	access:public
client::pubsub_patterns	server.h	/^    list *pubsub_patterns;  \/* patterns a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client	access:public
client::querybuf	server.h	/^    sds querybuf;           \/* Buffer we use to accumulate client queries. *\/$/;"	m	struct:client	access:public
client::querybuf_peak	server.h	/^    size_t querybuf_peak;   \/* Recent (100ms or more) peak of querybuf size. *\/$/;"	m	struct:client	access:public
client::repl_ack_off	server.h	/^    long long repl_ack_off; \/* Replication ack offset, if this is a slave. *\/$/;"	m	struct:client	access:public
client::repl_ack_time	server.h	/^    long long repl_ack_time;\/* Replication ack time, if this is a slave. *\/$/;"	m	struct:client	access:public
client::repl_put_online_on_ack	server.h	/^    int repl_put_online_on_ack; \/* Install slave write handler on ACK. *\/$/;"	m	struct:client	access:public
client::repldbfd	server.h	/^    int repldbfd;           \/* Replication DB file descriptor. *\/$/;"	m	struct:client	access:public
client::repldboff	server.h	/^    off_t repldboff;        \/* Replication DB file offset. *\/$/;"	m	struct:client	access:public
client::repldbsize	server.h	/^    off_t repldbsize;       \/* Replication DB file size. *\/$/;"	m	struct:client	access:public
client::reploff	server.h	/^    long long reploff;      \/* Replication offset if this is our master. *\/$/;"	m	struct:client	access:public
client::replpreamble	server.h	/^    sds replpreamble;       \/* Replication DB preamble. *\/$/;"	m	struct:client	access:public
client::replrunid	server.h	/^    char replrunid[CONFIG_RUN_ID_SIZE+1]; \/* Master run id if is a master. *\/$/;"	m	struct:client	access:public
client::replstate	server.h	/^    int replstate;          \/* Replication state if this is a slave. *\/$/;"	m	struct:client	access:public
client::reply	server.h	/^    list *reply;            \/* List of reply objects to send to the client. *\/$/;"	m	struct:client	access:public
client::reply_bytes	server.h	/^    unsigned long long reply_bytes; \/* Tot bytes of objects in reply list. *\/$/;"	m	struct:client	access:public
client::reqtype	server.h	/^    int reqtype;            \/* Request protocol type: PROTO_REQ_* *\/$/;"	m	struct:client	access:public
client::sentlen	server.h	/^    size_t sentlen;         \/* Amount of bytes already sent in the current$/;"	m	struct:client	access:public
client::slave_capa	server.h	/^    int slave_capa;         \/* Slave capabilities: SLAVE_CAPA_* bitwise OR. *\/$/;"	m	struct:client	access:public
client::slave_ip	server.h	/^    char slave_ip[NET_IP_STR_LEN]; \/* Optionally given by REPLCONF ip-address *\/$/;"	m	struct:client	access:public
client::slave_listening_port	server.h	/^    int slave_listening_port; \/* As configured with: REPLCONF listening-port *\/$/;"	m	struct:client	access:public
client::slotsmgrt_fenceq	server.h	/^    list *slotsmgrt_fenceq;$/;"	m	struct:client	access:public
client::slotsmgrt_flags	server.h	/^    long slotsmgrt_flags;$/;"	m	struct:client	access:public
client::watched_keys	server.h	/^    list *watched_keys;     \/* Keys WATCHED for MULTI\/EXEC CAS *\/$/;"	m	struct:client	access:public
client::woff	server.h	/^    long long woff;         \/* Last write global replication offset. *\/$/;"	m	struct:client	access:public
clientBufferLimitsConfig	server.h	/^typedef struct clientBufferLimitsConfig {$/;"	s
clientBufferLimitsConfig	server.h	/^} clientBufferLimitsConfig;$/;"	t	typeref:struct:clientBufferLimitsConfig
clientBufferLimitsConfig::hard_limit_bytes	server.h	/^    unsigned long long hard_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig	access:public
clientBufferLimitsConfig::soft_limit_bytes	server.h	/^    unsigned long long soft_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig	access:public
clientBufferLimitsConfig::soft_limit_seconds	server.h	/^    time_t soft_limit_seconds;$/;"	m	struct:clientBufferLimitsConfig	access:public
clientBufferLimitsDefaults	config.c	/^clientBufferLimitsConfig clientBufferLimitsDefaults[CLIENT_TYPE_OBUF_COUNT] = {$/;"	v
clientCommand	networking.c	/^void clientCommand(client *c) {$/;"	f	signature:(client *c)
clientCommand	server.h	/^void clientCommand(client *c);$/;"	p	signature:(client *c)
clientData	ae.h	/^    void *clientData;$/;"	m	struct:aeFileEvent	access:public
clientData	ae.h	/^    void *clientData;$/;"	m	struct:aeTimeEvent	access:public
clientDone	redis-benchmark.c	/^static void clientDone(client c) {$/;"	f	file:	signature:(client c)
clientHasPendingReplies	networking.c	/^int clientHasPendingReplies(client *c) {$/;"	f	signature:(client *c)
clientHasPendingReplies	server.h	/^int clientHasPendingReplies(client *c);$/;"	p	signature:(client *c)
clientSubscriptionsCount	pubsub.c	/^int clientSubscriptionsCount(client *c) {$/;"	f	signature:(client *c)
client_max_querybuf_len	server.h	/^    size_t client_max_querybuf_len; \/* Limit for client query buffer length *\/$/;"	m	struct:redisServer	access:public
client_obuf_limits	server.h	/^    clientBufferLimitsConfig client_obuf_limits[CLIENT_TYPE_OBUF_COUNT];$/;"	m	struct:redisServer	access:public
client_reconfig_script	sentinel.c	/^    char *client_reconfig_script;$/;"	m	struct:sentinelRedisInstance	file:	access:public
clients	redis-benchmark.c	/^    list *clients;$/;"	m	struct:config	file:	access:public
clients	server.h	/^    list *clients;              \/* List of active clients *\/$/;"	m	struct:redisServer	access:public
clientsArePaused	networking.c	/^int clientsArePaused(void) {$/;"	f	signature:(void)
clientsArePaused	server.h	/^int clientsArePaused(void);$/;"	p	signature:(void)
clientsCron	server.c	/^void clientsCron(void) {$/;"	f	signature:(void)
clientsCronHandleTimeout	server.c	/^int clientsCronHandleTimeout(client *c, mstime_t now_ms) {$/;"	f	signature:(client *c, mstime_t now_ms)
clientsCronResizeQueryBuffer	server.c	/^int clientsCronResizeQueryBuffer(client *c) {$/;"	f	signature:(client *c)
clients_pause_end_time	server.h	/^    mstime_t clients_pause_end_time; \/* Time when we undo clients_paused *\/$/;"	m	struct:redisServer	access:public
clients_paused	server.h	/^    int clients_paused;         \/* True if clients are currently paused *\/$/;"	m	struct:redisServer	access:public
clients_pending_write	server.h	/^    list *clients_pending_write; \/* There is to write or install handler. *\/$/;"	m	struct:redisServer	access:public
clients_to_close	server.h	/^    list *clients_to_close;     \/* Clients to close asynchronously *\/$/;"	m	struct:redisServer	access:public
clients_waiting_acks	server.h	/^    list *clients_waiting_acks;         \/* Clients waiting in WAIT command. *\/$/;"	m	struct:redisServer	access:public
closeDirectLogFiledes	debug.c	/^void closeDirectLogFiledes(int fd) {$/;"	f	signature:(int fd)
closeListeningSockets	server.c	/^void closeListeningSockets(int unlink_unix_socket) {$/;"	f	signature:(int unlink_unix_socket)
closeListeningSockets	server.h	/^void closeListeningSockets(int unlink_unix_socket);$/;"	p	signature:(int unlink_unix_socket)
closeTimedoutClients	server.h	/^void closeTimedoutClients(void);$/;"	p	signature:(void)
cluster	server.h	/^    struct clusterState *cluster;  \/* State of the cluster *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::clusterState	access:public
clusterAcceptHandler	cluster.c	/^void clusterAcceptHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
clusterAcceptHandler	cluster.c	/^void clusterAcceptHandler(aeEventLoop *el, int fd, void *privdata, int mask);$/;"	p	file:	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
clusterAddNode	cluster.c	/^int clusterAddNode(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
clusterAddNode	cluster.c	/^int clusterAddNode(clusterNode *node);$/;"	p	file:	signature:(clusterNode *node)
clusterAddSlot	cluster.c	/^int clusterAddSlot(clusterNode *n, int slot) {$/;"	f	signature:(clusterNode *n, int slot)
clusterAddSlot	cluster.c	/^int clusterAddSlot(clusterNode *n, int slot);$/;"	p	file:	signature:(clusterNode *n, int slot)
clusterBeforeSleep	cluster.c	/^void clusterBeforeSleep(void) {$/;"	f	signature:(void)
clusterBeforeSleep	server.h	/^void clusterBeforeSleep(void);$/;"	p	signature:(void)
clusterBlacklistAddNode	cluster.c	/^void clusterBlacklistAddNode(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
clusterBlacklistCleanup	cluster.c	/^void clusterBlacklistCleanup(void) {$/;"	f	signature:(void)
clusterBlacklistExists	cluster.c	/^int clusterBlacklistExists(char *nodeid) {$/;"	f	signature:(char *nodeid)
clusterBroadcastMessage	cluster.c	/^void clusterBroadcastMessage(void *buf, size_t len) {$/;"	f	signature:(void *buf, size_t len)
clusterBroadcastPong	cluster.c	/^void clusterBroadcastPong(int target) {$/;"	f	signature:(int target)
clusterBuildMessageHdr	cluster.c	/^void clusterBuildMessageHdr(clusterMsg *hdr, int type) {$/;"	f	signature:(clusterMsg *hdr, int type)
clusterBumpConfigEpochWithoutConsensus	cluster.c	/^int clusterBumpConfigEpochWithoutConsensus(void) {$/;"	f	signature:(void)
clusterBumpConfigEpochWithoutConsensus	cluster.c	/^int clusterBumpConfigEpochWithoutConsensus(void);$/;"	p	file:	signature:(void)
clusterCloseAllSlots	cluster.c	/^void clusterCloseAllSlots(void) {$/;"	f	signature:(void)
clusterCloseAllSlots	cluster.c	/^void clusterCloseAllSlots(void);$/;"	p	file:	signature:(void)
clusterCommand	cluster.c	/^void clusterCommand(client *c) {$/;"	f	signature:(client *c)
clusterCommand	server.h	/^void clusterCommand(client *c);$/;"	p	signature:(client *c)
clusterCountNonFailingSlaves	cluster.c	/^int clusterCountNonFailingSlaves(clusterNode *n) {$/;"	f	signature:(clusterNode *n)
clusterCron	cluster.c	/^void clusterCron(void) {$/;"	f	signature:(void)
clusterCron	server.h	/^void clusterCron(void);$/;"	p	signature:(void)
clusterDelNode	cluster.c	/^void clusterDelNode(clusterNode *delnode) {$/;"	f	signature:(clusterNode *delnode)
clusterDelNode	cluster.c	/^void clusterDelNode(clusterNode *delnode);$/;"	p	file:	signature:(clusterNode *delnode)
clusterDelNodeSlots	cluster.c	/^int clusterDelNodeSlots(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
clusterDelNodeSlots	cluster.c	/^int clusterDelNodeSlots(clusterNode *node);$/;"	p	file:	signature:(clusterNode *node)
clusterDelSlot	cluster.c	/^int clusterDelSlot(int slot) {$/;"	f	signature:(int slot)
clusterDelSlot	cluster.c	/^int clusterDelSlot(int slot);$/;"	p	file:	signature:(int slot)
clusterDoBeforeSleep	cluster.c	/^void clusterDoBeforeSleep(int flags) {$/;"	f	signature:(int flags)
clusterDoBeforeSleep	cluster.c	/^void clusterDoBeforeSleep(int flags);$/;"	p	file:	signature:(int flags)
clusterFailoverReplaceYourMaster	cluster.c	/^void clusterFailoverReplaceYourMaster(void) {$/;"	f	signature:(void)
clusterGenNodeDescription	cluster.c	/^sds clusterGenNodeDescription(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
clusterGenNodesDescription	cluster.c	/^sds clusterGenNodesDescription(int filter) {$/;"	f	signature:(int filter)
clusterGenNodesDescription	cluster.c	/^sds clusterGenNodesDescription(int filter);$/;"	p	file:	signature:(int filter)
clusterGetMaxEpoch	cluster.c	/^uint64_t clusterGetMaxEpoch(void) {$/;"	f	signature:(void)
clusterGetMaxEpoch	cluster.c	/^uint64_t clusterGetMaxEpoch(void);$/;"	p	file:	signature:(void)
clusterGetSlaveRank	cluster.c	/^int clusterGetSlaveRank(void) {$/;"	f	signature:(void)
clusterHandleConfigEpochCollision	cluster.c	/^void clusterHandleConfigEpochCollision(clusterNode *sender) {$/;"	f	signature:(clusterNode *sender)
clusterHandleManualFailover	cluster.c	/^void clusterHandleManualFailover(void) {$/;"	f	signature:(void)
clusterHandleSlaveFailover	cluster.c	/^void clusterHandleSlaveFailover(void) {$/;"	f	signature:(void)
clusterHandleSlaveFailover	cluster.c	/^void clusterHandleSlaveFailover(void);$/;"	p	file:	signature:(void)
clusterHandleSlaveMigration	cluster.c	/^void clusterHandleSlaveMigration(int max_slaves) {$/;"	f	signature:(int max_slaves)
clusterHandleSlaveMigration	cluster.c	/^void clusterHandleSlaveMigration(int max_slaves);$/;"	p	file:	signature:(int max_slaves)
clusterHandshakeInProgress	cluster.c	/^int clusterHandshakeInProgress(char *ip, int port) {$/;"	f	signature:(char *ip, int port)
clusterInit	cluster.c	/^void clusterInit(void) {$/;"	f	signature:(void)
clusterInit	server.h	/^void clusterInit(void);$/;"	p	signature:(void)
clusterLink	cluster.h	/^typedef struct clusterLink {$/;"	s
clusterLink	cluster.h	/^} clusterLink;$/;"	t	typeref:struct:clusterLink
clusterLink::ctime	cluster.h	/^    mstime_t ctime;             \/* Link creation time *\/$/;"	m	struct:clusterLink	access:public
clusterLink::fd	cluster.h	/^    int fd;                     \/* TCP socket file descriptor *\/$/;"	m	struct:clusterLink	access:public
clusterLink::node	cluster.h	/^    struct clusterNode *node;   \/* Node related to this link if any, or NULL *\/$/;"	m	struct:clusterLink	typeref:struct:clusterLink::clusterNode	access:public
clusterLink::rcvbuf	cluster.h	/^    sds rcvbuf;                 \/* Packet reception buffer *\/$/;"	m	struct:clusterLink	access:public
clusterLink::sndbuf	cluster.h	/^    sds sndbuf;                 \/* Packet send buffer *\/$/;"	m	struct:clusterLink	access:public
clusterLoadConfig	cluster.c	/^int clusterLoadConfig(char *filename) {$/;"	f	signature:(char *filename)
clusterLockConfig	cluster.c	/^int clusterLockConfig(char *filename) {$/;"	f	signature:(char *filename)
clusterLogCantFailover	cluster.c	/^void clusterLogCantFailover(int reason) {$/;"	f	signature:(int reason)
clusterLookupNode	cluster.c	/^clusterNode *clusterLookupNode(char *name) {$/;"	f	signature:(char *name)
clusterLookupNode	cluster.c	/^clusterNode *clusterLookupNode(char *name);$/;"	p	file:	signature:(char *name)
clusterMastersHaveSlaves	cluster.c	/^int clusterMastersHaveSlaves(void) {$/;"	f	signature:(void)
clusterMsg	cluster.h	/^} clusterMsg;$/;"	t	typeref:struct:__anon9
clusterMsgData	cluster.h	/^union clusterMsgData {$/;"	u
clusterMsgData::__anon5::gossip	cluster.h	/^        clusterMsgDataGossip gossip[1];$/;"	m	struct:clusterMsgData::__anon5	access:public
clusterMsgData::__anon6::about	cluster.h	/^        clusterMsgDataFail about;$/;"	m	struct:clusterMsgData::__anon6	access:public
clusterMsgData::__anon7::msg	cluster.h	/^        clusterMsgDataPublish msg;$/;"	m	struct:clusterMsgData::__anon7	access:public
clusterMsgData::__anon8::nodecfg	cluster.h	/^        clusterMsgDataUpdate nodecfg;$/;"	m	struct:clusterMsgData::__anon8	access:public
clusterMsgData::fail	cluster.h	/^    } fail;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon6	access:public
clusterMsgData::ping	cluster.h	/^    } ping;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon5	access:public
clusterMsgData::publish	cluster.h	/^    } publish;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon7	access:public
clusterMsgData::update	cluster.h	/^    } update;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon8	access:public
clusterMsgDataFail	cluster.h	/^} clusterMsgDataFail;$/;"	t	typeref:struct:__anon2
clusterMsgDataGossip	cluster.h	/^} clusterMsgDataGossip;$/;"	t	typeref:struct:__anon1
clusterMsgDataPublish	cluster.h	/^} clusterMsgDataPublish;$/;"	t	typeref:struct:__anon3
clusterMsgDataUpdate	cluster.h	/^} clusterMsgDataUpdate;$/;"	t	typeref:struct:__anon4
clusterNode	cluster.h	/^typedef struct clusterNode {$/;"	s
clusterNode	cluster.h	/^} clusterNode;$/;"	t	typeref:struct:clusterNode
clusterNode::configEpoch	cluster.h	/^    uint64_t configEpoch; \/* Last configEpoch observed for this node *\/$/;"	m	struct:clusterNode	access:public
clusterNode::ctime	cluster.h	/^    mstime_t ctime; \/* Node object creation time. *\/$/;"	m	struct:clusterNode	access:public
clusterNode::fail_reports	cluster.h	/^    list *fail_reports;         \/* List of nodes signaling this as failing *\/$/;"	m	struct:clusterNode	access:public
clusterNode::fail_time	cluster.h	/^    mstime_t fail_time;      \/* Unix time when FAIL flag was set *\/$/;"	m	struct:clusterNode	access:public
clusterNode::flags	cluster.h	/^    int flags;      \/* CLUSTER_NODE_... *\/$/;"	m	struct:clusterNode	access:public
clusterNode::ip	cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* Latest known IP address of this node *\/$/;"	m	struct:clusterNode	access:public
clusterNode::link	cluster.h	/^    clusterLink *link;          \/* TCP\/IP link with this node *\/$/;"	m	struct:clusterNode	access:public
clusterNode::name	cluster.h	/^    char name[CLUSTER_NAMELEN]; \/* Node name, hex string, sha1-size *\/$/;"	m	struct:clusterNode	access:public
clusterNode::numslaves	cluster.h	/^    int numslaves;  \/* Number of slave nodes, if this is a master *\/$/;"	m	struct:clusterNode	access:public
clusterNode::numslots	cluster.h	/^    int numslots;   \/* Number of slots handled by this node *\/$/;"	m	struct:clusterNode	access:public
clusterNode::orphaned_time	cluster.h	/^    mstime_t orphaned_time;     \/* Starting time of orphaned master condition *\/$/;"	m	struct:clusterNode	access:public
clusterNode::ping_sent	cluster.h	/^    mstime_t ping_sent;      \/* Unix time we sent latest ping *\/$/;"	m	struct:clusterNode	access:public
clusterNode::pong_received	cluster.h	/^    mstime_t pong_received;  \/* Unix time we received the pong *\/$/;"	m	struct:clusterNode	access:public
clusterNode::port	cluster.h	/^    int port;                   \/* Latest known port of this node *\/$/;"	m	struct:clusterNode	access:public
clusterNode::repl_offset	cluster.h	/^    long long repl_offset;      \/* Last known repl offset for this node. *\/$/;"	m	struct:clusterNode	access:public
clusterNode::repl_offset_time	cluster.h	/^    mstime_t repl_offset_time;  \/* Unix time we received offset for this node *\/$/;"	m	struct:clusterNode	access:public
clusterNode::slaveof	cluster.h	/^    struct clusterNode *slaveof; \/* pointer to the master node. Note that it$/;"	m	struct:clusterNode	typeref:struct:clusterNode::clusterNode	access:public
clusterNode::slaves	cluster.h	/^    struct clusterNode **slaves; \/* pointers to slave nodes *\/$/;"	m	struct:clusterNode	typeref:struct:clusterNode::clusterNode	access:public
clusterNode::slots	cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* slots handled by this node *\/$/;"	m	struct:clusterNode	access:public
clusterNode::voted_time	cluster.h	/^    mstime_t voted_time;     \/* Last time we voted for a slave of this master *\/$/;"	m	struct:clusterNode	access:public
clusterNodeAddFailureReport	cluster.c	/^int clusterNodeAddFailureReport(clusterNode *failing, clusterNode *sender) {$/;"	f	signature:(clusterNode *failing, clusterNode *sender)
clusterNodeAddSlave	cluster.c	/^int clusterNodeAddSlave(clusterNode *master, clusterNode *slave) {$/;"	f	signature:(clusterNode *master, clusterNode *slave)
clusterNodeAddSlave	cluster.c	/^int clusterNodeAddSlave(clusterNode *master, clusterNode *slave);$/;"	p	file:	signature:(clusterNode *master, clusterNode *slave)
clusterNodeCleanupFailureReports	cluster.c	/^void clusterNodeCleanupFailureReports(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
clusterNodeClearSlotBit	cluster.c	/^int clusterNodeClearSlotBit(clusterNode *n, int slot) {$/;"	f	signature:(clusterNode *n, int slot)
clusterNodeDelFailureReport	cluster.c	/^int clusterNodeDelFailureReport(clusterNode *node, clusterNode *sender) {$/;"	f	signature:(clusterNode *node, clusterNode *sender)
clusterNodeFailReport	cluster.h	/^typedef struct clusterNodeFailReport {$/;"	s
clusterNodeFailReport	cluster.h	/^} clusterNodeFailReport;$/;"	t	typeref:struct:clusterNodeFailReport
clusterNodeFailReport::node	cluster.h	/^    struct clusterNode *node;  \/* Node reporting the failure condition. *\/$/;"	m	struct:clusterNodeFailReport	typeref:struct:clusterNodeFailReport::clusterNode	access:public
clusterNodeFailReport::time	cluster.h	/^    mstime_t time;             \/* Time of the last report from this node. *\/$/;"	m	struct:clusterNodeFailReport	access:public
clusterNodeFailureReportsCount	cluster.c	/^int clusterNodeFailureReportsCount(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
clusterNodeGetSlotBit	cluster.c	/^int clusterNodeGetSlotBit(clusterNode *n, int slot) {$/;"	f	signature:(clusterNode *n, int slot)
clusterNodeGetSlotBit	cluster.c	/^int clusterNodeGetSlotBit(clusterNode *n, int slot);$/;"	p	file:	signature:(clusterNode *n, int slot)
clusterNodeRemoveSlave	cluster.c	/^int clusterNodeRemoveSlave(clusterNode *master, clusterNode *slave) {$/;"	f	signature:(clusterNode *master, clusterNode *slave)
clusterNodeSetSlotBit	cluster.c	/^int clusterNodeSetSlotBit(clusterNode *n, int slot) {$/;"	f	signature:(clusterNode *n, int slot)
clusterNodeSetSlotBit	cluster.c	/^int clusterNodeSetSlotBit(clusterNode *n, int slot);$/;"	p	file:	signature:(clusterNode *n, int slot)
clusterNodesBlackListDictType	server.c	/^dictType clusterNodesBlackListDictType = {$/;"	v
clusterNodesDictType	server.c	/^dictType clusterNodesDictType = {$/;"	v
clusterProcessGossipSection	cluster.c	/^void clusterProcessGossipSection(clusterMsg *hdr, clusterLink *link) {$/;"	f	signature:(clusterMsg *hdr, clusterLink *link)
clusterProcessPacket	cluster.c	/^int clusterProcessPacket(clusterLink *link) {$/;"	f	signature:(clusterLink *link)
clusterPropagatePublish	cluster.c	/^void clusterPropagatePublish(robj *channel, robj *message) {$/;"	f	signature:(robj *channel, robj *message)
clusterPropagatePublish	server.h	/^void clusterPropagatePublish(robj *channel, robj *message);$/;"	p	signature:(robj *channel, robj *message)
clusterReadHandler	cluster.c	/^void clusterReadHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
clusterReadHandler	cluster.c	/^void clusterReadHandler(aeEventLoop *el, int fd, void *privdata, int mask);$/;"	p	file:	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
clusterRedirectBlockedClientIfNeeded	cluster.c	/^int clusterRedirectBlockedClientIfNeeded(client *c) {$/;"	f	signature:(client *c)
clusterRedirectBlockedClientIfNeeded	cluster.h	/^int clusterRedirectBlockedClientIfNeeded(client *c);$/;"	p	signature:(client *c)
clusterRedirectClient	cluster.c	/^void clusterRedirectClient(client *c, clusterNode *n, int hashslot, int error_code) {$/;"	f	signature:(client *c, clusterNode *n, int hashslot, int error_code)
clusterRedirectClient	cluster.h	/^void clusterRedirectClient(client *c, clusterNode *n, int hashslot, int error_code);$/;"	p	signature:(client *c, clusterNode *n, int hashslot, int error_code)
clusterRenameNode	cluster.c	/^void clusterRenameNode(clusterNode *node, char *newname) {$/;"	f	signature:(clusterNode *node, char *newname)
clusterReplyMultiBulkSlots	cluster.c	/^void clusterReplyMultiBulkSlots(client *c) {$/;"	f	signature:(client *c)
clusterRequestFailoverAuth	cluster.c	/^void clusterRequestFailoverAuth(void) {$/;"	f	signature:(void)
clusterReset	cluster.c	/^void clusterReset(int hard) {$/;"	f	signature:(int hard)
clusterSaveConfig	cluster.c	/^int clusterSaveConfig(int do_fsync) {$/;"	f	signature:(int do_fsync)
clusterSaveConfigOrDie	cluster.c	/^void clusterSaveConfigOrDie(int do_fsync) {$/;"	f	signature:(int do_fsync)
clusterSendFail	cluster.c	/^void clusterSendFail(char *nodename) {$/;"	f	signature:(char *nodename)
clusterSendFail	cluster.c	/^void clusterSendFail(char *nodename);$/;"	p	file:	signature:(char *nodename)
clusterSendFailoverAuth	cluster.c	/^void clusterSendFailoverAuth(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
clusterSendFailoverAuthIfNeeded	cluster.c	/^void clusterSendFailoverAuthIfNeeded(clusterNode *node, clusterMsg *request) {$/;"	f	signature:(clusterNode *node, clusterMsg *request)
clusterSendFailoverAuthIfNeeded	cluster.c	/^void clusterSendFailoverAuthIfNeeded(clusterNode *node, clusterMsg *request);$/;"	p	file:	signature:(clusterNode *node, clusterMsg *request)
clusterSendMFStart	cluster.c	/^void clusterSendMFStart(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
clusterSendMessage	cluster.c	/^void clusterSendMessage(clusterLink *link, unsigned char *msg, size_t msglen) {$/;"	f	signature:(clusterLink *link, unsigned char *msg, size_t msglen)
clusterSendPing	cluster.c	/^void clusterSendPing(clusterLink *link, int type) {$/;"	f	signature:(clusterLink *link, int type)
clusterSendPing	cluster.c	/^void clusterSendPing(clusterLink *link, int type);$/;"	p	file:	signature:(clusterLink *link, int type)
clusterSendPublish	cluster.c	/^void clusterSendPublish(clusterLink *link, robj *channel, robj *message) {$/;"	f	signature:(clusterLink *link, robj *channel, robj *message)
clusterSendUpdate	cluster.c	/^void clusterSendUpdate(clusterLink *link, clusterNode *node) {$/;"	f	signature:(clusterLink *link, clusterNode *node)
clusterSendUpdate	cluster.c	/^void clusterSendUpdate(clusterLink *link, clusterNode *node);$/;"	p	file:	signature:(clusterLink *link, clusterNode *node)
clusterSetMaster	cluster.c	/^void clusterSetMaster(clusterNode *n) {$/;"	f	signature:(clusterNode *n)
clusterSetMaster	cluster.c	/^void clusterSetMaster(clusterNode *n);$/;"	p	file:	signature:(clusterNode *n)
clusterSetNodeAsMaster	cluster.c	/^void clusterSetNodeAsMaster(clusterNode *n) {$/;"	f	signature:(clusterNode *n)
clusterSetNodeAsMaster	cluster.c	/^void clusterSetNodeAsMaster(clusterNode *n);$/;"	p	file:	signature:(clusterNode *n)
clusterStartHandshake	cluster.c	/^int clusterStartHandshake(char *ip, int port) {$/;"	f	signature:(char *ip, int port)
clusterState	cluster.h	/^typedef struct clusterState {$/;"	s
clusterState	cluster.h	/^} clusterState;$/;"	t	typeref:struct:clusterState
clusterState::cant_failover_reason	cluster.h	/^    int cant_failover_reason;   \/* Why a slave is currently not able to$/;"	m	struct:clusterState	access:public
clusterState::currentEpoch	cluster.h	/^    uint64_t currentEpoch;$/;"	m	struct:clusterState	access:public
clusterState::failover_auth_count	cluster.h	/^    int failover_auth_count;    \/* Number of votes received so far. *\/$/;"	m	struct:clusterState	access:public
clusterState::failover_auth_epoch	cluster.h	/^    uint64_t failover_auth_epoch; \/* Epoch of the current election. *\/$/;"	m	struct:clusterState	access:public
clusterState::failover_auth_rank	cluster.h	/^    int failover_auth_rank;     \/* This slave rank for current auth request. *\/$/;"	m	struct:clusterState	access:public
clusterState::failover_auth_sent	cluster.h	/^    int failover_auth_sent;     \/* True if we already asked for votes. *\/$/;"	m	struct:clusterState	access:public
clusterState::failover_auth_time	cluster.h	/^    mstime_t failover_auth_time; \/* Time of previous or next election. *\/$/;"	m	struct:clusterState	access:public
clusterState::importing_slots_from	cluster.h	/^    clusterNode *importing_slots_from[CLUSTER_SLOTS];$/;"	m	struct:clusterState	access:public
clusterState::lastVoteEpoch	cluster.h	/^    uint64_t lastVoteEpoch;     \/* Epoch of the last vote granted. *\/$/;"	m	struct:clusterState	access:public
clusterState::mf_can_start	cluster.h	/^    int mf_can_start;           \/* If non-zero signal that the manual failover$/;"	m	struct:clusterState	access:public
clusterState::mf_end	cluster.h	/^    mstime_t mf_end;            \/* Manual failover time limit (ms unixtime).$/;"	m	struct:clusterState	access:public
clusterState::mf_master_offset	cluster.h	/^    long long mf_master_offset; \/* Master offset the slave needs to start MF$/;"	m	struct:clusterState	access:public
clusterState::mf_slave	cluster.h	/^    clusterNode *mf_slave;      \/* Slave performing the manual failover. *\/$/;"	m	struct:clusterState	access:public
clusterState::migrating_slots_to	cluster.h	/^    clusterNode *migrating_slots_to[CLUSTER_SLOTS];$/;"	m	struct:clusterState	access:public
clusterState::myself	cluster.h	/^    clusterNode *myself;  \/* This node *\/$/;"	m	struct:clusterState	access:public
clusterState::nodes	cluster.h	/^    dict *nodes;          \/* Hash table of name -> clusterNode structures *\/$/;"	m	struct:clusterState	access:public
clusterState::nodes_black_list	cluster.h	/^    dict *nodes_black_list; \/* Nodes we don't re-add for a few seconds. *\/$/;"	m	struct:clusterState	access:public
clusterState::size	cluster.h	/^    int size;             \/* Num of master nodes with at least one slot *\/$/;"	m	struct:clusterState	access:public
clusterState::slots	cluster.h	/^    clusterNode *slots[CLUSTER_SLOTS];$/;"	m	struct:clusterState	access:public
clusterState::slots_to_keys	cluster.h	/^    zskiplist *slots_to_keys;$/;"	m	struct:clusterState	access:public
clusterState::state	cluster.h	/^    int state;            \/* CLUSTER_OK, CLUSTER_FAIL, ... *\/$/;"	m	struct:clusterState	access:public
clusterState::stats_bus_messages_received	cluster.h	/^    long long stats_bus_messages_received; \/* Num of msg rcvd via cluster bus.*\/$/;"	m	struct:clusterState	access:public
clusterState::stats_bus_messages_sent	cluster.h	/^    long long stats_bus_messages_sent;  \/* Num of msg sent via cluster bus. *\/$/;"	m	struct:clusterState	access:public
clusterState::todo_before_sleep	cluster.h	/^    int todo_before_sleep; \/* Things to do in clusterBeforeSleep(). *\/$/;"	m	struct:clusterState	access:public
clusterUpdateSlotsConfigWith	cluster.c	/^void clusterUpdateSlotsConfigWith(clusterNode *sender, uint64_t senderConfigEpoch, unsigned char *slots) {$/;"	f	signature:(clusterNode *sender, uint64_t senderConfigEpoch, unsigned char *slots)
clusterUpdateState	cluster.c	/^void clusterUpdateState(void) {$/;"	f	signature:(void)
clusterUpdateState	cluster.c	/^void clusterUpdateState(void);$/;"	p	file:	signature:(void)
clusterWriteHandler	cluster.c	/^void clusterWriteHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
cluster_configfile	server.h	/^    char *cluster_configfile; \/* Cluster auto-generated config file name. *\/$/;"	m	struct:redisServer	access:public
cluster_enabled	server.h	/^    int cluster_enabled;      \/* Is cluster enabled? *\/$/;"	m	struct:redisServer	access:public
cluster_error	redis-trib.rb	/^    def cluster_error(msg)$/;"	f	class:RedisTrib
cluster_migration_barrier	server.h	/^    int cluster_migration_barrier; \/* Cluster replicas migration barrier. *\/$/;"	m	struct:redisServer	access:public
cluster_mode	redis-cli.c	/^    int cluster_mode;$/;"	m	struct:config	file:	access:public
cluster_node_timeout	server.h	/^    mstime_t cluster_node_timeout; \/* Cluster node timeout. *\/$/;"	m	struct:redisServer	access:public
cluster_reissue_command	redis-cli.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:	access:public
cluster_require_full_coverage	server.h	/^    int cluster_require_full_coverage; \/* If true, put the cluster down if$/;"	m	struct:redisServer	access:public
cluster_slave_validity_factor	server.h	/^    int cluster_slave_validity_factor; \/* Slave max data age for failover. *\/$/;"	m	struct:redisServer	access:public
cmd	server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:client::redisCommand	access:public
cmd	server.h	/^    struct redisCommand *cmd;$/;"	m	struct:multiCmd	typeref:struct:multiCmd::redisCommand	access:public
cmd	server.h	/^    struct redisCommand *cmd;$/;"	m	struct:redisOp	typeref:struct:redisOp::redisCommand	access:public
cmpobj	server.h	/^        robj *cmpobj;$/;"	m	union:_redisSortObject::__anon31	access:public
cnegone	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
collateStringObjects	object.c	/^int collateStringObjects(robj *a, robj *b) {$/;"	f	signature:(robj *a, robj *b)
collateStringObjects	server.h	/^int collateStringObjects(robj *a, robj *b);$/;"	p	signature:(robj *a, robj *b)
colon	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct	access:public
commandCommand	server.c	/^void commandCommand(client *c) {$/;"	f	signature:(client *c)
commandCommand	server.h	/^void commandCommand(client *c);$/;"	p	signature:(client *c)
commandGroups	help.h	/^static char *commandGroups[] = {$/;"	v
commandHelp	help.h	/^struct commandHelp {$/;"	s
commandHelp	help.h	/^} commandHelp[] = {$/;"	v	typeref:struct:commandHelp
commandHelp::group	help.h	/^  int group;$/;"	m	struct:commandHelp	access:public
commandHelp::name	help.h	/^  char *name;$/;"	m	struct:commandHelp	access:public
commandHelp::params	help.h	/^  char *params;$/;"	m	struct:commandHelp	access:public
commandHelp::since	help.h	/^  char *since;$/;"	m	struct:commandHelp	access:public
commandHelp::summary	help.h	/^  char *summary;$/;"	m	struct:commandHelp	access:public
commandTableDictType	server.c	/^dictType commandTableDictType = {$/;"	v
commands	server.h	/^    dict *commands;             \/* Command table *\/$/;"	m	struct:redisServer	access:public
commands	server.h	/^    multiCmd *commands;     \/* Array of MULTI commands *\/$/;"	m	struct:multiState	access:public
compareLatency	redis-benchmark.c	/^static int compareLatency(const void *a, const void *b) {$/;"	f	file:	signature:(const void *a, const void *b)
compareSlavesForPromotion	sentinel.c	/^int compareSlavesForPromotion(const void *a, const void *b) {$/;"	f	signature:(const void *a, const void *b)
compareStringObjects	object.c	/^int compareStringObjects(robj *a, robj *b) {$/;"	f	signature:(robj *a, robj *b)
compareStringObjects	server.h	/^int compareStringObjects(robj *a, robj *b);$/;"	p	signature:(robj *a, robj *b)
compareStringObjectsForLexRange	t_zset.c	/^int compareStringObjectsForLexRange(robj *a, robj *b) {$/;"	f	signature:(robj *a, robj *b)
compareStringObjectsWithFlags	object.c	/^int compareStringObjectsWithFlags(robj *a, robj *b, int flags) {$/;"	f	signature:(robj *a, robj *b, int flags)
completionCallback	redis-cli.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	file:	signature:(const char *buf, linenoiseCompletions *lc)
compress	quicklist.h	/^    unsigned int compress : 16; \/* depth of end nodes not to compress;0=off *\/$/;"	m	struct:quicklist	access:public
compressed	quicklist.h	/^    char compressed[];$/;"	m	struct:quicklistLZF	access:public
computeDatasetDigest	debug.c	/^void computeDatasetDigest(unsigned char *final) {$/;"	f	signature:(unsigned char *final)
compute_reshard_table	redis-trib.rb	/^    def compute_reshard_table(sources,numslots)$/;"	f	class:RedisTrib.alloc_slots
compute_something_fast	redis-cli.c	/^unsigned long compute_something_fast(void) {$/;"	f	signature:(void)
cone	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
config	redis-benchmark.c	/^static struct config {$/;"	s	file:
config	redis-benchmark.c	/^} config;$/;"	v	typeref:struct:config	file:
config	redis-cli.c	/^static struct config {$/;"	s	file:
config	redis-cli.c	/^} config;$/;"	v	typeref:struct:config	file:
config::auth	redis-benchmark.c	/^    char *auth;$/;"	m	struct:config	file:	access:public
config::auth	redis-cli.c	/^    char *auth;$/;"	m	struct:config	file:	access:public
config::bigkeys	redis-cli.c	/^    int bigkeys;$/;"	m	struct:config	file:	access:public
config::clients	redis-benchmark.c	/^    list *clients;$/;"	m	struct:config	file:	access:public
config::cluster_mode	redis-cli.c	/^    int cluster_mode;$/;"	m	struct:config	file:	access:public
config::cluster_reissue_command	redis-cli.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:	access:public
config::csv	redis-benchmark.c	/^    int csv;$/;"	m	struct:config	file:	access:public
config::datasize	redis-benchmark.c	/^    int datasize;$/;"	m	struct:config	file:	access:public
config::dbnum	redis-benchmark.c	/^    int dbnum;$/;"	m	struct:config	file:	access:public
config::dbnum	redis-cli.c	/^    int dbnum;$/;"	m	struct:config	file:	access:public
config::dbnumstr	redis-benchmark.c	/^    sds dbnumstr;$/;"	m	struct:config	file:	access:public
config::el	redis-benchmark.c	/^    aeEventLoop *el;$/;"	m	struct:config	file:	access:public
config::enable_ldb_on_eval	redis-cli.c	/^    int enable_ldb_on_eval; \/* Handle manual SCRIPT DEBUG + EVAL commands. *\/$/;"	m	struct:config	file:	access:public
config::eval	redis-cli.c	/^    char *eval;$/;"	m	struct:config	file:	access:public
config::eval_ldb	redis-cli.c	/^    int eval_ldb;$/;"	m	struct:config	file:	access:public
config::eval_ldb_end	redis-cli.c	/^    int eval_ldb_end;   \/* Lua debugging session ended. *\/$/;"	m	struct:config	file:	access:public
config::eval_ldb_sync	redis-cli.c	/^    int eval_ldb_sync;  \/* Ask for synchronous mode of the Lua debugger. *\/$/;"	m	struct:config	file:	access:public
config::getrdb_mode	redis-cli.c	/^    int getrdb_mode;$/;"	m	struct:config	file:	access:public
config::hostip	redis-benchmark.c	/^    const char *hostip;$/;"	m	struct:config	file:	access:public
config::hostip	redis-cli.c	/^    char *hostip;$/;"	m	struct:config	file:	access:public
config::hostport	redis-benchmark.c	/^    int hostport;$/;"	m	struct:config	file:	access:public
config::hostport	redis-cli.c	/^    int hostport;$/;"	m	struct:config	file:	access:public
config::hostsocket	redis-benchmark.c	/^    const char *hostsocket;$/;"	m	struct:config	file:	access:public
config::hostsocket	redis-cli.c	/^    char *hostsocket;$/;"	m	struct:config	file:	access:public
config::idlemode	redis-benchmark.c	/^    int idlemode;$/;"	m	struct:config	file:	access:public
config::interactive	redis-cli.c	/^    int interactive;$/;"	m	struct:config	file:	access:public
config::interval	redis-cli.c	/^    long interval;$/;"	m	struct:config	file:	access:public
config::intrinsic_latency_duration	redis-cli.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:	access:public
config::intrinsic_latency_mode	redis-cli.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:	access:public
config::keepalive	redis-benchmark.c	/^    int keepalive;$/;"	m	struct:config	file:	access:public
config::keysize	redis-benchmark.c	/^    int keysize;$/;"	m	struct:config	file:	access:public
config::last_cmd_type	redis-cli.c	/^    int last_cmd_type;$/;"	m	struct:config	file:	access:public
config::latency	redis-benchmark.c	/^    long long *latency;$/;"	m	struct:config	file:	access:public
config::latency_dist_mode	redis-cli.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:	access:public
config::latency_history	redis-cli.c	/^    int latency_history;$/;"	m	struct:config	file:	access:public
config::latency_mode	redis-cli.c	/^    int latency_mode;$/;"	m	struct:config	file:	access:public
config::liveclients	redis-benchmark.c	/^    int liveclients;$/;"	m	struct:config	file:	access:public
config::loop	redis-benchmark.c	/^    int loop;$/;"	m	struct:config	file:	access:public
config::lru_test_mode	redis-cli.c	/^    int lru_test_mode;$/;"	m	struct:config	file:	access:public
config::lru_test_sample_size	redis-cli.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:	access:public
config::mb_delim	redis-cli.c	/^    sds mb_delim;$/;"	m	struct:config	file:	access:public
config::monitor_mode	redis-cli.c	/^    int monitor_mode;$/;"	m	struct:config	file:	access:public
config::numclients	redis-benchmark.c	/^    int numclients;$/;"	m	struct:config	file:	access:public
config::output	redis-cli.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:	access:public
config::pattern	redis-cli.c	/^    char *pattern;$/;"	m	struct:config	file:	access:public
config::pipe_mode	redis-cli.c	/^    int pipe_mode;$/;"	m	struct:config	file:	access:public
config::pipe_timeout	redis-cli.c	/^    int pipe_timeout;$/;"	m	struct:config	file:	access:public
config::pipeline	redis-benchmark.c	/^    int pipeline;$/;"	m	struct:config	file:	access:public
config::prompt	redis-cli.c	/^    char prompt[128];$/;"	m	struct:config	file:	access:public
config::pubsub_mode	redis-cli.c	/^    int pubsub_mode;$/;"	m	struct:config	file:	access:public
config::quiet	redis-benchmark.c	/^    int quiet;$/;"	m	struct:config	file:	access:public
config::randomkeys	redis-benchmark.c	/^    int randomkeys;$/;"	m	struct:config	file:	access:public
config::randomkeys_keyspacelen	redis-benchmark.c	/^    int randomkeys_keyspacelen;$/;"	m	struct:config	file:	access:public
config::rdb_filename	redis-cli.c	/^    char *rdb_filename;$/;"	m	struct:config	file:	access:public
config::repeat	redis-cli.c	/^    long repeat;$/;"	m	struct:config	file:	access:public
config::requests	redis-benchmark.c	/^    int requests;$/;"	m	struct:config	file:	access:public
config::requests_finished	redis-benchmark.c	/^    int requests_finished;$/;"	m	struct:config	file:	access:public
config::requests_issued	redis-benchmark.c	/^    int requests_issued;$/;"	m	struct:config	file:	access:public
config::scan_mode	redis-cli.c	/^    int scan_mode;$/;"	m	struct:config	file:	access:public
config::showerrors	redis-benchmark.c	/^    int showerrors;$/;"	m	struct:config	file:	access:public
config::shutdown	redis-cli.c	/^    int shutdown;$/;"	m	struct:config	file:	access:public
config::slave_mode	redis-cli.c	/^    int slave_mode;$/;"	m	struct:config	file:	access:public
config::start	redis-benchmark.c	/^    long long start;$/;"	m	struct:config	file:	access:public
config::stat_mode	redis-cli.c	/^    int stat_mode;$/;"	m	struct:config	file:	access:public
config::stdinarg	redis-cli.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:	access:public
config::tests	redis-benchmark.c	/^    char *tests;$/;"	m	struct:config	file:	access:public
config::title	redis-benchmark.c	/^    const char *title;$/;"	m	struct:config	file:	access:public
config::totlatency	redis-benchmark.c	/^    long long totlatency;$/;"	m	struct:config	file:	access:public
configCommand	server.h	/^void configCommand(client *c);$/;"	p	signature:(client *c)
configEnum	config.c	/^typedef struct configEnum {$/;"	s	file:
configEnum	config.c	/^} configEnum;$/;"	t	typeref:struct:configEnum	file:
configEnum::name	config.c	/^    const char *name;$/;"	m	struct:configEnum	file:	access:public
configEnum::val	config.c	/^    const int val;$/;"	m	struct:configEnum	file:	access:public
configEnumGetName	config.c	/^const char *configEnumGetName(configEnum *ce, int val) {$/;"	f	signature:(configEnum *ce, int val)
configEnumGetNameOrUnknown	config.c	/^const char *configEnumGetNameOrUnknown(configEnum *ce, int val) {$/;"	f	signature:(configEnum *ce, int val)
configEnumGetValue	config.c	/^int configEnumGetValue(configEnum *ce, char *name) {$/;"	f	signature:(configEnum *ce, char *name)
configEpoch	cluster.h	/^    uint64_t configEpoch;   \/* The config epoch if it's a master, or the last$/;"	m	struct:__anon9	access:public
configEpoch	cluster.h	/^    uint64_t configEpoch; \/* Config epoch of the specified instance. *\/$/;"	m	struct:__anon4	access:public
configEpoch	cluster.h	/^    uint64_t configEpoch; \/* Last configEpoch observed for this node *\/$/;"	m	struct:clusterNode	access:public
configSetCommand	config.c	/^void configSetCommand(client *c) {$/;"	f	signature:(client *c)
config_epoch	sentinel.c	/^    uint64_t config_epoch;  \/* Configuration epoch. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
config_get_bool_field	config.c	1028;"	d	file:
config_get_enum_field	config.c	1045;"	d	file:
config_get_numerical_field	config.c	1036;"	d	file:
config_get_string_field	config.c	1020;"	d	file:
config_set_bool_field	config.c	688;"	d	file:
config_set_else	config.c	716;"	d	file:
config_set_enum_field	config.c	707;"	d	file:
config_set_memory_field	config.c	701;"	d	file:
config_set_numerical_field	config.c	694;"	d	file:
config_set_special_field	config.c	713;"	d	file:
configfile	server.h	/^    char *configfile;           \/* Absolute config file path, or NULL *\/$/;"	m	struct:redisServer	access:public
connect	redis-trib.rb	/^    def connect(o={})$/;"	f	class:ClusterNode
connectWithMaster	replication.c	/^int connectWithMaster(void) {$/;"	f	signature:(void)
consumeNewline	redis-check-aof.c	/^int consumeNewline(char *buf) {$/;"	f	signature:(char *buf)
container	quicklist.h	/^    unsigned int container : 2;  \/* NONE==1 or ZIPLIST==2 *\/$/;"	m	struct:quicklistNode	access:public
contents	intset.h	/^    int8_t contents[];$/;"	m	struct:intset	access:public
context	redis-benchmark.c	/^    redisContext *context;$/;"	m	struct:_client	file:	access:public
context	redis-cli.c	/^static redisContext *context;$/;"	v	file:
context	sentinel.c	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	file:	access:public
convertDoubleToRawBits	slots_async.c	/^convertDoubleToRawBits(double value) {$/;"	f	file:	signature:(double value)
convertRawBitsToDouble	slots_async.c	/^convertRawBitsToDouble(uint64_t value) {$/;"	f	file:	signature:(uint64_t value)
convertToSds	redis-cli.c	/^static char **convertToSds(int count, char** args) {$/;"	f	file:	signature:(int count, char** args)
copyClientOutputBuffer	networking.c	/^void copyClientOutputBuffer(client *dst, client *src) {$/;"	f	signature:(client *dst, client *src)
copyClientOutputBuffer	server.h	/^void copyClientOutputBuffer(client *dst, client *src);$/;"	p	signature:(client *dst, client *src)
count	cluster.h	/^    uint16_t count;     \/* Only used for some kind of messages. *\/$/;"	m	struct:__anon9	access:public
count	quicklist.h	/^    unsigned int count : 16;     \/* count of items in ziplist *\/$/;"	m	struct:quicklistNode	access:public
count	quicklist.h	/^    unsigned long count;        \/* total count of all entries in all ziplists *\/$/;"	m	struct:quicklist	access:public
count	redis-cli.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:	access:public
count	server.h	/^    int count;              \/* Total number of MULTI commands *\/$/;"	m	struct:multiState	access:public
count	sha1.h	/^    uint32_t count[2];$/;"	m	struct:__anon15	access:public
countKeysInSlot	db.c	/^unsigned int countKeysInSlot(unsigned int hashslot) {$/;"	f	signature:(unsigned int hashslot)
countKeysInSlot	server.h	/^unsigned int countKeysInSlot(unsigned int hashslot);$/;"	p	signature:(unsigned int hashslot)
covered_slots	redis-trib.rb	/^    def covered_slots$/;"	f	class:RedisTrib
crc16	crc16.c	/^uint16_t crc16(const char *buf, int len) {$/;"	f	signature:(const char *buf, int len)
crc16	redis-trib.rb	/^    def RedisClusterCRC16.crc16(bytes)$/;"	F	class:RedisTrib.RedisClusterCRC16
crc16	server.h	/^unsigned short crc16(const char *buf, int len);$/;"	p	signature:(const char *buf, int len)
crc16tab	crc16.c	/^static const uint16_t crc16tab[256]= {$/;"	v	file:
crc32_checksum	crc32.c	/^crc32_checksum(const char *buf, int len) {$/;"	f	signature:(const char *buf, int len)
crc32_checksum	server.h	/^uint32_t crc32_checksum(const char *buf, int len);$/;"	p	signature:(const char *buf, int len)
crc32_init	crc32.c	/^crc32_init() {$/;"	f
crc32_init	server.h	/^void crc32_init();$/;"	p	signature:()
crc32_tabinit	crc32.c	/^crc32_tabinit(uint32_t poly) {$/;"	f	file:	signature:(uint32_t poly)
crc32_update	crc32.c	/^crc32_update(uint32_t crc, const char *buf, int len) {$/;"	f	file:	signature:(uint32_t crc, const char *buf, int len)
crc32tab	crc32.c	/^static uint32_t crc32tab[256];$/;"	v	file:
crc64	crc64.c	/^uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l) {$/;"	f	signature:(uint64_t crc, const unsigned char *s, uint64_t l)
crc64	crc64.h	/^uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l);$/;"	p	signature:(uint64_t crc, const unsigned char *s, uint64_t l)
crc64	server.h	/^uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l);$/;"	p	signature:(uint64_t crc, const unsigned char *s, uint64_t l)
crc64Test	crc64.c	/^int crc64Test(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
crc64Test	crc64.h	/^int crc64Test(int argc, char *argv[]);$/;"	p	signature:(int argc, char *argv[])
crc64_tab	crc64.c	/^static const uint64_t crc64_tab[256] = {$/;"	v	file:
createBatchedObjectIterator	slots_async.c	/^createBatchedObjectIterator(dict *hash_slot, struct zskiplist *hash_tags,$/;"	f	file:	signature:(dict *hash_slot, struct zskiplist *hash_tags, long long timeout, unsigned int maxbulks, unsigned int maxbytes)
createClient	networking.c	/^client *createClient(int fd) {$/;"	f	signature:(int fd)
createClient	redis-benchmark.c	/^static client createClient(char *cmd, size_t len, client from) {$/;"	f	file:	signature:(char *cmd, size_t len, client from)
createClient	server.h	/^client *createClient(int fd);$/;"	p	signature:(int fd)
createClusterLink	cluster.c	/^clusterLink *createClusterLink(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
createClusterNode	cluster.c	/^clusterNode *createClusterNode(char *nodename, int flags) {$/;"	f	signature:(char *nodename, int flags)
createClusterNode	cluster.c	/^clusterNode *createClusterNode(char *nodename, int flags);$/;"	p	file:	signature:(char *nodename, int flags)
createDumpPayload	cluster.c	/^void createDumpPayload(rio *payload, robj *o) {$/;"	f	signature:(rio *payload, robj *o)
createDumpPayload	slots.c	/^extern void createDumpPayload(rio *payload, robj *o);$/;"	p	file:	signature:(rio *payload, robj *o)
createDumpPayload	slots_async.c	/^extern void createDumpPayload(rio *payload, robj *o);$/;"	p	file:	signature:(rio *payload, robj *o)
createEmbeddedStringObject	object.c	/^robj *createEmbeddedStringObject(const char *ptr, size_t len) {$/;"	f	signature:(const char *ptr, size_t len)
createEmbeddedStringObject	server.h	/^robj *createEmbeddedStringObject(const char *ptr, size_t len);$/;"	p	signature:(const char *ptr, size_t len)
createFakeClient	aof.c	/^struct client *createFakeClient(void) {$/;"	f	signature:(void)
createHLLObject	hyperloglog.c	/^robj *createHLLObject(void) {$/;"	f	signature:(void)
createHashObject	object.c	/^robj *createHashObject(void) {$/;"	f	signature:(void)
createHashObject	server.h	/^robj *createHashObject(void);$/;"	p	signature:(void)
createInstanceLink	sentinel.c	/^instanceLink *createInstanceLink(void) {$/;"	f	signature:(void)
createIntList	ziplist.c	/^static unsigned char *createIntList() {$/;"	f	file:
createIntsetObject	object.c	/^robj *createIntsetObject(void) {$/;"	f	signature:(void)
createIntsetObject	server.h	/^robj *createIntsetObject(void);$/;"	p	signature:(void)
createLatencyReport	latency.c	/^sds createLatencyReport(void) {$/;"	f	signature:(void)
createLazyReleaseIterator	slots_async.c	/^createLazyReleaseIterator(robj *val) {$/;"	f	file:	signature:(robj *val)
createList	ziplist.c	/^static unsigned char *createList() {$/;"	f	file:
createMissingClients	redis-benchmark.c	/^static void createMissingClients(client c) {$/;"	f	file:	signature:(client c)
createMissingClients	redis-benchmark.c	/^static void createMissingClients(client c);$/;"	p	file:	signature:(client c)
createObject	object.c	/^robj *createObject(int type, void *ptr) {$/;"	f	signature:(int type, void *ptr)
createObject	server.h	/^robj *createObject(int type, void *ptr);$/;"	p	signature:(int type, void *ptr)
createPidFile	server.c	/^void createPidFile(void) {$/;"	f	signature:(void)
createQuicklistObject	object.c	/^robj *createQuicklistObject(void) {$/;"	f	signature:(void)
createQuicklistObject	server.h	/^robj *createQuicklistObject(void);$/;"	p	signature:(void)
createRawStringObject	object.c	/^robj *createRawStringObject(const char *ptr, size_t len) {$/;"	f	signature:(const char *ptr, size_t len)
createRawStringObject	server.h	/^robj *createRawStringObject(const char *ptr, size_t len);$/;"	p	signature:(const char *ptr, size_t len)
createRawStringObjectFromUint64	slots_async.c	/^createRawStringObjectFromUint64(uint64_t v) {$/;"	f	file:	signature:(uint64_t v)
createReplicationBacklog	replication.c	/^void createReplicationBacklog(void) {$/;"	f	signature:(void)
createSentinelAddr	sentinel.c	/^sentinelAddr *createSentinelAddr(char *hostname, int port) {$/;"	f	signature:(char *hostname, int port)
createSentinelRedisInstance	sentinel.c	/^sentinelRedisInstance *createSentinelRedisInstance(char *name, int flags, char *hostname, int port, int quorum, sentinelRedisInstance *master) {$/;"	f	signature:(char *name, int flags, char *hostname, int port, int quorum, sentinelRedisInstance *master)
createSet	intset.c	/^static intset *createSet(int bits, int size) {$/;"	f	file:	signature:(int bits, int size)
createSetObject	object.c	/^robj *createSetObject(void) {$/;"	f	signature:(void)
createSetObject	server.h	/^robj *createSetObject(void);$/;"	p	signature:(void)
createSharedObjects	redis-check-rdb.c	/^void createSharedObjects(void);$/;"	p	file:	signature:(void)
createSharedObjects	server.c	/^void createSharedObjects(void) {$/;"	f	signature:(void)
createSingleObjectIterator	slots_async.c	/^createSingleObjectIterator(robj *key) {$/;"	f	file:	signature:(robj *key)
createSlotsmgrtAsyncClient	slots_async.c	/^createSlotsmgrtAsyncClient(int db, char *host, int port, long timeout) {$/;"	f	file:	signature:(int db, char *host, int port, long timeout)
createSortOperation	sort.c	/^redisSortOperation *createSortOperation(int type, robj *pattern) {$/;"	f	signature:(int type, robj *pattern)
createSparklineSequence	sparkline.c	/^struct sequence *createSparklineSequence(void) {$/;"	f	signature:(void)
createSparklineSequence	sparkline.h	/^struct sequence *createSparklineSequence(void);$/;"	p	signature:(void)
createStringObject	object.c	/^robj *createStringObject(const char *ptr, size_t len) {$/;"	f	signature:(const char *ptr, size_t len)
createStringObject	server.h	/^robj *createStringObject(const char *ptr, size_t len);$/;"	p	signature:(const char *ptr, size_t len)
createStringObjectFromLongDouble	object.c	/^robj *createStringObjectFromLongDouble(long double value, int humanfriendly) {$/;"	f	signature:(long double value, int humanfriendly)
createStringObjectFromLongDouble	server.h	/^robj *createStringObjectFromLongDouble(long double value, int humanfriendly);$/;"	p	signature:(long double value, int humanfriendly)
createStringObjectFromLongLong	object.c	/^robj *createStringObjectFromLongLong(long long value) {$/;"	f	signature:(long long value)
createStringObjectFromLongLong	server.h	/^robj *createStringObjectFromLongLong(long long value);$/;"	p	signature:(long long value)
createZiplistObject	object.c	/^robj *createZiplistObject(void) {$/;"	f	signature:(void)
createZiplistObject	server.h	/^robj *createZiplistObject(void);$/;"	p	signature:(void)
createZsetObject	object.c	/^robj *createZsetObject(void) {$/;"	f	signature:(void)
createZsetObject	server.h	/^robj *createZsetObject(void);$/;"	p	signature:(void)
createZsetZiplistObject	object.c	/^robj *createZsetZiplistObject(void) {$/;"	f	signature:(void)
createZsetZiplistObject	server.h	/^robj *createZsetZiplistObject(void);$/;"	p	signature:(void)
create_cluster_cmd	redis-trib.rb	/^    def create_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
crlf	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
cronloops	server.h	/^    int cronloops;              \/* Number of times the cron function run *\/$/;"	m	struct:redisServer	access:public
csv	redis-benchmark.c	/^    int csv;$/;"	m	struct:config	file:	access:public
ctime	cluster.h	/^    mstime_t ctime;             \/* Link creation time *\/$/;"	m	struct:clusterLink	access:public
ctime	cluster.h	/^    mstime_t ctime; \/* Node object creation time. *\/$/;"	m	struct:clusterNode	access:public
ctime	server.h	/^    time_t ctime;           \/* Client creation time. *\/$/;"	m	struct:client	access:public
current	quicklist.h	/^    quicklistNode *current;$/;"	m	struct:quicklistIter	access:public
currentEpoch	cluster.h	/^    uint64_t currentEpoch;  \/* The epoch accordingly to the sending node. *\/$/;"	m	struct:__anon9	access:public
currentEpoch	cluster.h	/^    uint64_t currentEpoch;$/;"	m	struct:clusterState	access:public
current_client	server.h	/^    client *current_client; \/* Current client, only used on crash report *\/$/;"	m	struct:redisServer	access:public
current_epoch	sentinel.c	/^    uint64_t current_epoch;         \/* Current epoch. *\/$/;"	m	struct:sentinelState	file:	access:public
currentline	scripting.c	/^    int currentline;    \/* Current line number. *\/$/;"	m	struct:ldbState	file:	access:public
cursor	slots_async.c	/^    unsigned long cursor;$/;"	m	struct:__anon10	file:	access:public
cursor	slots_async.c	/^    unsigned long cursor;$/;"	m	struct:__anon12	file:	access:public
czero	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
d	dict.h	/^        double d;$/;"	m	union:dictEntry::__anon14	access:public
d	dict.h	/^    dict *d;$/;"	m	struct:dictIterator	access:public
d2string	util.c	/^int d2string(char *buf, size_t len, double value) {$/;"	f	signature:(char *buf, size_t len, double value)
d2string	util.h	/^int d2string(char *buf, size_t len, double value);$/;"	p	signature:(char *buf, size_t len, double value)
daemonize	server.c	/^void daemonize(void) {$/;"	f	signature:(void)
daemonize	server.h	/^    int daemonize;                  \/* True if running as a daemon *\/$/;"	m	struct:redisServer	access:public
data	cluster.h	/^    union clusterMsgData data;$/;"	m	struct:__anon9	typeref:union:__anon9::clusterMsgData	access:public
databasesCron	server.c	/^void databasesCron(void) {$/;"	f	signature:(void)
datasize	redis-benchmark.c	/^    int datasize;$/;"	m	struct:config	file:	access:public
db	multi.c	/^    redisDb *db;$/;"	m	struct:watchedKey	file:	access:public
db	server.h	/^    redisDb *db;            \/* Pointer to currently SELECTed DB. *\/$/;"	m	struct:client	access:public
db	server.h	/^    redisDb *db;$/;"	m	struct:readyList	access:public
db	server.h	/^    redisDb *db;$/;"	m	struct:redisServer	access:public
db	slots.c	/^    int db;$/;"	m	struct:__anon28	file:	access:public
dbAdd	db.c	/^void dbAdd(redisDb *db, robj *key, robj *val) {$/;"	f	signature:(redisDb *db, robj *key, robj *val)
dbAdd	server.h	/^void dbAdd(redisDb *db, robj *key, robj *val);$/;"	p	signature:(redisDb *db, robj *key, robj *val)
dbDelete	db.c	/^int dbDelete(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
dbDelete	server.h	/^int dbDelete(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
dbDictType	server.c	/^dictType dbDictType = {$/;"	v
dbExists	db.c	/^int dbExists(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
dbExists	server.h	/^int dbExists(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
dbOverwrite	db.c	/^void dbOverwrite(redisDb *db, robj *key, robj *val) {$/;"	f	signature:(redisDb *db, robj *key, robj *val)
dbOverwrite	server.h	/^void dbOverwrite(redisDb *db, robj *key, robj *val);$/;"	p	signature:(redisDb *db, robj *key, robj *val)
dbRandomKey	db.c	/^robj *dbRandomKey(redisDb *db) {$/;"	f	signature:(redisDb *db)
dbRandomKey	server.h	/^robj *dbRandomKey(redisDb *db);$/;"	p	signature:(redisDb *db)
dbUnshareStringValue	db.c	/^robj *dbUnshareStringValue(redisDb *db, robj *key, robj *o) {$/;"	f	signature:(redisDb *db, robj *key, robj *o)
dbUnshareStringValue	server.h	/^robj *dbUnshareStringValue(redisDb *db, robj *key, robj *o);$/;"	p	signature:(redisDb *db, robj *key, robj *o)
dbid	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	access:public
dbnum	redis-benchmark.c	/^    int dbnum;$/;"	m	struct:config	file:	access:public
dbnum	redis-cli.c	/^    int dbnum;$/;"	m	struct:config	file:	access:public
dbnum	server.h	/^    int dbnum;                      \/* Total number of configured DBs *\/$/;"	m	struct:redisServer	access:public
dbnumstr	redis-benchmark.c	/^    sds dbnumstr;$/;"	m	struct:config	file:	access:public
dbsizeCommand	db.c	/^void dbsizeCommand(client *c) {$/;"	f	signature:(client *c)
dbsizeCommand	server.h	/^void dbsizeCommand(client *c);$/;"	p	signature:(client *c)
de	server.h	/^    dictEntry *de;$/;"	m	struct:__anon35	access:public
de	t_zset.c	/^                dictEntry *de;$/;"	m	struct:__anon16::__anon17::_iterset::__anon19	file:	access:public
debug	ziplist.c	1091;"	d	file:
debugCommand	debug.c	/^void debugCommand(client *c) {$/;"	f	signature:(client *c)
debugCommand	server.h	/^void debugCommand(client *c);$/;"	p	signature:(client *c)
decodeGeohash	geo.c	/^int decodeGeohash(double bits, double *xy) {$/;"	f	signature:(double bits, double *xy)
decrCommand	server.h	/^void decrCommand(client *c);$/;"	p	signature:(client *c)
decrCommand	t_string.c	/^void decrCommand(client *c) {$/;"	f	signature:(client *c)
decrRefCount	object.c	/^void decrRefCount(robj *o) {$/;"	f	signature:(robj *o)
decrRefCount	server.h	/^void decrRefCount(robj *o);$/;"	p	signature:(robj *o)
decrRefCountVoid	object.c	/^void decrRefCountVoid(void *o) {$/;"	f	signature:(void *o)
decrRefCountVoid	server.h	/^void decrRefCountVoid(void *o);$/;"	p	signature:(void *o)
decrbyCommand	server.h	/^void decrbyCommand(client *c);$/;"	p	signature:(client *c)
decrbyCommand	t_string.c	/^void decrbyCommand(client *c) {$/;"	f	signature:(client *c)
del	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
delCommand	db.c	/^void delCommand(client *c) {$/;"	f	signature:(client *c)
delCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::redisCommand	access:public
delCommand	server.h	/^void delCommand(client *c);$/;"	p	signature:(client *c)
delKeysInSlot	db.c	/^unsigned int delKeysInSlot(unsigned int hashslot) {$/;"	f	signature:(unsigned int hashslot)
delKeysInSlot	server.h	/^unsigned int delKeysInSlot(unsigned int hashslot);$/;"	p	signature:(unsigned int hashslot)
delnode_cluster_cmd	redis-trib.rb	/^    def delnode_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
di	server.h	/^    dictIterator *di;$/;"	m	struct:__anon34	access:public
di	server.h	/^    dictIterator *di;$/;"	m	struct:__anon35	access:public
di	t_zset.c	/^                dictIterator *di;$/;"	m	struct:__anon16::__anon17::_iterset::__anon19	file:	access:public
dict	dict.h	/^typedef struct dict {$/;"	s
dict	dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict	server.h	/^    dict *dict;                 \/* The keyspace for this DB *\/$/;"	m	struct:redisDb	access:public
dict	server.h	/^    dict *dict;$/;"	m	struct:zset	access:public
dict	t_zset.c	/^                dict *dict;$/;"	m	struct:__anon16::__anon17::_iterset::__anon19	file:	access:public
dict::ht	dict.h	/^    dictht ht[2];$/;"	m	struct:dict	access:public
dict::iterators	dict.h	/^    int iterators; \/* number of iterators currently running *\/$/;"	m	struct:dict	access:public
dict::privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict	access:public
dict::rehashidx	dict.h	/^    long rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict	access:public
dict::type	dict.h	/^    dictType *type;$/;"	m	struct:dict	access:public
dictAdd	dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f	signature:(dict *d, void *key, void *val)
dictAdd	dict.h	/^int dictAdd(dict *d, void *key, void *val);$/;"	p	signature:(dict *d, void *key, void *val)
dictAddRaw	dict.c	/^dictEntry *dictAddRaw(dict *d, void *key)$/;"	f	signature:(dict *d, void *key)
dictAddRaw	dict.h	/^dictEntry *dictAddRaw(dict *d, void *key);$/;"	p	signature:(dict *d, void *key)
dictCompareKeys	dict.h	134;"	d
dictCreate	dict.c	/^dict *dictCreate(dictType *type,$/;"	f	signature:(dictType *type, void *privDataPtr)
dictCreate	dict.h	/^dict *dictCreate(dictType *type, void *privDataPtr);$/;"	p	signature:(dictType *type, void *privDataPtr)
dictDelete	dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f	signature:(dict *ht, const void *key)
dictDelete	dict.h	/^int dictDelete(dict *d, const void *key);$/;"	p	signature:(dict *d, const void *key)
dictDeleteNoFree	dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f	signature:(dict *ht, const void *key)
dictDeleteNoFree	dict.h	/^int dictDeleteNoFree(dict *d, const void *key);$/;"	p	signature:(dict *d, const void *key)
dictDisableResize	dict.c	/^void dictDisableResize(void) {$/;"	f	signature:(void)
dictDisableResize	dict.h	/^void dictDisableResize(void);$/;"	p	signature:(void)
dictEmpty	dict.c	/^void dictEmpty(dict *d, void(callback)(void*)) {$/;"	f	signature:(dict *d, void(callback)(void*))
dictEmpty	dict.h	/^void dictEmpty(dict *d, void(callback)(void*));$/;"	p	signature:(dict *d, void(callback)(void*))
dictEnableResize	dict.c	/^void dictEnableResize(void) {$/;"	f	signature:(void)
dictEnableResize	dict.h	/^void dictEnableResize(void);$/;"	p	signature:(void)
dictEncObjHash	server.c	/^unsigned int dictEncObjHash(const void *key) {$/;"	f	signature:(const void *key)
dictEncObjKeyCompare	server.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f	signature:(void *privdata, const void *key1, const void *key2)
dictEntry	dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictEntry::__anon14::d	dict.h	/^        double d;$/;"	m	union:dictEntry::__anon14	access:public
dictEntry::__anon14::s64	dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon14	access:public
dictEntry::__anon14::u64	dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon14	access:public
dictEntry::__anon14::val	dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon14	access:public
dictEntry::key	dict.h	/^    void *key;$/;"	m	struct:dictEntry	access:public
dictEntry::next	dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry	access:public
dictEntry::v	dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon14	access:public
dictExpand	dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f	signature:(dict *d, unsigned long size)
dictExpand	dict.h	/^int dictExpand(dict *d, unsigned long size);$/;"	p	signature:(dict *d, unsigned long size)
dictFetchValue	dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f	signature:(dict *d, const void *key)
dictFetchValue	dict.h	/^void *dictFetchValue(dict *d, const void *key);$/;"	p	signature:(dict *d, const void *key)
dictFind	dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f	signature:(dict *d, const void *key)
dictFind	dict.h	/^dictEntry * dictFind(dict *d, const void *key);$/;"	p	signature:(dict *d, const void *key)
dictFingerprint	dict.c	/^long long dictFingerprint(dict *d) {$/;"	f	signature:(dict *d)
dictFreeKey	dict.h	123;"	d
dictFreeVal	dict.h	103;"	d
dictGenCaseHashFunction	dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f	signature:(const unsigned char *buf, int len)
dictGenCaseHashFunction	dict.h	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len);$/;"	p	signature:(const unsigned char *buf, int len)
dictGenHashFunction	dict.c	/^unsigned int dictGenHashFunction(const void *key, int len) {$/;"	f	signature:(const void *key, int len)
dictGenHashFunction	dict.h	/^unsigned int dictGenHashFunction(const void *key, int len);$/;"	p	signature:(const void *key, int len)
dictGenericDelete	dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:	signature:(dict *d, const void *key, int nofree)
dictGetDoubleVal	dict.h	144;"	d
dictGetHashFunctionSeed	dict.c	/^uint32_t dictGetHashFunctionSeed(void) {$/;"	f	signature:(void)
dictGetHashFunctionSeed	dict.h	/^unsigned int dictGetHashFunctionSeed(void);$/;"	p	signature:(void)
dictGetIterator	dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f	signature:(dict *d)
dictGetIterator	dict.h	/^dictIterator *dictGetIterator(dict *d);$/;"	p	signature:(dict *d)
dictGetKey	dict.h	140;"	d
dictGetRandomKey	dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f	signature:(dict *d)
dictGetRandomKey	dict.h	/^dictEntry *dictGetRandomKey(dict *d);$/;"	p	signature:(dict *d)
dictGetSafeIterator	dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f	signature:(dict *d)
dictGetSafeIterator	dict.h	/^dictIterator *dictGetSafeIterator(dict *d);$/;"	p	signature:(dict *d)
dictGetSignedIntegerVal	dict.h	142;"	d
dictGetSomeKeys	dict.c	/^unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count) {$/;"	f	signature:(dict *d, dictEntry **des, unsigned int count)
dictGetSomeKeys	dict.h	/^unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count);$/;"	p	signature:(dict *d, dictEntry **des, unsigned int count)
dictGetStats	dict.c	/^void dictGetStats(char *buf, size_t bufsize, dict *d) {$/;"	f	signature:(char *buf, size_t bufsize, dict *d)
dictGetStats	dict.h	/^void dictGetStats(char *buf, size_t bufsize, dict *d);$/;"	p	signature:(char *buf, size_t bufsize, dict *d)
dictGetUnsignedIntegerVal	dict.h	143;"	d
dictGetVal	dict.h	141;"	d
dictHashKey	dict.h	139;"	d
dictInstancesValDestructor	sentinel.c	/^void dictInstancesValDestructor (void *privdata, void *obj) {$/;"	f	signature:(void *privdata, void *obj)
dictIntHashFunction	dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f	signature:(unsigned int key)
dictIsRehashing	dict.h	147;"	d
dictIterator	dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictIterator::d	dict.h	/^    dict *d;$/;"	m	struct:dictIterator	access:public
dictIterator::entry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	access:public
dictIterator::fingerprint	dict.h	/^    long long fingerprint;$/;"	m	struct:dictIterator	access:public
dictIterator::index	dict.h	/^    long index;$/;"	m	struct:dictIterator	access:public
dictIterator::nextEntry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	access:public
dictIterator::safe	dict.h	/^    int table, safe;$/;"	m	struct:dictIterator	access:public
dictIterator::table	dict.h	/^    int table, safe;$/;"	m	struct:dictIterator	access:public
dictListDestructor	server.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f	signature:(void *privdata, void *val)
dictNext	dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f	signature:(dictIterator *iter)
dictNext	dict.h	/^dictEntry *dictNext(dictIterator *iter);$/;"	p	signature:(dictIterator *iter)
dictObjHash	server.c	/^unsigned int dictObjHash(const void *key) {$/;"	f	signature:(const void *key)
dictObjKeyCompare	server.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f	signature:(void *privdata, const void *key1, const void *key2)
dictObjectDestructor	server.c	/^void dictObjectDestructor(void *privdata, void *val)$/;"	f	signature:(void *privdata, void *val)
dictRehash	dict.c	/^int dictRehash(dict *d, int n) {$/;"	f	signature:(dict *d, int n)
dictRehash	dict.h	/^int dictRehash(dict *d, int n);$/;"	p	signature:(dict *d, int n)
dictRehashMilliseconds	dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f	signature:(dict *d, int ms)
dictRehashMilliseconds	dict.h	/^int dictRehashMilliseconds(dict *d, int ms);$/;"	p	signature:(dict *d, int ms)
dictRelease	dict.c	/^void dictRelease(dict *d)$/;"	f	signature:(dict *d)
dictRelease	dict.h	/^void dictRelease(dict *d);$/;"	p	signature:(dict *d)
dictReleaseIterator	dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f	signature:(dictIterator *iter)
dictReleaseIterator	dict.h	/^void dictReleaseIterator(dictIterator *iter);$/;"	p	signature:(dictIterator *iter)
dictReplace	dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f	signature:(dict *d, void *key, void *val)
dictReplace	dict.h	/^int dictReplace(dict *d, void *key, void *val);$/;"	p	signature:(dict *d, void *key, void *val)
dictReplaceRaw	dict.c	/^dictEntry *dictReplaceRaw(dict *d, void *key) {$/;"	f	signature:(dict *d, void *key)
dictReplaceRaw	dict.h	/^dictEntry *dictReplaceRaw(dict *d, void *key);$/;"	p	signature:(dict *d, void *key)
dictResize	dict.c	/^int dictResize(dict *d)$/;"	f	signature:(dict *d)
dictResize	dict.h	/^int dictResize(dict *d);$/;"	p	signature:(dict *d)
dictScan	dict.c	/^unsigned long dictScan(dict *d,$/;"	f	signature:(dict *d, unsigned long v, dictScanFunction *fn, void *privdata)
dictScan	dict.h	/^unsigned long dictScan(dict *d, unsigned long v, dictScanFunction *fn, void *privdata);$/;"	p	signature:(dict *d, unsigned long v, dictScanFunction *fn, void *privdata)
dictScanFunction	dict.h	/^typedef void (dictScanFunction)(void *privdata, const dictEntry *de);$/;"	t
dictSdsCaseHash	server.c	/^unsigned int dictSdsCaseHash(const void *key) {$/;"	f	signature:(const void *key)
dictSdsDestructor	server.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f	signature:(void *privdata, void *val)
dictSdsHash	sentinel.c	/^unsigned int dictSdsHash(const void *key);$/;"	p	file:	signature:(const void *key)
dictSdsHash	server.c	/^unsigned int dictSdsHash(const void *key) {$/;"	f	signature:(const void *key)
dictSdsKeyCaseCompare	server.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f	signature:(void *privdata, const void *key1, const void *key2)
dictSdsKeyCompare	sentinel.c	/^int dictSdsKeyCompare(void *privdata, const void *key1, const void *key2);$/;"	p	file:	signature:(void *privdata, const void *key1, const void *key2)
dictSdsKeyCompare	server.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f	signature:(void *privdata, const void *key1, const void *key2)
dictSetDoubleVal	dict.h	120;"	d
dictSetHashFunctionSeed	dict.c	/^void dictSetHashFunctionSeed(uint32_t seed) {$/;"	f	signature:(uint32_t seed)
dictSetHashFunctionSeed	dict.h	/^void dictSetHashFunctionSeed(unsigned int initval);$/;"	p	signature:(unsigned int initval)
dictSetKey	dict.h	127;"	d
dictSetSignedIntegerVal	dict.h	114;"	d
dictSetUnsignedIntegerVal	dict.h	117;"	d
dictSetVal	dict.h	107;"	d
dictSize	dict.h	146;"	d
dictSlots	dict.h	145;"	d
dictStringHash	latency.c	/^unsigned int dictStringHash(const void *key) {$/;"	f	signature:(const void *key)
dictStringKeyCompare	latency.c	/^int dictStringKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	signature:(void *privdata, const void *key1, const void *key2)
dictType	dict.h	/^typedef struct dictType {$/;"	s
dictType	dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictType::hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType	access:public
dictType::keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType	access:public
dictType::keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType	access:public
dictType::keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType	access:public
dictType::valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType	access:public
dictType::valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType	access:public
dictVanillaFree	latency.c	/^void dictVanillaFree(void *privdata, void *val);$/;"	p	file:	signature:(void *privdata, void *val)
dictVanillaFree	server.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f	signature:(void *privdata, void *val)
dict_can_resize	dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_hash_function_seed	dict.c	/^static uint32_t dict_hash_function_seed = 5381;$/;"	v	file:
dictht	dict.h	/^typedef struct dictht {$/;"	s
dictht	dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
dictht::size	dict.h	/^    unsigned long size;$/;"	m	struct:dictht	access:public
dictht::sizemask	dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht	access:public
dictht::table	dict.h	/^    dictEntry **table;$/;"	m	struct:dictht	access:public
dictht::used	dict.h	/^    unsigned long used;$/;"	m	struct:dictht	access:public
dictid	server.h	/^    int dictid;             \/* ID of the currently SELECTed DB. *\/$/;"	m	struct:client	access:public
digits10	util.c	/^uint32_t digits10(uint64_t v) {$/;"	f	signature:(uint64_t v)
digits10	util.h	/^uint32_t digits10(uint64_t v);$/;"	p	signature:(uint64_t v)
direction	adlist.h	/^    int direction;$/;"	m	struct:listIter	access:public
direction	quicklist.h	/^    int direction;$/;"	m	struct:quicklistIter	access:public
direction	server.h	/^    unsigned char direction; \/* Iteration direction *\/$/;"	m	struct:__anon32	access:public
dirty	server.h	/^    long long dirty;                \/* Changes to DB from the last save *\/$/;"	m	struct:redisServer	access:public
dirty_before_bgsave	server.h	/^    long long dirty_before_bgsave;  \/* Used to restore dirty on failed BGSAVE *\/$/;"	m	struct:redisServer	access:public
disableWatchdog	debug.c	/^void disableWatchdog(void) {$/;"	f	signature:(void)
disableWatchdog	server.h	/^void disableWatchdog(void);$/;"	p	signature:(void)
discardCommand	multi.c	/^void discardCommand(client *c) {$/;"	f	signature:(client *c)
discardCommand	server.h	/^void discardCommand(client *c);$/;"	p	signature:(client *c)
discardTransaction	multi.c	/^void discardTransaction(client *c) {$/;"	f	signature:(client *c)
discardTransaction	server.h	/^void discardTransaction(client *c);$/;"	p	signature:(client *c)
disconnectAllBlockedClients	blocked.c	/^void disconnectAllBlockedClients(void) {$/;"	f	signature:(void)
disconnectAllBlockedClients	server.h	/^void disconnectAllBlockedClients(void);$/;"	p	signature:(void)
disconnectSlaves	networking.c	/^void disconnectSlaves(void) {$/;"	f	signature:(void)
disconnectSlaves	server.h	/^void disconnectSlaves(void);$/;"	p	signature:(void)
disconnected	sentinel.c	/^    int disconnected;      \/* Non-zero if we need to reconnect cc or pc. *\/$/;"	m	struct:instanceLink	file:	access:public
dist	geo.h	/^    double dist;$/;"	m	struct:geoPoint	access:public
distsamples	redis-cli.c	/^struct distsamples {$/;"	s	file:
distsamples::character	redis-cli.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:	access:public
distsamples::count	redis-cli.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:	access:public
distsamples::max	redis-cli.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:	access:public
doing	redis-check-rdb.c	/^    int doing;                      \/* The state while reading the RDB. *\/$/;"	m	struct:__anon23	file:	access:public
down_after_period	sentinel.c	/^    mstime_t down_after_period; \/* Consider it down after that period. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
dumpCommand	cluster.c	/^void dumpCommand(client *c) {$/;"	f	signature:(client *c)
dumpCommand	server.h	/^void dumpCommand(client *c);$/;"	p	signature:(client *c)
dumpX86Calls	debug.c	/^void dumpX86Calls(void *addr, size_t len) {$/;"	f	signature:(void *addr, size_t len)
dup	adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list	access:public
dupClientReplyValue	networking.c	/^void *dupClientReplyValue(void *o) {$/;"	f	signature:(void *o)
dupClientReplyValue	server.h	/^void *dupClientReplyValue(void *o);$/;"	p	signature:(void *o)
dupLastObjectIfNeeded	networking.c	/^robj *dupLastObjectIfNeeded(list *reply) {$/;"	f	signature:(list *reply)
dupSentinelAddr	sentinel.c	/^sentinelAddr *dupSentinelAddr(sentinelAddr *src) {$/;"	f	signature:(sentinelAddr *src)
dupStringObject	object.c	/^robj *dupStringObject(robj *o) {$/;"	f	signature:(robj *o)
dupStringObject	server.h	/^robj *dupStringObject(robj *o);$/;"	p	signature:(robj *o)
duration	slowlog.h	/^    long long duration; \/* Time spent by the query, in nanoseconds. *\/$/;"	m	struct:slowlogEntry	access:public
echoCommand	server.c	/^void echoCommand(client *c) {$/;"	f	signature:(client *c)
echoCommand	server.h	/^void echoCommand(client *c);$/;"	p	signature:(client *c)
el	redis-benchmark.c	/^    aeEventLoop *el;$/;"	m	struct:config	file:	access:public
el	server.h	/^    aeEventLoop *el;$/;"	m	struct:redisServer	access:public
ele	t_zset.c	/^    robj *ele;$/;"	m	struct:__anon22	file:	access:public
elen	t_zset.c	/^    unsigned int elen;$/;"	m	struct:__anon22	file:	access:public
ell	t_zset.c	/^    long long ell;$/;"	m	struct:__anon22	file:	access:public
emptyDb	db.c	/^long long emptyDb(void(callback)(void*)) {$/;"	f	signature:(void(callback)(void*))
emptyDb	server.h	/^long long emptyDb(void(callback)(void*));$/;"	p	signature:(void(callback)(void*))
emptybulk	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
emptymultibulk	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
emptyscan	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct	access:public
enableWatchdog	debug.c	/^void enableWatchdog(int period) {$/;"	f	signature:(int period)
enableWatchdog	server.h	/^void enableWatchdog(int period);$/;"	p	signature:(int period)
enable_ldb_on_eval	redis-cli.c	/^    int enable_ldb_on_eval; \/* Handle manual SCRIPT DEBUG + EVAL commands. *\/$/;"	m	struct:config	file:	access:public
encoding	hyperloglog.c	/^    uint8_t encoding;   \/* HLL_DENSE or HLL_SPARSE. *\/$/;"	m	struct:hllhdr	file:	access:public
encoding	intset.h	/^    uint32_t encoding;$/;"	m	struct:intset	access:public
encoding	quicklist.h	/^    unsigned int encoding : 2;   \/* RAW==1 or LZF==2 *\/$/;"	m	struct:quicklistNode	access:public
encoding	server.h	/^    int encoding;$/;"	m	struct:__anon34	access:public
encoding	server.h	/^    int encoding;$/;"	m	struct:__anon35	access:public
encoding	server.h	/^    unsigned char encoding;$/;"	m	struct:__anon32	access:public
encoding	server.h	/^    unsigned encoding:4;$/;"	m	struct:redisObject	access:public
encoding	t_zset.c	/^    int encoding;$/;"	m	struct:__anon16	file:	access:public
encoding	ziplist.c	/^    unsigned char encoding;$/;"	m	struct:zlentry	file:	access:public
end	setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon39	file:	access:public
endianconvTest	endianconv.c	/^int endianconvTest(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
endianconvTest	endianconv.h	/^int endianconvTest(int argc, char *argv[]);$/;"	p	signature:(int argc, char *argv[])
entry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	access:public
entry	server.h	/^    quicklistEntry entry; \/* Entry in quicklist *\/$/;"	m	struct:__anon33	access:public
epfd	ae_epoll.c	/^    int epfd;$/;"	m	struct:aeApiState	file:	access:public
epos	redis-check-aof.c	/^static off_t epos;$/;"	v	file:
eptr	t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon20	file:	access:public
equalStringObjects	object.c	/^int equalStringObjects(robj *a, robj *b) {$/;"	f	signature:(robj *a, robj *b)
equalStringObjects	server.h	/^int equalStringObjects(robj *a, robj *b);$/;"	p	signature:(robj *a, robj *b)
err	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
error	redis-check-aof.c	/^static char error[1024];$/;"	v	file:
error	redis-check-rdb.c	/^    char error[1024];$/;"	m	struct:__anon23	file:	access:public
error	setproctitle.c	/^	int error;$/;"	m	struct:__anon39	file:	access:public
error_set	redis-check-rdb.c	/^    int error_set;                  \/* True if error is populated. *\/$/;"	m	struct:__anon23	file:	access:public
estimateNumberOfRestoreCommands	slots_async.c	/^estimateNumberOfRestoreCommands(redisDb *db, robj *key, long long maxbulks) {$/;"	f	file:	signature:(redisDb *db, robj *key, long long maxbulks)
estimateObjectIdleTime	object.c	/^unsigned long long estimateObjectIdleTime(robj *o) {$/;"	f	signature:(robj *o)
estimateObjectIdleTime	server.h	/^unsigned long long estimateObjectIdleTime(robj *o);$/;"	p	signature:(robj *o)
estimate_msgs	slots_async.c	/^    long estimate_msgs;$/;"	m	struct:__anon13	file:	access:public
estr	t_zset.c	/^    unsigned char *estr;$/;"	m	struct:__anon22	file:	access:public
eval	redis-cli.c	/^    char *eval;$/;"	m	struct:config	file:	access:public
evalCommand	scripting.c	/^void evalCommand(client *c) {$/;"	f	signature:(client *c)
evalCommand	server.h	/^void evalCommand(client *c);$/;"	p	signature:(client *c)
evalGenericCommand	scripting.c	/^void evalGenericCommand(client *c, int evalsha) {$/;"	f	signature:(client *c, int evalsha)
evalGenericCommandWithDebugging	scripting.c	/^void evalGenericCommandWithDebugging(client *c, int evalsha) {$/;"	f	signature:(client *c, int evalsha)
evalGenericCommandWithDebugging	scripting.c	/^void evalGenericCommandWithDebugging(client *c, int evalsha);$/;"	p	file:	signature:(client *c, int evalsha)
evalGetKeys	db.c	/^int *evalGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
evalGetKeys	server.h	/^int *evalGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);$/;"	p	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
evalMode	redis-cli.c	/^static int evalMode(int argc, char **argv) {$/;"	f	file:	signature:(int argc, char **argv)
evalShaCommand	scripting.c	/^void evalShaCommand(client *c) {$/;"	f	signature:(client *c)
evalShaCommand	server.h	/^void evalShaCommand(client *c);$/;"	p	signature:(client *c)
eval_ldb	redis-cli.c	/^    int eval_ldb;$/;"	m	struct:config	file:	access:public
eval_ldb_end	redis-cli.c	/^    int eval_ldb_end;   \/* Lua debugging session ended. *\/$/;"	m	struct:config	file:	access:public
eval_ldb_sync	redis-cli.c	/^    int eval_ldb_sync;  \/* Ask for synchronous mode of the Lua debugger. *\/$/;"	m	struct:config	file:	access:public
events	ae.h	/^    aeFileEvent *events; \/* Registered events *\/$/;"	m	struct:aeEventLoop	access:public
events	ae_epoll.c	/^    struct epoll_event *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::epoll_event	file:	access:public
events	ae_kqueue.c	/^    struct kevent *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::kevent	file:	access:public
evictPolicyToString	config.c	/^const char *evictPolicyToString(void) {$/;"	f	signature:(void)
evictPolicyToString	server.h	/^const char *evictPolicyToString(void);$/;"	p	signature:(void)
evictionPoolAlloc	server.c	/^struct evictionPoolEntry *evictionPoolAlloc(void) {$/;"	f	signature:(void)
evictionPoolAlloc	server.c	/^struct evictionPoolEntry *evictionPoolAlloc(void);$/;"	p	file:	signature:(void)
evictionPoolEntry	server.h	/^struct evictionPoolEntry {$/;"	s
evictionPoolEntry::idle	server.h	/^    unsigned long long idle;    \/* Object idle time. *\/$/;"	m	struct:evictionPoolEntry	access:public
evictionPoolEntry::key	server.h	/^    sds key;                    \/* Key name. *\/$/;"	m	struct:evictionPoolEntry	access:public
evictionPoolPopulate	server.c	/^void evictionPoolPopulate(dict *sampledict, dict *keydict, struct evictionPoolEntry *pool) {$/;"	f	signature:(dict *sampledict, dict *keydict, struct evictionPoolEntry *pool)
eviction_pool	server.h	/^    struct evictionPoolEntry *eviction_pool;    \/* Eviction pool of keys *\/$/;"	m	struct:redisDb	typeref:struct:redisDb::evictionPoolEntry	access:public
evport_debug	ae_evport.c	/^static int evport_debug = 0;$/;"	v	file:
execCommand	multi.c	/^void execCommand(client *c) {$/;"	f	signature:(client *c)
execCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
execCommand	server.h	/^void execCommand(client *c);$/;"	p	signature:(client *c)
execCommandPropagateMulti	multi.c	/^void execCommandPropagateMulti(client *c) {$/;"	f	signature:(client *c)
execCommandPropagateMulti	server.h	/^void execCommandPropagateMulti(client *c);$/;"	p	signature:(client *c)
exec_argv	server.h	/^    char **exec_argv;           \/* Executable argv vector (copy). *\/$/;"	m	struct:redisServer	access:public
execaborterr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
executable	server.h	/^    char *executable;           \/* Absolute executable file path. *\/$/;"	m	struct:redisServer	access:public
existsCommand	db.c	/^void existsCommand(client *c) {$/;"	f	signature:(client *c)
existsCommand	server.h	/^void existsCommand(client *c);$/;"	p	signature:(client *c)
exitFromChild	server.c	/^void exitFromChild(int retcode) {$/;"	f	signature:(int retcode)
exitFromChild	server.h	/^void exitFromChild(int retcode);$/;"	p	signature:(int retcode)
expect	lzf_c.c	79;"	d	file:
expect	lzf_c.c	82;"	d	file:
expect_false	lzf_c.c	86;"	d	file:
expect_true	lzf_c.c	87;"	d	file:
expire	slots_async.c	/^    long long expire;$/;"	m	struct:__anon12	file:	access:public
expireCommand	db.c	/^void expireCommand(client *c) {$/;"	f	signature:(client *c)
expireCommand	server.h	/^void expireCommand(client *c);$/;"	p	signature:(client *c)
expireGenericCommand	db.c	/^void expireGenericCommand(client *c, long long basetime, int unit) {$/;"	f	signature:(client *c, long long basetime, int unit)
expireIfNeeded	db.c	/^int expireIfNeeded(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
expireIfNeeded	server.h	/^int expireIfNeeded(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
expireatCommand	db.c	/^void expireatCommand(client *c) {$/;"	f	signature:(client *c)
expireatCommand	server.h	/^void expireatCommand(client *c);$/;"	p	signature:(client *c)
expires	redis-check-rdb.c	/^    unsigned long expires;          \/* Number of keys with an expire. *\/$/;"	m	struct:__anon23	file:	access:public
expires	server.h	/^    dict *expires;              \/* Timeout of keys with a timeout set *\/$/;"	m	struct:redisDb	access:public
extra	quicklist.h	/^    unsigned int extra : 10; \/* more bits to steal for future usage *\/$/;"	m	struct:quicklistNode	access:public
extractDistanceOrReply	geo.c	/^double extractDistanceOrReply(client *c, robj **argv,$/;"	f	signature:(client *c, robj **argv, double *conversion)
extractLongLatOrReply	geo.c	/^int extractLongLatOrReply(client *c, robj **argv, double *xy) {$/;"	f	signature:(client *c, robj **argv, double *xy)
extractUnitOrReply	geo.c	/^double extractUnitOrReply(client *c, robj *unit) {$/;"	f	signature:(client *c, robj *unit)
fail	cluster.h	/^    } fail;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon6	access:public
fail_reports	cluster.h	/^    list *fail_reports;         \/* List of nodes signaling this as failing *\/$/;"	m	struct:clusterNode	access:public
fail_time	cluster.h	/^    mstime_t fail_time;      \/* Unix time when FAIL flag was set *\/$/;"	m	struct:clusterNode	access:public
failover_auth_count	cluster.h	/^    int failover_auth_count;    \/* Number of votes received so far. *\/$/;"	m	struct:clusterState	access:public
failover_auth_epoch	cluster.h	/^    uint64_t failover_auth_epoch; \/* Epoch of the current election. *\/$/;"	m	struct:clusterState	access:public
failover_auth_rank	cluster.h	/^    int failover_auth_rank;     \/* This slave rank for current auth request. *\/$/;"	m	struct:clusterState	access:public
failover_auth_sent	cluster.h	/^    int failover_auth_sent;     \/* True if we already asked for votes. *\/$/;"	m	struct:clusterState	access:public
failover_auth_time	cluster.h	/^    mstime_t failover_auth_time; \/* Time of previous or next election. *\/$/;"	m	struct:clusterState	access:public
failover_delay_logged	sentinel.c	/^    mstime_t failover_delay_logged; \/* For what failover_start_time value we$/;"	m	struct:sentinelRedisInstance	file:	access:public
failover_epoch	sentinel.c	/^    uint64_t failover_epoch; \/* Epoch of the currently started failover. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
failover_start_time	sentinel.c	/^    mstime_t failover_start_time;   \/* Last failover attempt start time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
failover_state	sentinel.c	/^    int failover_state; \/* See SENTINEL_FAILOVER_STATE_* defines. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
failover_state_change_time	sentinel.c	/^    mstime_t failover_state_change_time;$/;"	m	struct:sentinelRedisInstance	file:	access:public
failover_timeout	sentinel.c	/^    mstime_t failover_timeout;      \/* Max time to refresh failover state. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
fd	ae.h	/^    int fd;$/;"	m	struct:aeFiredEvent	access:public
fd	cluster.c	/^    int fd;$/;"	m	struct:migrateCachedSocket	file:	access:public
fd	cluster.h	/^    int fd;                     \/* TCP socket file descriptor *\/$/;"	m	struct:clusterLink	access:public
fd	scripting.c	/^    int fd;     \/* Socket of the debugging client. *\/$/;"	m	struct:ldbState	file:	access:public
fd	sentinel.c	/^    int fd;$/;"	m	struct:redisAeEvents	file:	access:public
fd	server.h	/^    int fd;                 \/* Client socket. *\/$/;"	m	struct:client	access:public
fd	slots.c	/^    int fd;$/;"	m	struct:__anon28	file:	access:public
fds	rio.h	/^            int *fds;       \/* File descriptors. *\/$/;"	m	struct:_rio::__anon24::__anon27	access:public
fdset	rio.h	/^        } fdset;$/;"	m	union:_rio::__anon24	typeref:struct:_rio::__anon24::__anon27	access:public
feedAppendOnlyFile	aof.c	/^void feedAppendOnlyFile(struct redisCommand *cmd, int dictid, robj **argv, int argc) {$/;"	f	signature:(struct redisCommand *cmd, int dictid, robj **argv, int argc)
feedAppendOnlyFile	server.h	/^void feedAppendOnlyFile(struct redisCommand *cmd, int dictid, robj **argv, int argc);$/;"	p	signature:(struct redisCommand *cmd, int dictid, robj **argv, int argc)
feedReplicationBacklog	replication.c	/^void feedReplicationBacklog(void *ptr, size_t len) {$/;"	f	signature:(void *ptr, size_t len)
feedReplicationBacklogWithObject	replication.c	/^void feedReplicationBacklogWithObject(robj *o) {$/;"	f	signature:(robj *o)
file	rio.h	/^        } file;$/;"	m	union:_rio::__anon24	typeref:struct:_rio::__anon24::__anon26	access:public
fill	quicklist.h	/^    int fill : 16;              \/* fill factor for individual nodes *\/$/;"	m	struct:quicklist	access:public
finalizerProc	ae.h	/^    aeEventFinalizerProc *finalizerProc;$/;"	m	struct:aeTimeEvent	access:public
findBigKeys	redis-cli.c	/^static void findBigKeys(void) {$/;"	f	file:	signature:(void)
fingerprint	dict.h	/^    long long fingerprint;$/;"	m	struct:dictIterator	access:public
fired	ae.h	/^    aeFiredEvent *fired; \/* Fired events *\/$/;"	m	struct:aeEventLoop	access:public
firstkey	server.h	/^    int firstkey; \/* The first argument that's a key (0 = no keys) *\/$/;"	m	struct:redisCommand	access:public
fix_cluster_cmd	redis-trib.rb	/^    def fix_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
fix_open_slot	redis-trib.rb	/^    def fix_open_slot(slot)$/;"	f	class:RedisTrib
fix_slots_coverage	redis-trib.rb	/^    def fix_slots_coverage$/;"	f	class:RedisTrib
flag	cluster.c	/^    uint16_t flag;$/;"	m	struct:redisNodeFlags	file:	access:public
flagTransaction	multi.c	/^void flagTransaction(client *c) {$/;"	f	signature:(client *c)
flagTransaction	server.h	/^void flagTransaction(client *c);$/;"	p	signature:(client *c)
flags	cluster.h	/^    int flags;      \/* CLUSTER_NODE_... *\/$/;"	m	struct:clusterNode	access:public
flags	cluster.h	/^    uint16_t flags;             \/* node->flags copy *\/$/;"	m	struct:__anon1	access:public
flags	cluster.h	/^    uint16_t flags;     \/* Sender node flags *\/$/;"	m	struct:__anon9	access:public
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16	access:public
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32	access:public
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64	access:public
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8	access:public
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5	access:public
flags	sentinel.c	/^    int flags;              \/* Script job flags: SENTINEL_SCRIPT_* *\/$/;"	m	struct:sentinelScriptJob	file:	access:public
flags	sentinel.c	/^    int flags;      \/* See SRI_... defines *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
flags	server.h	/^    int flags;              \/* Client flags: CLIENT_* macros. *\/$/;"	m	struct:client	access:public
flags	server.h	/^    int flags;    \/* The actual flags, obtained from the 'sflags' field. *\/$/;"	m	struct:redisCommand	access:public
flags	t_zset.c	/^    int flags;$/;"	m	struct:__anon22	file:	access:public
flush	rio.h	/^    int (*flush)(struct _rio *);$/;"	m	struct:_rio	access:public
flushAppendOnlyFile	aof.c	/^void flushAppendOnlyFile(int force) {$/;"	f	signature:(int force)
flushAppendOnlyFile	server.h	/^void flushAppendOnlyFile(int force);$/;"	p	signature:(int force)
flushSlavesOutputBuffers	networking.c	/^void flushSlavesOutputBuffers(void) {$/;"	f	signature:(void)
flushSlavesOutputBuffers	server.h	/^void flushSlavesOutputBuffers(void);$/;"	p	signature:(void)
flush_node_config	redis-trib.rb	/^    def flush_node_config$/;"	f	class:ClusterNode
flush_nodes_config	redis-trib.rb	/^    def flush_nodes_config$/;"	f	class:RedisTrib.alloc_slots
flushallCommand	db.c	/^void flushallCommand(client *c) {$/;"	f	signature:(client *c)
flushallCommand	server.h	/^void flushallCommand(client *c);$/;"	p	signature:(client *c)
flushdbCommand	db.c	/^void flushdbCommand(client *c) {$/;"	f	signature:(client *c)
flushdbCommand	server.h	/^void flushdbCommand(client *c);$/;"	p	signature:(client *c)
forceCommandPropagation	server.c	/^void forceCommandPropagation(client *c, int flags) {$/;"	f	signature:(client *c, int flags)
forceCommandPropagation	server.h	/^void forceCommandPropagation(client *c, int flags);$/;"	p	signature:(client *c, int flags)
force_cancel_loop	redis-cli.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	file:
forked	scripting.c	/^    int forked; \/* Is this a fork()ed debugging session? *\/$/;"	m	struct:ldbState	file:	access:public
forward	server.h	/^        struct zskiplistNode *forward;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:struct:zskiplistNode::zskiplistLevel::zskiplistNode	access:public
fp	rio.h	/^            FILE *fp;$/;"	m	struct:_rio::__anon24::__anon26	access:public
fptr	server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon35	access:public
free	adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list	access:public
free	aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:	access:public
free	server.h	/^void free(void *ptr) __attribute__ ((deprecated));$/;"	p	signature:(void *ptr)
free	zmalloc.c	62;"	d	file:
free	zmalloc.c	67;"	d	file:
freeAllClients	redis-benchmark.c	/^static void freeAllClients(void) {$/;"	f	file:	signature:(void)
freeBatchedObjectIterator	slots_async.c	/^freeBatchedObjectIterator(batchedObjectIterator *it) {$/;"	f	file:	signature:(batchedObjectIterator *it)
freeClient	networking.c	/^void freeClient(client *c) {$/;"	f	signature:(client *c)
freeClient	redis-benchmark.c	/^static void freeClient(client c) {$/;"	f	file:	signature:(client c)
freeClient	server.h	/^void freeClient(client *c);$/;"	p	signature:(client *c)
freeClientArgv	networking.c	/^static void freeClientArgv(client *c) {$/;"	f	file:	signature:(client *c)
freeClientAsync	networking.c	/^void freeClientAsync(client *c) {$/;"	f	signature:(client *c)
freeClientAsync	server.h	/^void freeClientAsync(client *c);$/;"	p	signature:(client *c)
freeClientMultiState	multi.c	/^void freeClientMultiState(client *c) {$/;"	f	signature:(client *c)
freeClientMultiState	server.h	/^void freeClientMultiState(client *c);$/;"	p	signature:(client *c)
freeClientsInAsyncFreeQueue	networking.c	/^void freeClientsInAsyncFreeQueue(void) {$/;"	f	signature:(void)
freeClientsInAsyncFreeQueue	server.h	/^void freeClientsInAsyncFreeQueue(void);$/;"	p	signature:(void)
freeClusterLink	cluster.c	/^void freeClusterLink(clusterLink *link) {$/;"	f	signature:(clusterLink *link)
freeClusterNode	cluster.c	/^void freeClusterNode(clusterNode *n) {$/;"	f	signature:(clusterNode *n)
freeFakeClient	aof.c	/^void freeFakeClient(struct client *c) {$/;"	f	signature:(struct client *c)
freeFakeClientArgv	aof.c	/^void freeFakeClientArgv(struct client *c) {$/;"	f	signature:(struct client *c)
freeHashObject	object.c	/^void freeHashObject(robj *o) {$/;"	f	signature:(robj *o)
freeHashObject	server.h	/^void freeHashObject(robj *o);$/;"	p	signature:(robj *o)
freeHintsCallback	redis-cli.c	/^static void freeHintsCallback(void *ptr) {$/;"	f	file:	signature:(void *ptr)
freeLazyReleaseIterator	slots_async.c	/^freeLazyReleaseIterator(lazyReleaseIterator *it) {$/;"	f	file:	signature:(lazyReleaseIterator *it)
freeListObject	object.c	/^void freeListObject(robj *o) {$/;"	f	signature:(robj *o)
freeListObject	server.h	/^void freeListObject(robj *o);$/;"	p	signature:(robj *o)
freeMemoryIfNeeded	server.c	/^int freeMemoryIfNeeded(void) {$/;"	f	signature:(void)
freeMemoryIfNeeded	server.h	/^int freeMemoryIfNeeded(void);$/;"	p	signature:(void)
freePubsubPattern	pubsub.c	/^void freePubsubPattern(void *p) {$/;"	f	signature:(void *p)
freePubsubPattern	server.h	/^void freePubsubPattern(void *p);$/;"	p	signature:(void *p)
freeReplicationBacklog	replication.c	/^void freeReplicationBacklog(void) {$/;"	f	signature:(void)
freeSetObject	object.c	/^void freeSetObject(robj *o) {$/;"	f	signature:(robj *o)
freeSetObject	server.h	/^void freeSetObject(robj *o);$/;"	p	signature:(robj *o)
freeSingleObjectIterator	slots_async.c	/^freeSingleObjectIterator(singleObjectIterator *it) {$/;"	f	file:	signature:(singleObjectIterator *it)
freeSingleObjectIteratorVoid	slots_async.c	/^freeSingleObjectIteratorVoid(void *it) {$/;"	f	file:	signature:(void *it)
freeSparklineSequence	sparkline.c	/^void freeSparklineSequence(struct sequence *seq) {$/;"	f	signature:(struct sequence *seq)
freeSparklineSequence	sparkline.h	/^void freeSparklineSequence(struct sequence *seq);$/;"	p	signature:(struct sequence *seq)
freeStringObject	object.c	/^void freeStringObject(robj *o) {$/;"	f	signature:(robj *o)
freeStringObject	server.h	/^void freeStringObject(robj *o);$/;"	p	signature:(robj *o)
freeZsetObject	object.c	/^void freeZsetObject(robj *o) {$/;"	f	signature:(robj *o)
freeZsetObject	server.h	/^void freeZsetObject(robj *o);$/;"	p	signature:(robj *o)
friends	redis-trib.rb	/^    def friends$/;"	f	class:ClusterNode
full	redis-cli.c	/^    sds full;$/;"	m	struct:__anon38	file:	access:public
genClientPeerId	networking.c	/^void genClientPeerId(client *client, char *peerid,$/;"	f	signature:(client *client, char *peerid, size_t peerid_len)
genRedisInfoString	server.c	/^sds genRedisInfoString(char *section) {$/;"	f	signature:(char *section)
genRedisInfoString	server.h	/^sds genRedisInfoString(char *section);$/;"	p	signature:(char *section)
genericHgetallCommand	t_hash.c	/^void genericHgetallCommand(client *c, int flags) {$/;"	f	signature:(client *c, int flags)
genericZrangebylexCommand	t_zset.c	/^void genericZrangebylexCommand(client *c, int reverse) {$/;"	f	signature:(client *c, int reverse)
genericZrangebyscoreCommand	t_zset.c	/^void genericZrangebyscoreCommand(client *c, int reverse) {$/;"	f	signature:(client *c, int reverse)
genstr	quicklist.c	/^static char *genstr(char *prefix, int i) {$/;"	f	file:	signature:(char *prefix, int i)
geoAppendIfWithinRadius	geo.c	/^int geoAppendIfWithinRadius(geoArray *ga, double lon, double lat, double radius, double score, sds member) {$/;"	f	signature:(geoArray *ga, double lon, double lat, double radius, double score, sds member)
geoArray	geo.h	/^typedef struct geoArray {$/;"	s
geoArray	geo.h	/^} geoArray;$/;"	t	typeref:struct:geoArray
geoArray::array	geo.h	/^    struct geoPoint *array;$/;"	m	struct:geoArray	typeref:struct:geoArray::geoPoint	access:public
geoArray::buckets	geo.h	/^    size_t buckets;$/;"	m	struct:geoArray	access:public
geoArray::used	geo.h	/^    size_t used;$/;"	m	struct:geoArray	access:public
geoArrayAppend	geo.c	/^geoPoint *geoArrayAppend(geoArray *ga) {$/;"	f	signature:(geoArray *ga)
geoArrayCreate	geo.c	/^geoArray *geoArrayCreate(void) {$/;"	f	signature:(void)
geoArrayFree	geo.c	/^void geoArrayFree(geoArray *ga) {$/;"	f	signature:(geoArray *ga)
geoGetPointsInRange	geo.c	/^int geoGetPointsInRange(robj *zobj, double min, double max, double lon, double lat, double radius, geoArray *ga) {$/;"	f	signature:(robj *zobj, double min, double max, double lon, double lat, double radius, geoArray *ga)
geoPoint	geo.h	/^typedef struct geoPoint {$/;"	s
geoPoint	geo.h	/^} geoPoint;$/;"	t	typeref:struct:geoPoint
geoPoint::dist	geo.h	/^    double dist;$/;"	m	struct:geoPoint	access:public
geoPoint::latitude	geo.h	/^    double latitude;$/;"	m	struct:geoPoint	access:public
geoPoint::longitude	geo.h	/^    double longitude;$/;"	m	struct:geoPoint	access:public
geoPoint::member	geo.h	/^    char *member;$/;"	m	struct:geoPoint	access:public
geoPoint::score	geo.h	/^    double score;$/;"	m	struct:geoPoint	access:public
geoaddCommand	geo.c	/^void geoaddCommand(client *c) {$/;"	f	signature:(client *c)
geoaddCommand	server.h	/^void geoaddCommand(client *c);$/;"	p	signature:(client *c)
geodecodeCommand	server.h	/^void geodecodeCommand(client *c);$/;"	p	signature:(client *c)
geodistCommand	geo.c	/^void geodistCommand(client *c) {$/;"	f	signature:(client *c)
geodistCommand	server.h	/^void geodistCommand(client *c);$/;"	p	signature:(client *c)
geoencodeCommand	server.h	/^void geoencodeCommand(client *c);$/;"	p	signature:(client *c)
geohashCommand	geo.c	/^void geohashCommand(client *c) {$/;"	f	signature:(client *c)
geohashCommand	server.h	/^void geohashCommand(client *c);$/;"	p	signature:(client *c)
geoposCommand	geo.c	/^void geoposCommand(client *c) {$/;"	f	signature:(client *c)
geoposCommand	server.h	/^void geoposCommand(client *c);$/;"	p	signature:(client *c)
georadiusByMemberCommand	geo.c	/^void georadiusByMemberCommand(client *c) {$/;"	f	signature:(client *c)
georadiusByMemberCommand	server.h	/^void georadiusByMemberCommand(client *c);$/;"	p	signature:(client *c)
georadiusCommand	geo.c	/^void georadiusCommand(client *c) {$/;"	f	signature:(client *c)
georadiusCommand	server.h	/^void georadiusCommand(client *c);$/;"	p	signature:(client *c)
georadiusGeneric	geo.c	/^void georadiusGeneric(client *c, int type) {$/;"	f	signature:(client *c, int type)
getAbsolutePath	util.c	/^sds getAbsolutePath(char *filename) {$/;"	f	signature:(char *filename)
getAbsolutePath	util.h	/^sds getAbsolutePath(char *filename);$/;"	p	signature:(char *filename)
getAllClientsInfoString	networking.c	/^sds getAllClientsInfoString(void) {$/;"	f	signature:(void)
getAllClientsInfoString	server.h	/^sds getAllClientsInfoString(void);$/;"	p	signature:(void)
getBitOffsetFromArgument	bitops.c	/^int getBitOffsetFromArgument(client *c, robj *o, size_t *offset, int hash, int bits) {$/;"	f	signature:(client *c, robj *o, size_t *offset, int hash, int bits)
getBitfieldTypeFromArgument	bitops.c	/^int getBitfieldTypeFromArgument(client *c, robj *o, int *sign, int *bits) {$/;"	f	signature:(client *c, robj *o, int *sign, int *bits)
getClientOutputBufferMemoryUsage	networking.c	/^unsigned long getClientOutputBufferMemoryUsage(client *c) {$/;"	f	signature:(client *c)
getClientOutputBufferMemoryUsage	server.h	/^unsigned long getClientOutputBufferMemoryUsage(client *c);$/;"	p	signature:(client *c)
getClientPeerId	networking.c	/^char *getClientPeerId(client *c) {$/;"	f	signature:(client *c)
getClientPeerId	server.h	/^char *getClientPeerId(client *client);$/;"	p	signature:(client *client)
getClientType	networking.c	/^int getClientType(client *c) {$/;"	f	signature:(client *c)
getClientType	server.h	/^int getClientType(client *c);$/;"	p	signature:(client *c)
getClientTypeByName	networking.c	/^int getClientTypeByName(char *name) {$/;"	f	signature:(char *name)
getClientTypeByName	server.h	/^int getClientTypeByName(char *name);$/;"	p	signature:(char *name)
getClientTypeName	networking.c	/^char *getClientTypeName(int class) {$/;"	f	signature:(int class)
getClientTypeName	server.h	/^char *getClientTypeName(int class);$/;"	p	signature:(int class)
getClientsMaxBuffers	networking.c	/^void getClientsMaxBuffers(unsigned long *longest_output_list,$/;"	f	signature:(unsigned long *longest_output_list, unsigned long *biggest_input_buffer)
getClientsMaxBuffers	server.h	/^void getClientsMaxBuffers(unsigned long *longest_output_list,$/;"	p	signature:(unsigned long *longest_output_list, unsigned long *biggest_input_buffer)
getCommand	server.h	/^void getCommand(client *c);$/;"	p	signature:(client *c)
getCommand	t_string.c	/^void getCommand(client *c) {$/;"	f	signature:(client *c)
getDbSize	redis-cli.c	/^static int getDbSize(void) {$/;"	f	file:	signature:(void)
getDecodedObject	object.c	/^robj *getDecodedObject(robj *o) {$/;"	f	signature:(robj *o)
getDecodedObject	server.h	/^robj *getDecodedObject(robj *o);$/;"	p	signature:(robj *o)
getDotfilePath	redis-cli.c	/^static sds getDotfilePath(char *envoverride, char *dotfilename) {$/;"	f	file:	signature:(char *envoverride, char *dotfilename)
getDoubleFromObject	object.c	/^int getDoubleFromObject(robj *o, double *target) {$/;"	f	signature:(robj *o, double *target)
getDoubleFromObjectOrReply	object.c	/^int getDoubleFromObjectOrReply(client *c, robj *o, double *target, const char *msg) {$/;"	f	signature:(client *c, robj *o, double *target, const char *msg)
getDoubleFromObjectOrReply	server.h	/^int getDoubleFromObjectOrReply(client *c, robj *o, double *target, const char *msg);$/;"	p	signature:(client *c, robj *o, double *target, const char *msg)
getExpire	db.c	/^long long getExpire(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
getExpire	server.h	/^long long getExpire(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
getGenericCommand	t_string.c	/^int getGenericCommand(client *c) {$/;"	f	signature:(client *c)
getInfoField	redis-cli.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	file:	signature:(char *info, char *field)
getInstantaneousMetric	server.c	/^long long getInstantaneousMetric(int metric) {$/;"	f	signature:(int metric)
getKeySizes	redis-cli.c	/^static void getKeySizes(redisReply *keys, int *types,$/;"	f	file:	signature:(redisReply *keys, int *types, unsigned long long *sizes)
getKeyTypes	redis-cli.c	/^static void getKeyTypes(redisReply *keys, int *types) {$/;"	f	file:	signature:(redisReply *keys, int *types)
getKeysFreeResult	db.c	/^void getKeysFreeResult(int *result) {$/;"	f	signature:(int *result)
getKeysFreeResult	server.h	/^void getKeysFreeResult(int *result);$/;"	p	signature:(int *result)
getKeysFromCommand	db.c	/^int *getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
getKeysFromCommand	server.h	/^int *getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);$/;"	p	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
getKeysInSlot	db.c	/^unsigned int getKeysInSlot(unsigned int hashslot, robj **keys, unsigned int count) {$/;"	f	signature:(unsigned int hashslot, robj **keys, unsigned int count)
getKeysInSlot	server.h	/^unsigned int getKeysInSlot(unsigned int hashslot, robj **keys, unsigned int count);$/;"	p	signature:(unsigned int hashslot, robj **keys, unsigned int count)
getKeysUsingCommandTable	db.c	/^int *getKeysUsingCommandTable(struct redisCommand *cmd,robj **argv, int argc, int *numkeys) {$/;"	f	signature:(struct redisCommand *cmd,robj **argv, int argc, int *numkeys)
getLRUClock	server.c	/^unsigned int getLRUClock(void) {$/;"	f	signature:(void)
getLRUClock	server.h	/^unsigned int getLRUClock(void);$/;"	p	signature:(void)
getLongDoubleFromObject	object.c	/^int getLongDoubleFromObject(robj *o, long double *target) {$/;"	f	signature:(robj *o, long double *target)
getLongDoubleFromObject	server.h	/^int getLongDoubleFromObject(robj *o, long double *target);$/;"	p	signature:(robj *o, long double *target)
getLongDoubleFromObjectOrReply	object.c	/^int getLongDoubleFromObjectOrReply(client *c, robj *o, long double *target, const char *msg) {$/;"	f	signature:(client *c, robj *o, long double *target, const char *msg)
getLongDoubleFromObjectOrReply	server.h	/^int getLongDoubleFromObjectOrReply(client *c, robj *o, long double *target, const char *msg);$/;"	p	signature:(client *c, robj *o, long double *target, const char *msg)
getLongFromObjectOrReply	object.c	/^int getLongFromObjectOrReply(client *c, robj *o, long *target, const char *msg) {$/;"	f	signature:(client *c, robj *o, long *target, const char *msg)
getLongFromObjectOrReply	server.h	/^int getLongFromObjectOrReply(client *c, robj *o, long *target, const char *msg);$/;"	p	signature:(client *c, robj *o, long *target, const char *msg)
getLongInfoField	redis-cli.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	file:	signature:(char *info, char *field)
getLongLongFromObject	object.c	/^int getLongLongFromObject(robj *o, long long *target) {$/;"	f	signature:(robj *o, long long *target)
getLongLongFromObject	server.h	/^int getLongLongFromObject(robj *o, long long *target);$/;"	p	signature:(robj *o, long long *target)
getLongLongFromObjectOrReply	object.c	/^int getLongLongFromObjectOrReply(client *c, robj *o, long long *target, const char *msg) {$/;"	f	signature:(client *c, robj *o, long long *target, const char *msg)
getLongLongFromObjectOrReply	server.h	/^int getLongLongFromObjectOrReply(client *c, robj *o, long long *target, const char *msg);$/;"	p	signature:(client *c, robj *o, long long *target, const char *msg)
getMcontextEip	debug.c	/^static void *getMcontextEip(ucontext_t *uc) {$/;"	f	file:	signature:(ucontext_t *uc)
getNodeByQuery	cluster.c	/^clusterNode *getNodeByQuery(client *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *error_code) {$/;"	f	signature:(client *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *error_code)
getNodeByQuery	cluster.h	/^clusterNode *getNodeByQuery(client *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *ask);$/;"	p	signature:(client *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *ask)
getObjectReadOnlyString	bitops.c	/^unsigned char *getObjectReadOnlyString(robj *o, long *len, char *llbuf) {$/;"	f	signature:(robj *o, long *len, char *llbuf)
getOrCreateSlotsmgrtAsyncClient	slots_async.c	/^getOrCreateSlotsmgrtAsyncClient(int db, char *host, int port, long timeout) {$/;"	f	file:	signature:(int db, char *host, int port, long timeout)
getPsyncInitialOffset	replication.c	/^long long getPsyncInitialOffset(void) {$/;"	f	signature:(void)
getPsyncInitialOffset	server.h	/^long long getPsyncInitialOffset(void);$/;"	p	signature:(void)
getRDB	redis-cli.c	/^static void getRDB(void) {$/;"	f	file:	signature:(void)
getRandomHexChars	server.h	/^void getRandomHexChars(char *p, unsigned int len);$/;"	p	signature:(char *p, unsigned int len)
getRandomHexChars	util.c	/^void getRandomHexChars(char *p, unsigned int len) {$/;"	f	signature:(char *p, unsigned int len)
getSentinelRedisInstanceByAddrAndRunID	sentinel.c	/^sentinelRedisInstance *getSentinelRedisInstanceByAddrAndRunID(dict *instances, char *ip, int port, char *runid) {$/;"	f	signature:(dict *instances, char *ip, int port, char *runid)
getSentinelRedisInstanceByAddrAndRunID	sentinel.c	/^sentinelRedisInstance *getSentinelRedisInstanceByAddrAndRunID(dict *instances, char *ip, int port, char *runid);$/;"	p	file:	signature:(dict *instances, char *ip, int port, char *runid)
getSignedBitfield	bitops.c	/^int64_t getSignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits) {$/;"	f	signature:(unsigned char *p, uint64_t offset, uint64_t bits)
getSlotOrReply	cluster.c	/^int getSlotOrReply(client *c, robj *o) {$/;"	f	signature:(client *c, robj *o)
getSlotsmgrtAsyncClient	slots_async.c	/^getSlotsmgrtAsyncClient(int db) {$/;"	f	file:	signature:(int db)
getSlotsmgrtAsyncClient	slots_async.c	/^static slotsmgrtAsyncClient *getSlotsmgrtAsyncClient(int db);$/;"	p	file:	signature:(int db)
getSlotsmgrtAsyncClientMigrationStatusOrBlock	slots_async.c	/^getSlotsmgrtAsyncClientMigrationStatusOrBlock(client *c, robj *key, int block) {$/;"	f	file:	signature:(client *c, robj *key, int block)
getStringObjectSdsUsedMemory	networking.c	/^size_t getStringObjectSdsUsedMemory(robj *o) {$/;"	f	signature:(robj *o)
getTimeoutFromObjectOrReply	blocked.c	/^int getTimeoutFromObjectOrReply(client *c, robj *object, mstime_t *timeout, int unit) {$/;"	f	signature:(client *c, robj *object, mstime_t *timeout, int unit)
getTimeoutFromObjectOrReply	server.h	/^int getTimeoutFromObjectOrReply(client *c, robj *object, mstime_t *timeout, int unit);$/;"	p	signature:(client *c, robj *object, mstime_t *timeout, int unit)
getUint64FromRawStringObject	slots_async.c	/^getUint64FromRawStringObject(robj *o, uint64_t *p) {$/;"	f	file:	signature:(robj *o, uint64_t *p)
getUnsignedBitfield	bitops.c	/^uint64_t getUnsignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits) {$/;"	f	signature:(unsigned char *p, uint64_t offset, uint64_t bits)
get_ack_from_slaves	server.h	/^    int get_ack_from_slaves;            \/* If true we send REPLCONF GETACK. *\/$/;"	m	struct:redisServer	access:public
get_config_signature	redis-trib.rb	/^    def get_config_signature$/;"	f	class:ClusterNode
get_master_with_least_replicas	redis-trib.rb	/^    def get_master_with_least_replicas$/;"	f	class:RedisTrib
get_node_by_abbreviated_name	redis-trib.rb	/^    def get_node_by_abbreviated_name(name)$/;"	f	class:RedisTrib
get_node_by_name	redis-trib.rb	/^    def get_node_by_name(name)$/;"	f	class:RedisTrib
get_node_with_most_keys_in_slot	redis-trib.rb	/^    def get_node_with_most_keys_in_slot(nodes,slot)$/;"	f	class:RedisTrib
get_slot_owners	redis-trib.rb	/^    def get_slot_owners(slot)$/;"	f	class:RedisTrib
getbitCommand	bitops.c	/^void getbitCommand(client *c) {$/;"	f	signature:(client *c)
getbitCommand	server.h	/^void getbitCommand(client *c);$/;"	p	signature:(client *c)
getkeys_proc	server.h	/^    redisGetKeysProc *getkeys_proc;$/;"	m	struct:redisCommand	access:public
getrangeCommand	server.h	/^void getrangeCommand(client *c);$/;"	p	signature:(client *c)
getrangeCommand	t_string.c	/^void getrangeCommand(client *c) {$/;"	f	signature:(client *c)
getrdb_mode	redis-cli.c	/^    int getrdb_mode;$/;"	m	struct:config	file:	access:public
getsetCommand	server.h	/^void getsetCommand(client *c);$/;"	p	signature:(client *c)
getsetCommand	t_string.c	/^void getsetCommand(client *c) {$/;"	f	signature:(client *c)
gossip	cluster.h	/^        clusterMsgDataGossip gossip[1];$/;"	m	struct:clusterMsgData::__anon5	access:public
group	help.h	/^  int group;$/;"	m	struct:commandHelp	access:public
handleClientsBlockedOnLists	server.h	/^void handleClientsBlockedOnLists(void);$/;"	p	signature:(void)
handleClientsBlockedOnLists	t_list.c	/^void handleClientsBlockedOnLists(void) {$/;"	f	signature:(void)
handleClientsWithPendingWrites	networking.c	/^int handleClientsWithPendingWrites(void) {$/;"	f	signature:(void)
handleClientsWithPendingWrites	server.h	/^int handleClientsWithPendingWrites(void);$/;"	p	signature:(void)
handleLinkIOError	cluster.c	/^void handleLinkIOError(clusterLink *link) {$/;"	f	signature:(clusterLink *link)
hard_limit_bytes	server.h	/^    unsigned long long hard_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig	access:public
has_flag?	redis-trib.rb	/^    def has_flag?(flag)$/;"	f	class:ClusterNode
hashDictType	server.c	/^dictType hashDictType = {$/;"	v
hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType	access:public
hashSlotType	server.c	/^dictType hashSlotType = {$/;"	v
hashTypeConvert	server.h	/^void hashTypeConvert(robj *o, int enc);$/;"	p	signature:(robj *o, int enc)
hashTypeConvert	t_hash.c	/^void hashTypeConvert(robj *o, int enc) {$/;"	f	signature:(robj *o, int enc)
hashTypeConvertZiplist	t_hash.c	/^void hashTypeConvertZiplist(robj *o, int enc) {$/;"	f	signature:(robj *o, int enc)
hashTypeCurrentFromHashTable	server.h	/^void hashTypeCurrentFromHashTable(hashTypeIterator *hi, int what, robj **dst);$/;"	p	signature:(hashTypeIterator *hi, int what, robj **dst)
hashTypeCurrentFromHashTable	t_hash.c	/^void hashTypeCurrentFromHashTable(hashTypeIterator *hi, int what, robj **dst) {$/;"	f	signature:(hashTypeIterator *hi, int what, robj **dst)
hashTypeCurrentFromZiplist	server.h	/^void hashTypeCurrentFromZiplist(hashTypeIterator *hi, int what,$/;"	p	signature:(hashTypeIterator *hi, int what, unsigned char **vstr, unsigned int *vlen, long long *vll)
hashTypeCurrentFromZiplist	t_hash.c	/^void hashTypeCurrentFromZiplist(hashTypeIterator *hi, int what,$/;"	f	signature:(hashTypeIterator *hi, int what, unsigned char **vstr, unsigned int *vlen, long long *vll)
hashTypeCurrentObject	server.h	/^robj *hashTypeCurrentObject(hashTypeIterator *hi, int what);$/;"	p	signature:(hashTypeIterator *hi, int what)
hashTypeCurrentObject	t_hash.c	/^robj *hashTypeCurrentObject(hashTypeIterator *hi, int what) {$/;"	f	signature:(hashTypeIterator *hi, int what)
hashTypeDelete	server.h	/^int hashTypeDelete(robj *o, robj *key);$/;"	p	signature:(robj *o, robj *key)
hashTypeDelete	t_hash.c	/^int hashTypeDelete(robj *o, robj *field) {$/;"	f	signature:(robj *o, robj *field)
hashTypeExists	server.h	/^int hashTypeExists(robj *o, robj *key);$/;"	p	signature:(robj *o, robj *key)
hashTypeExists	t_hash.c	/^int hashTypeExists(robj *o, robj *field) {$/;"	f	signature:(robj *o, robj *field)
hashTypeGetFromHashTable	t_hash.c	/^int hashTypeGetFromHashTable(robj *o, robj *field, robj **value) {$/;"	f	signature:(robj *o, robj *field, robj **value)
hashTypeGetFromZiplist	t_hash.c	/^int hashTypeGetFromZiplist(robj *o, robj *field,$/;"	f	signature:(robj *o, robj *field, unsigned char **vstr, unsigned int *vlen, long long *vll)
hashTypeGetObject	server.h	/^robj *hashTypeGetObject(robj *o, robj *key);$/;"	p	signature:(robj *o, robj *key)
hashTypeGetObject	t_hash.c	/^robj *hashTypeGetObject(robj *o, robj *field) {$/;"	f	signature:(robj *o, robj *field)
hashTypeGetValueLength	t_hash.c	/^size_t hashTypeGetValueLength(robj *o, robj *field) {$/;"	f	signature:(robj *o, robj *field)
hashTypeInitIterator	server.h	/^hashTypeIterator *hashTypeInitIterator(robj *subject);$/;"	p	signature:(robj *subject)
hashTypeInitIterator	t_hash.c	/^hashTypeIterator *hashTypeInitIterator(robj *subject) {$/;"	f	signature:(robj *subject)
hashTypeIterator	server.h	/^} hashTypeIterator;$/;"	t	typeref:struct:__anon35
hashTypeLength	server.h	/^unsigned long hashTypeLength(robj *o);$/;"	p	signature:(robj *o)
hashTypeLength	t_hash.c	/^unsigned long hashTypeLength(robj *o) {$/;"	f	signature:(robj *o)
hashTypeLookupWriteOrCreate	server.h	/^robj *hashTypeLookupWriteOrCreate(client *c, robj *key);$/;"	p	signature:(client *c, robj *key)
hashTypeLookupWriteOrCreate	t_hash.c	/^robj *hashTypeLookupWriteOrCreate(client *c, robj *key) {$/;"	f	signature:(client *c, robj *key)
hashTypeNext	server.h	/^int hashTypeNext(hashTypeIterator *hi);$/;"	p	signature:(hashTypeIterator *hi)
hashTypeNext	t_hash.c	/^int hashTypeNext(hashTypeIterator *hi) {$/;"	f	signature:(hashTypeIterator *hi)
hashTypeReleaseIterator	server.h	/^void hashTypeReleaseIterator(hashTypeIterator *hi);$/;"	p	signature:(hashTypeIterator *hi)
hashTypeReleaseIterator	t_hash.c	/^void hashTypeReleaseIterator(hashTypeIterator *hi) {$/;"	f	signature:(hashTypeIterator *hi)
hashTypeSet	server.h	/^int hashTypeSet(robj *o, robj *key, robj *value);$/;"	p	signature:(robj *o, robj *key, robj *value)
hashTypeSet	t_hash.c	/^int hashTypeSet(robj *o, robj *field, robj *value) {$/;"	f	signature:(robj *o, robj *field, robj *value)
hashTypeTryConversion	server.h	/^void hashTypeTryConversion(robj *subject, robj **argv, int start, int end);$/;"	p	signature:(robj *subject, robj **argv, int start, int end)
hashTypeTryConversion	t_hash.c	/^void hashTypeTryConversion(robj *o, robj **argv, int start, int end) {$/;"	f	signature:(robj *o, robj **argv, int start, int end)
hashTypeTryObjectEncoding	server.h	/^void hashTypeTryObjectEncoding(robj *subject, robj **o1, robj **o2);$/;"	p	signature:(robj *subject, robj **o1, robj **o2)
hashTypeTryObjectEncoding	t_hash.c	/^void hashTypeTryObjectEncoding(robj *subject, robj **o1, robj **o2) {$/;"	f	signature:(robj *subject, robj **o1, robj **o2)
hash_max_ziplist_entries	server.h	/^    size_t hash_max_ziplist_entries;$/;"	m	struct:redisServer	access:public
hash_max_ziplist_value	server.h	/^    size_t hash_max_ziplist_value;$/;"	m	struct:redisServer	access:public
hash_slot	slots_async.c	/^    dict *hash_slot;$/;"	m	struct:__anon13	file:	access:public
hash_slots	server.h	/^    dict *hash_slots[HASH_SLOTS_SIZE];$/;"	m	struct:redisDb	access:public
hash_slots_rehashing	server.h	/^    int hash_slots_rehashing;$/;"	m	struct:redisDb	access:public
hash_tags	slots_async.c	/^    struct zskiplist *hash_tags;$/;"	m	struct:__anon13	typeref:struct:__anon13::zskiplist	file:	access:public
hdelCommand	server.h	/^void hdelCommand(client *c);$/;"	p	signature:(client *c)
hdelCommand	t_hash.c	/^void hdelCommand(client *c) {$/;"	f	signature:(client *c)
head	adlist.h	/^    listNode *head;$/;"	m	struct:list	access:public
head	quicklist.h	/^    quicklistNode *head;$/;"	m	struct:quicklist	access:public
header	server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::zskiplistNode	access:public
headersize	ziplist.c	/^    unsigned int headersize;$/;"	m	struct:zlentry	file:	access:public
helpEntries	redis-cli.c	/^static helpEntry *helpEntries;$/;"	v	file:
helpEntriesLen	redis-cli.c	/^static int helpEntriesLen;$/;"	v	file:
helpEntry	redis-cli.c	/^} helpEntry;$/;"	t	typeref:struct:__anon38	file:
help_cluster_cmd	redis-trib.rb	/^    def help_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
hex_digit_to_int	sds.c	/^int hex_digit_to_int(char c) {$/;"	f	signature:(char c)
hexistsCommand	server.h	/^void hexistsCommand(client *c);$/;"	p	signature:(client *c)
hexistsCommand	t_hash.c	/^void hexistsCommand(client *c) {$/;"	f	signature:(client *c)
hgetCommand	server.h	/^void hgetCommand(client *c);$/;"	p	signature:(client *c)
hgetCommand	t_hash.c	/^void hgetCommand(client *c) {$/;"	f	signature:(client *c)
hgetallCommand	server.h	/^void hgetallCommand(client *c);$/;"	p	signature:(client *c)
hgetallCommand	t_hash.c	/^void hgetallCommand(client *c) {$/;"	f	signature:(client *c)
hincrbyCommand	server.h	/^void hincrbyCommand(client *c);$/;"	p	signature:(client *c)
hincrbyCommand	t_hash.c	/^void hincrbyCommand(client *c) {$/;"	f	signature:(client *c)
hincrbyfloatCommand	server.h	/^void hincrbyfloatCommand(client *c);$/;"	p	signature:(client *c)
hincrbyfloatCommand	t_hash.c	/^void hincrbyfloatCommand(client *c) {$/;"	f	signature:(client *c)
hints	redis-cli.c	/^    int hints;$/;"	m	struct:pref	file:	access:public
hintsCallback	redis-cli.c	/^static char *hintsCallback(const char *buf, int *color, int *bold) {$/;"	f	file:	signature:(const char *buf, int *color, int *bold)
hkeysCommand	server.h	/^void hkeysCommand(client *c);$/;"	p	signature:(client *c)
hkeysCommand	t_hash.c	/^void hkeysCommand(client *c) {$/;"	f	signature:(client *c)
hlenCommand	server.h	/^void hlenCommand(client *c);$/;"	p	signature:(client *c)
hlenCommand	t_hash.c	/^void hlenCommand(client *c) {$/;"	f	signature:(client *c)
hllAdd	hyperloglog.c	/^int hllAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f	signature:(robj *o, unsigned char *ele, size_t elesize)
hllCount	hyperloglog.c	/^uint64_t hllCount(struct hllhdr *hdr, int *invalid) {$/;"	f	signature:(struct hllhdr *hdr, int *invalid)
hllDenseAdd	hyperloglog.c	/^int hllDenseAdd(uint8_t *registers, unsigned char *ele, size_t elesize) {$/;"	f	signature:(uint8_t *registers, unsigned char *ele, size_t elesize)
hllDenseSum	hyperloglog.c	/^double hllDenseSum(uint8_t *registers, double *PE, int *ezp) {$/;"	f	signature:(uint8_t *registers, double *PE, int *ezp)
hllMerge	hyperloglog.c	/^int hllMerge(uint8_t *max, robj *hll) {$/;"	f	signature:(uint8_t *max, robj *hll)
hllPatLen	hyperloglog.c	/^int hllPatLen(unsigned char *ele, size_t elesize, long *regp) {$/;"	f	signature:(unsigned char *ele, size_t elesize, long *regp)
hllRawSum	hyperloglog.c	/^double hllRawSum(uint8_t *registers, double *PE, int *ezp) {$/;"	f	signature:(uint8_t *registers, double *PE, int *ezp)
hllSparseAdd	hyperloglog.c	/^int hllSparseAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f	signature:(robj *o, unsigned char *ele, size_t elesize)
hllSparseSum	hyperloglog.c	/^double hllSparseSum(uint8_t *sparse, int sparselen, double *PE, int *ezp, int *invalid) {$/;"	f	signature:(uint8_t *sparse, int sparselen, double *PE, int *ezp, int *invalid)
hllSparseToDense	hyperloglog.c	/^int hllSparseToDense(robj *o) {$/;"	f	signature:(robj *o)
hll_sparse_max_bytes	server.h	/^    size_t hll_sparse_max_bytes;$/;"	m	struct:redisServer	access:public
hllhdr	hyperloglog.c	/^struct hllhdr {$/;"	s	file:
hllhdr::card	hyperloglog.c	/^    uint8_t card[8];    \/* Cached cardinality, little endian. *\/$/;"	m	struct:hllhdr	file:	access:public
hllhdr::encoding	hyperloglog.c	/^    uint8_t encoding;   \/* HLL_DENSE or HLL_SPARSE. *\/$/;"	m	struct:hllhdr	file:	access:public
hllhdr::magic	hyperloglog.c	/^    char magic[4];      \/* "HYLL" *\/$/;"	m	struct:hllhdr	file:	access:public
hllhdr::notused	hyperloglog.c	/^    uint8_t notused[3]; \/* Reserved for future use, must be zero. *\/$/;"	m	struct:hllhdr	file:	access:public
hllhdr::registers	hyperloglog.c	/^    uint8_t registers[]; \/* Data bytes. *\/$/;"	m	struct:hllhdr	file:	access:public
hmgetCommand	server.h	/^void hmgetCommand(client *c);$/;"	p	signature:(client *c)
hmgetCommand	t_hash.c	/^void hmgetCommand(client *c) {$/;"	f	signature:(client *c)
hmsetCommand	server.h	/^void hmsetCommand(client *c);$/;"	p	signature:(client *c)
hmsetCommand	t_hash.c	/^void hmsetCommand(client *c) {$/;"	f	signature:(client *c)
host	server.h	/^    sds host;$/;"	m	struct:__anon29	access:public
hostip	redis-benchmark.c	/^    const char *hostip;$/;"	m	struct:config	file:	access:public
hostip	redis-cli.c	/^    char *hostip;$/;"	m	struct:config	file:	access:public
hostport	redis-benchmark.c	/^    int hostport;$/;"	m	struct:config	file:	access:public
hostport	redis-cli.c	/^    int hostport;$/;"	m	struct:config	file:	access:public
hostsocket	redis-benchmark.c	/^    const char *hostsocket;$/;"	m	struct:config	file:	access:public
hostsocket	redis-cli.c	/^    char *hostsocket;$/;"	m	struct:config	file:	access:public
hscanCommand	server.h	/^void hscanCommand(client *c);$/;"	p	signature:(client *c)
hscanCommand	t_hash.c	/^void hscanCommand(client *c) {$/;"	f	signature:(client *c)
hsetCommand	server.h	/^void hsetCommand(client *c);$/;"	p	signature:(client *c)
hsetCommand	t_hash.c	/^void hsetCommand(client *c) {$/;"	f	signature:(client *c)
hsetnxCommand	server.h	/^void hsetnxCommand(client *c);$/;"	p	signature:(client *c)
hsetnxCommand	t_hash.c	/^void hsetnxCommand(client *c) {$/;"	f	signature:(client *c)
hstrlenCommand	server.h	/^void hstrlenCommand(client *c);$/;"	p	signature:(client *c)
hstrlenCommand	t_hash.c	/^void hstrlenCommand(client *c) {$/;"	f	signature:(client *c)
ht	dict.h	/^    dictht ht[2];$/;"	m	struct:dict	access:public
ht	t_zset.c	/^            } ht;$/;"	m	union:__anon16::__anon17::_iterset	typeref:struct:__anon16::__anon17::_iterset::__anon19	file:	access:public
htNeedsResize	server.c	/^int htNeedsResize(dict *dict) {$/;"	f	signature:(dict *dict)
htNeedsResize	server.h	/^int htNeedsResize(dict *dict);$/;"	p	signature:(dict *dict)
htonu64	endianconv.h	67;"	d
htonu64	endianconv.h	70;"	d
hvalsCommand	server.h	/^void hvalsCommand(client *c);$/;"	p	signature:(client *c)
hvalsCommand	t_hash.c	/^void hvalsCommand(client *c) {$/;"	f	signature:(client *c)
hz	server.h	/^    int hz;                     \/* serverCron() calls frequency in hertz *\/$/;"	m	struct:redisServer	access:public
hz	server.h	720;"	d
i64	bitops.c	/^    int64_t i64;        \/* Increment amount (INCRBY) or SET value *\/$/;"	m	struct:bitfieldOp	file:	access:public
id	ae.h	/^    long long id; \/* time event identifier. *\/$/;"	m	struct:aeTimeEvent	access:public
id	server.h	/^    int id;                     \/* Database ID *\/$/;"	m	struct:redisDb	access:public
id	server.h	/^    uint64_t id;            \/* Client incremental unique ID. *\/$/;"	m	struct:client	access:public
id	slowlog.h	/^    long long id;       \/* Unique entry identifier. *\/$/;"	m	struct:slowlogEntry	access:public
idle	server.h	/^    unsigned long long idle;    \/* Object idle time. *\/$/;"	m	struct:evictionPoolEntry	access:public
idlemode	redis-benchmark.c	/^    int idlemode;$/;"	m	struct:config	file:	access:public
idx	latency.h	/^    int idx; \/* Index of the next sample to store. *\/$/;"	m	struct:latencyTimeSeries	access:public
idx	server.h	/^        int idx;$/;"	m	struct:redisServer::__anon30	access:public
ii	server.h	/^    int ii; \/* intset iterator *\/$/;"	m	struct:__anon34	access:public
ii	t_zset.c	/^                int ii;$/;"	m	struct:__anon16::__anon17::_iterset::__anon18	file:	access:public
import_cluster_cmd	redis-trib.rb	/^    def import_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
importing_slots_from	cluster.h	/^    clusterNode *importing_slots_from[CLUSTER_SLOTS];$/;"	m	struct:clusterState	access:public
incrCommand	server.h	/^void incrCommand(client *c);$/;"	p	signature:(client *c)
incrCommand	t_string.c	/^void incrCommand(client *c) {$/;"	f	signature:(client *c)
incrDecrCommand	t_string.c	/^void incrDecrCommand(client *c, long long incr) {$/;"	f	signature:(client *c, long long incr)
incrRefCount	object.c	/^void incrRefCount(robj *o) {$/;"	f	signature:(robj *o)
incrRefCount	server.h	/^void incrRefCount(robj *o);$/;"	p	signature:(robj *o)
incrbyCommand	server.h	/^void incrbyCommand(client *c);$/;"	p	signature:(client *c)
incrbyCommand	t_string.c	/^void incrbyCommand(client *c) {$/;"	f	signature:(client *c)
incrbyfloatCommand	server.h	/^void incrbyfloatCommand(client *c);$/;"	p	signature:(client *c)
incrbyfloatCommand	t_string.c	/^void incrbyfloatCommand(client *c) {$/;"	f	signature:(client *c)
incrementallyRehash	server.c	/^int incrementallyRehash(int dbid) {$/;"	f	signature:(int dbid)
index	dict.h	/^    long index;$/;"	m	struct:dictIterator	access:public
info	redis-trib.rb	/^    def info$/;"	f	class:ClusterNode
info	sentinel.c	/^    sds info; \/* cached INFO output *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
infoCommand	server.c	/^void infoCommand(client *c) {$/;"	f	signature:(client *c)
infoCommand	server.h	/^void infoCommand(client *c);$/;"	p	signature:(client *c)
info_cluster_cmd	redis-trib.rb	/^    def info_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
info_refresh	sentinel.c	/^    mstime_t info_refresh;  \/* Time at which we received INFO output from it. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
info_section_from_redis	sentinel.c	3200;"	d	file:
info_string	redis-trib.rb	/^    def info_string$/;"	f	class:ClusterNode
initClientMultiState	multi.c	/^void initClientMultiState(client *c) {$/;"	f	signature:(client *c)
initClientMultiState	server.h	/^void initClientMultiState(client *c);$/;"	p	signature:(client *c)
initEntry	quicklist.c	74;"	d	file:
initSentinel	sentinel.c	/^void initSentinel(void) {$/;"	f	signature:(void)
initSentinel	server.h	/^void initSentinel(void);$/;"	p	signature:(void)
initSentinelConfig	sentinel.c	/^void initSentinelConfig(void) {$/;"	f	signature:(void)
initSentinelConfig	server.h	/^void initSentinelConfig(void);$/;"	p	signature:(void)
initServer	server.c	/^void initServer(void) {$/;"	f	signature:(void)
initServerConfig	server.c	/^void initServerConfig(void) {$/;"	f	signature:(void)
initStaticStringObject	server.h	484;"	d
initialize	redis-trib.rb	/^    def initialize$/;"	f	class:RedisTrib
initialize	redis-trib.rb	/^    def initialize(addr)$/;"	f	class:ClusterNode
inline	lzf_c.c	80;"	d	file:
inline	lzf_c.c	83;"	d	file:
inputCatSds	debug.c	/^void inputCatSds(void *result, const char *str) {$/;"	f	signature:(void *result, const char *str)
inst_metric	server.h	/^    } inst_metric[STATS_METRIC_COUNT];$/;"	m	struct:redisServer	typeref:struct:redisServer::__anon30	access:public
instanceLink	sentinel.c	/^typedef struct instanceLink {$/;"	s	file:
instanceLink	sentinel.c	/^} instanceLink;$/;"	t	typeref:struct:instanceLink	file:
instanceLink::act_ping_time	sentinel.c	/^    mstime_t act_ping_time;   \/* Time at which the last pending ping (no pong$/;"	m	struct:instanceLink	file:	access:public
instanceLink::cc	sentinel.c	/^    redisAsyncContext *cc; \/* Hiredis context for commands. *\/$/;"	m	struct:instanceLink	file:	access:public
instanceLink::cc_conn_time	sentinel.c	/^    mstime_t cc_conn_time; \/* cc connection time. *\/$/;"	m	struct:instanceLink	file:	access:public
instanceLink::disconnected	sentinel.c	/^    int disconnected;      \/* Non-zero if we need to reconnect cc or pc. *\/$/;"	m	struct:instanceLink	file:	access:public
instanceLink::last_avail_time	sentinel.c	/^    mstime_t last_avail_time; \/* Last time the instance replied to ping with$/;"	m	struct:instanceLink	file:	access:public
instanceLink::last_ping_time	sentinel.c	/^    mstime_t last_ping_time;  \/* Time at which we sent the last ping. This is$/;"	m	struct:instanceLink	file:	access:public
instanceLink::last_pong_time	sentinel.c	/^    mstime_t last_pong_time;  \/* Last time the instance replied to ping,$/;"	m	struct:instanceLink	file:	access:public
instanceLink::last_reconn_time	sentinel.c	/^    mstime_t last_reconn_time;  \/* Last reconnection attempt performed when$/;"	m	struct:instanceLink	file:	access:public
instanceLink::pc	sentinel.c	/^    redisAsyncContext *pc; \/* Hiredis context for Pub \/ Sub. *\/$/;"	m	struct:instanceLink	file:	access:public
instanceLink::pc_conn_time	sentinel.c	/^    mstime_t pc_conn_time; \/* pc connection time. *\/$/;"	m	struct:instanceLink	file:	access:public
instanceLink::pc_last_activity	sentinel.c	/^    mstime_t pc_last_activity; \/* Last time we received any message. *\/$/;"	m	struct:instanceLink	file:	access:public
instanceLink::pending_commands	sentinel.c	/^    int pending_commands;  \/* Number of commands sent waiting for a reply. *\/$/;"	m	struct:instanceLink	file:	access:public
instanceLink::refcount	sentinel.c	/^    int refcount;          \/* Number of sentinelRedisInstance owners. *\/$/;"	m	struct:instanceLink	file:	access:public
instanceLinkCloseConnection	sentinel.c	/^void instanceLinkCloseConnection(instanceLink *link, redisAsyncContext *c) {$/;"	f	signature:(instanceLink *link, redisAsyncContext *c)
instanceLinkConnectionError	sentinel.c	/^void instanceLinkConnectionError(const redisAsyncContext *c) {$/;"	f	signature:(const redisAsyncContext *c)
instanceLinkConnectionError	sentinel.c	/^void instanceLinkConnectionError(const redisAsyncContext *c);$/;"	p	file:	signature:(const redisAsyncContext *c)
instancesDictType	sentinel.c	/^dictType instancesDictType = {$/;"	v
integers	server.h	/^    *integers[OBJ_SHARED_INTEGERS],$/;"	m	struct:sharedObjectsStruct	access:public
interactive	redis-cli.c	/^    int interactive;$/;"	m	struct:config	file:	access:public
interval	redis-cli.c	/^    long interval;$/;"	m	struct:config	file:	access:public
intrev16	endianconv.c	/^uint16_t intrev16(uint16_t v) {$/;"	f	signature:(uint16_t v)
intrev16	endianconv.h	/^uint16_t intrev16(uint16_t v);$/;"	p	signature:(uint16_t v)
intrev16ifbe	endianconv.h	52;"	d
intrev16ifbe	endianconv.h	59;"	d
intrev32	endianconv.c	/^uint32_t intrev32(uint32_t v) {$/;"	f	signature:(uint32_t v)
intrev32	endianconv.h	/^uint32_t intrev32(uint32_t v);$/;"	p	signature:(uint32_t v)
intrev32ifbe	endianconv.h	53;"	d
intrev32ifbe	endianconv.h	60;"	d
intrev64	endianconv.c	/^uint64_t intrev64(uint64_t v) {$/;"	f	signature:(uint64_t v)
intrev64	endianconv.h	/^uint64_t intrev64(uint64_t v);$/;"	p	signature:(uint64_t v)
intrev64ifbe	endianconv.h	54;"	d
intrev64ifbe	endianconv.h	61;"	d
intrinsicLatencyMode	redis-cli.c	/^static void intrinsicLatencyMode(void) {$/;"	f	file:	signature:(void)
intrinsicLatencyModeStop	redis-cli.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	file:	signature:(int s)
intrinsic_latency_duration	redis-cli.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:	access:public
intrinsic_latency_mode	redis-cli.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:	access:public
intset	intset.h	/^typedef struct intset {$/;"	s
intset	intset.h	/^} intset;$/;"	t	typeref:struct:intset
intset::contents	intset.h	/^    int8_t contents[];$/;"	m	struct:intset	access:public
intset::encoding	intset.h	/^    uint32_t encoding;$/;"	m	struct:intset	access:public
intset::length	intset.h	/^    uint32_t length;$/;"	m	struct:intset	access:public
intsetAdd	intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f	signature:(intset *is, int64_t value, uint8_t *success)
intsetAdd	intset.h	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success);$/;"	p	signature:(intset *is, int64_t value, uint8_t *success)
intsetBlobLen	intset.c	/^size_t intsetBlobLen(intset *is) {$/;"	f	signature:(intset *is)
intsetBlobLen	intset.h	/^size_t intsetBlobLen(intset *is);$/;"	p	signature:(intset *is)
intsetFind	intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f	signature:(intset *is, int64_t value)
intsetFind	intset.h	/^uint8_t intsetFind(intset *is, int64_t value);$/;"	p	signature:(intset *is, int64_t value)
intsetGet	intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f	signature:(intset *is, uint32_t pos, int64_t *value)
intsetGet	intset.h	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value);$/;"	p	signature:(intset *is, uint32_t pos, int64_t *value)
intsetLen	intset.c	/^uint32_t intsetLen(intset *is) {$/;"	f	signature:(intset *is)
intsetLen	intset.h	/^uint32_t intsetLen(intset *is);$/;"	p	signature:(intset *is)
intsetMoveTail	intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	file:	signature:(intset *is, uint32_t from, uint32_t to)
intsetNew	intset.c	/^intset *intsetNew(void) {$/;"	f	signature:(void)
intsetNew	intset.h	/^intset *intsetNew(void);$/;"	p	signature:(void)
intsetRandom	intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f	signature:(intset *is)
intsetRandom	intset.h	/^int64_t intsetRandom(intset *is);$/;"	p	signature:(intset *is)
intsetRemove	intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f	signature:(intset *is, int64_t value, int *success)
intsetRemove	intset.h	/^intset *intsetRemove(intset *is, int64_t value, int *success);$/;"	p	signature:(intset *is, int64_t value, int *success)
intsetResize	intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	file:	signature:(intset *is, uint32_t len)
intsetSearch	intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	file:	signature:(intset *is, int64_t value, uint32_t *pos)
intsetTest	intset.c	/^int intsetTest(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
intsetTest	intset.h	/^int intsetTest(int argc, char *argv[]);$/;"	p	signature:(int argc, char *argv[])
intsetUpgradeAndAdd	intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	file:	signature:(intset *is, int64_t value)
invalid_hll_err	hyperloglog.c	/^static char *invalid_hll_err = "-INVALIDOBJ Corrupted HLL object detected\\r\\n";$/;"	v	file:
io	rio.h	/^    } io;$/;"	m	struct:_rio	typeref:union:_rio::__anon24	access:public
ip	cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* IP address last time it was seen *\/$/;"	m	struct:__anon1	access:public
ip	cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* Latest known IP address of this node *\/$/;"	m	struct:clusterNode	access:public
ip	sentinel.c	/^    char *ip;$/;"	m	struct:sentinelAddr	file:	access:public
ip_len	anet.h	49;"	d
ipfd	server.h	/^    int ipfd[CONFIG_BINDADDR_MAX]; \/* TCP socket file descriptors *\/$/;"	m	struct:redisServer	access:public
ipfd_count	server.h	/^    int ipfd_count;             \/* Used slots in ipfd[] *\/$/;"	m	struct:redisServer	access:public
is	t_zset.c	/^                intset *is;$/;"	m	struct:__anon16::__anon17::_iterset::__anon18	file:	access:public
is	t_zset.c	/^            } is;$/;"	m	union:__anon16::__anon17::_iterset	typeref:struct:__anon16::__anon17::_iterset::__anon18	file:	access:public
isColorTerm	redis-cli.c	/^int isColorTerm(void) {$/;"	f	signature:(void)
isHLLObjectOrReply	hyperloglog.c	/^int isHLLObjectOrReply(client *c, robj *o) {$/;"	f	signature:(client *c, robj *o)
isObjectRepresentableAsLongLong	object.c	/^int isObjectRepresentableAsLongLong(robj *o, long long *llval) {$/;"	f	signature:(robj *o, long long *llval)
isObjectRepresentableAsLongLong	server.h	/^int isObjectRepresentableAsLongLong(robj *o, long long *llongval);$/;"	p	signature:(robj *o, long long *llongval)
is_config_consistent?	redis-trib.rb	/^    def is_config_consistent?$/;"	f	class:RedisTrib
is_dirty?	redis-trib.rb	/^    def is_dirty?$/;"	f	class:ClusterNode
is_hex_digit	sds.c	/^int is_hex_digit(char c) {$/;"	f	signature:(char c)
isfinite	solarisfixes.h	40;"	d
isfinite	solarisfixes.h	41;"	d
isinf	solarisfixes.h	45;"	d
isinf	solarisfixes.h	46;"	d
isnan	solarisfixes.h	35;"	d
isnan	solarisfixes.h	36;"	d
issueCommand	redis-cli.c	/^static int issueCommand(int argc, char **argv) {$/;"	f	file:	signature:(int argc, char **argv)
issueCommandRepeat	redis-cli.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat) {$/;"	f	file:	signature:(int argc, char **argv, long repeat)
iter	server.h	/^    quicklistIter *iter;$/;"	m	struct:__anon32	access:public
iter	t_zset.c	/^    } iter;$/;"	m	struct:__anon16	typeref:union:__anon16::__anon17	file:	access:public
iterators	dict.h	/^    int iterators; \/* number of iterators currently running *\/$/;"	m	struct:dict	access:public
iterset	t_zset.c	/^typedef union _iterset iterset;$/;"	t	typeref:union:_iterset	file:
iterzset	t_zset.c	/^typedef union _iterzset iterzset;$/;"	t	typeref:union:_iterzset	file:
itrprintr	quicklist.c	/^static int itrprintr(quicklist *ql, int print) {$/;"	f	file:	signature:(quicklist *ql, int print)
itrprintr_rev	quicklist.c	/^static int itrprintr_rev(quicklist *ql, int print) {$/;"	f	file:	signature:(quicklist *ql, int print)
join_cluster	redis-trib.rb	/^    def join_cluster$/;"	f	class:RedisTrib.alloc_slots
keepalive	redis-benchmark.c	/^    int keepalive;$/;"	m	struct:config	file:	access:public
key	dict.h	/^    void *key;$/;"	m	struct:dictEntry	access:public
key	multi.c	/^    robj *key;$/;"	m	struct:watchedKey	file:	access:public
key	redis-check-rdb.c	/^    robj *key;                      \/* Current key we are reading. *\/$/;"	m	struct:__anon23	file:	access:public
key	server.h	/^    robj *key;$/;"	m	struct:readyList	access:public
key	server.h	/^    sds key;                    \/* Key name. *\/$/;"	m	struct:evictionPoolEntry	access:public
key	slots_async.c	/^    robj *key;$/;"	m	struct:__anon12	file:	access:public
keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType	access:public
keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType	access:public
keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType	access:public
keyHashSlot	cluster.c	/^unsigned int keyHashSlot(char *key, int keylen) {$/;"	f	signature:(char *key, int keylen)
keyHashSlot	server.h	/^unsigned int keyHashSlot(char *key, int keylen);$/;"	p	signature:(char *key, int keylen)
key_to_slot	redis-trib.rb	/^def key_to_slot(key)$/;"	f	class:RedisTrib
key_type	redis-check-rdb.c	/^    int key_type;                   \/* Current key type if != -1. *\/$/;"	m	struct:__anon23	file:	access:public
keylistDictType	server.c	/^dictType keylistDictType = {$/;"	v
keyptrDictType	server.c	/^dictType keyptrDictType = {$/;"	v
keys	redis-check-rdb.c	/^    unsigned long keys;             \/* Number of keys processed. *\/$/;"	m	struct:__anon23	file:	access:public
keys	server.h	/^    dict *keys;             \/* The keys we are waiting to terminate a blocking$/;"	m	struct:blockingState	access:public
keys	slots_async.c	/^    dict *keys;$/;"	m	struct:__anon13	file:	access:public
keysCommand	db.c	/^void keysCommand(client *c) {$/;"	f	signature:(client *c)
keysCommand	server.h	/^void keysCommand(client *c);$/;"	p	signature:(client *c)
keysize	redis-benchmark.c	/^    int keysize;$/;"	m	struct:config	file:	access:public
keyspaceEventsFlagsToString	notify.c	/^sds keyspaceEventsFlagsToString(int flags) {$/;"	f	signature:(int flags)
keyspaceEventsFlagsToString	server.h	/^sds keyspaceEventsFlagsToString(int flags);$/;"	p	signature:(int flags)
keyspaceEventsStringToFlags	notify.c	/^int keyspaceEventsStringToFlags(char *classes) {$/;"	f	signature:(char *classes)
keyspaceEventsStringToFlags	server.h	/^int keyspaceEventsStringToFlags(char *classes);$/;"	p	signature:(char *classes)
keystep	server.h	/^    int keystep;  \/* The step between first and last key *\/$/;"	m	struct:redisCommand	access:public
kqfd	ae_kqueue.c	/^    int kqfd;$/;"	m	struct:aeApiState	file:	access:public
label	sparkline.h	/^    char *label;$/;"	m	struct:sample	access:public
label_margin_top	sparkline.c	/^static int label_margin_top = 1;$/;"	v	file:
labels	sparkline.h	/^    int labels;$/;"	m	struct:sequence	access:public
lastTime	ae.h	/^    time_t lastTime;     \/* Used to detect system clock skew *\/$/;"	m	struct:aeEventLoop	access:public
lastVoteEpoch	cluster.h	/^    uint64_t lastVoteEpoch;     \/* Epoch of the last vote granted. *\/$/;"	m	struct:clusterState	access:public
last_avail_time	sentinel.c	/^    mstime_t last_avail_time; \/* Last time the instance replied to ping with$/;"	m	struct:instanceLink	file:	access:public
last_cmd_type	redis-cli.c	/^    int last_cmd_type;$/;"	m	struct:config	file:	access:public
last_dbid	cluster.c	/^    long last_dbid;$/;"	m	struct:migrateCachedSocket	file:	access:public
last_hello_time	sentinel.c	/^    mstime_t last_hello_time; \/* Only used if SRI_SENTINEL is set. Last time$/;"	m	struct:sentinelRedisInstance	file:	access:public
last_master_down_reply_time	sentinel.c	/^    mstime_t last_master_down_reply_time; \/* Time of last reply to$/;"	m	struct:sentinelRedisInstance	file:	access:public
last_numcommands	slots_async.c	/^    long long last_numcommands;$/;"	m	struct:__anon11	file:	access:public
last_ping_time	sentinel.c	/^    mstime_t last_ping_time;  \/* Time at which we sent the last ping. This is$/;"	m	struct:instanceLink	file:	access:public
last_pong_time	sentinel.c	/^    mstime_t last_pong_time;  \/* Last time the instance replied to ping,$/;"	m	struct:instanceLink	file:	access:public
last_pub_time	sentinel.c	/^    mstime_t last_pub_time;   \/* Last time we sent hello via Pub\/Sub. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
last_reconn_time	sentinel.c	/^    mstime_t last_reconn_time;  \/* Last reconnection attempt performed when$/;"	m	struct:instanceLink	file:	access:public
last_sample_count	server.h	/^        long long last_sample_count;\/* Count in last sample *\/$/;"	m	struct:redisServer::__anon30	access:public
last_sample_time	server.h	/^        long long last_sample_time; \/* Timestamp of last sample in ms *\/$/;"	m	struct:redisServer::__anon30	access:public
last_use_time	cluster.c	/^    time_t last_use_time;$/;"	m	struct:migrateCachedSocket	file:	access:public
lastbgsave_status	server.h	/^    int lastbgsave_status;          \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	access:public
lastbgsave_try	server.h	/^    time_t lastbgsave_try;          \/* Unix time of last attempted bgsave *\/$/;"	m	struct:redisServer	access:public
lastcmd	server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:client::	access:public
lastinteraction	server.h	/^    time_t lastinteraction; \/* Time of the last interaction, used for timeout *\/$/;"	m	struct:client	access:public
lastkey	server.h	/^    int lastkey;  \/* The last argument that's a key *\/$/;"	m	struct:redisCommand	access:public
lastsave	server.h	/^    time_t lastsave;                \/* Unix time of last successful save *\/$/;"	m	struct:redisServer	access:public
lastsaveCommand	db.c	/^void lastsaveCommand(client *c) {$/;"	f	signature:(client *c)
lastsaveCommand	server.h	/^void lastsaveCommand(client *c);$/;"	p	signature:(client *c)
lasttime	slots.c	/^    time_t lasttime;$/;"	m	struct:__anon28	file:	access:public
lastuse	server.h	/^    long long lastuse;$/;"	m	struct:__anon29	access:public
latency	latency.h	/^    uint32_t latency; \/* Latency in milliseconds. *\/$/;"	m	struct:latencySample	access:public
latency	redis-benchmark.c	/^    long long *latency;$/;"	m	struct:config	file:	access:public
latency	redis-benchmark.c	/^    long long latency;      \/* Request latency *\/$/;"	m	struct:_client	file:	access:public
latencyAddSample	latency.c	/^void latencyAddSample(char *event, mstime_t latency) {$/;"	f	signature:(char *event, mstime_t latency)
latencyAddSample	latency.h	/^void latencyAddSample(char *event, mstime_t latency);$/;"	p	signature:(char *event, mstime_t latency)
latencyAddSampleIfNeeded	latency.h	84;"	d
latencyCommand	latency.c	/^void latencyCommand(client *c) {$/;"	f	signature:(client *c)
latencyCommand	server.h	/^void latencyCommand(client *c);$/;"	p	signature:(client *c)
latencyCommandGenSparkeline	latency.c	/^sds latencyCommandGenSparkeline(char *event, struct latencyTimeSeries *ts) {$/;"	f	signature:(char *event, struct latencyTimeSeries *ts)
latencyCommandReplyWithLatestEvents	latency.c	/^void latencyCommandReplyWithLatestEvents(client *c) {$/;"	f	signature:(client *c)
latencyCommandReplyWithSamples	latency.c	/^void latencyCommandReplyWithSamples(client *c, struct latencyTimeSeries *ts) {$/;"	f	signature:(client *c, struct latencyTimeSeries *ts)
latencyDistMode	redis-cli.c	/^static void latencyDistMode(void) {$/;"	f	file:	signature:(void)
latencyEndMonitor	latency.h	79;"	d
latencyMode	redis-cli.c	/^static void latencyMode(void) {$/;"	f	file:	signature:(void)
latencyMonitorInit	latency.c	/^void latencyMonitorInit(void) {$/;"	f	signature:(void)
latencyMonitorInit	latency.h	/^void latencyMonitorInit(void);$/;"	p	signature:(void)
latencyRemoveNestedEvent	latency.h	90;"	d
latencyResetEvent	latency.c	/^int latencyResetEvent(char *event_to_reset) {$/;"	f	signature:(char *event_to_reset)
latencySample	latency.h	/^struct latencySample {$/;"	s
latencySample::latency	latency.h	/^    uint32_t latency; \/* Latency in milliseconds. *\/$/;"	m	struct:latencySample	access:public
latencySample::time	latency.h	/^    int32_t time; \/* We don't use time_t to force 4 bytes usage everywhere. *\/$/;"	m	struct:latencySample	access:public
latencyStartMonitor	latency.h	71;"	d
latencyStats	latency.h	/^struct latencyStats {$/;"	s
latencyStats::all_time_high	latency.h	/^    uint32_t all_time_high; \/* Absolute max observed since latest reset. *\/$/;"	m	struct:latencyStats	access:public
latencyStats::avg	latency.h	/^    uint32_t avg;           \/* Average of current samples. *\/$/;"	m	struct:latencyStats	access:public
latencyStats::mad	latency.h	/^    uint32_t mad;           \/* Mean absolute deviation. *\/$/;"	m	struct:latencyStats	access:public
latencyStats::max	latency.h	/^    uint32_t max;           \/* Max of current samples. *\/$/;"	m	struct:latencyStats	access:public
latencyStats::min	latency.h	/^    uint32_t min;           \/* Min of current samples. *\/$/;"	m	struct:latencyStats	access:public
latencyStats::period	latency.h	/^    time_t period;          \/* Number of seconds since first event and now. *\/$/;"	m	struct:latencyStats	access:public
latencyStats::samples	latency.h	/^    uint32_t samples;       \/* Number of non-zero samples. *\/$/;"	m	struct:latencyStats	access:public
latencyTimeSeries	latency.h	/^struct latencyTimeSeries {$/;"	s
latencyTimeSeries::idx	latency.h	/^    int idx; \/* Index of the next sample to store. *\/$/;"	m	struct:latencyTimeSeries	access:public
latencyTimeSeries::max	latency.h	/^    uint32_t max; \/* Max latency observed for this event. *\/$/;"	m	struct:latencyTimeSeries	access:public
latencyTimeSeries::samples	latency.h	/^    struct latencySample samples[LATENCY_TS_LEN]; \/* Latest history. *\/$/;"	m	struct:latencyTimeSeries	typeref:struct:latencyTimeSeries::latencySample	access:public
latencyTimeSeriesDictType	latency.c	/^dictType latencyTimeSeriesDictType = {$/;"	v
latency_dist_mode	redis-cli.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:	access:public
latency_events	server.h	/^    dict *latency_events;$/;"	m	struct:redisServer	access:public
latency_history	redis-cli.c	/^    int latency_history;$/;"	m	struct:config	file:	access:public
latency_mode	redis-cli.c	/^    int latency_mode;$/;"	m	struct:config	file:	access:public
latency_monitor_threshold	server.h	/^    long long latency_monitor_threshold;$/;"	m	struct:redisServer	access:public
latencyslots	redis-benchmark.c	/^static long long latencyslots[latencytotal] = {0};$/;"	v	file:
latencytotal	redis-benchmark.c	52;"	d	file:
latitude	geo.h	/^    double latitude;$/;"	m	struct:geoPoint	access:public
lazyReleaseIterator	slots_async.c	/^} lazyReleaseIterator;$/;"	t	typeref:struct:__anon10	file:
lazyReleaseIteratorHasNext	slots_async.c	/^lazyReleaseIteratorHasNext(lazyReleaseIterator *it) {$/;"	f	file:	signature:(lazyReleaseIterator *it)
lazyReleaseIteratorNext	slots_async.c	/^lazyReleaseIteratorNext(lazyReleaseIterator *it, int step) {$/;"	f	file:	signature:(lazyReleaseIterator *it, int step)
lazyReleaseIteratorRemains	slots_async.c	/^lazyReleaseIteratorRemains(lazyReleaseIterator *it) {$/;"	f	file:	signature:(lazyReleaseIterator *it)
lazyReleaseIteratorScanCallback	slots_async.c	/^lazyReleaseIteratorScanCallback(void *data, const dictEntry *de) {$/;"	f	file:	signature:(void *data, const dictEntry *de)
lazy_release_options	slots_async.c	/^} lazy_release_options = {$/;"	v	typeref:struct:__anon11	file:
ldb	scripting.c	/^} ldb;$/;"	v	typeref:struct:ldbState
ldbAddBreakpoint	scripting.c	/^int ldbAddBreakpoint(int line) {$/;"	f	signature:(int line)
ldbBreak	scripting.c	/^void ldbBreak(sds *argv, int argc) {$/;"	f	signature:(sds *argv, int argc)
ldbCatStackValue	scripting.c	/^sds ldbCatStackValue(sds s, lua_State *lua, int idx) {$/;"	f	signature:(sds s, lua_State *lua, int idx)
ldbCatStackValue	scripting.c	/^sds ldbCatStackValue(sds s, lua_State *lua, int idx);$/;"	p	file:	signature:(sds s, lua_State *lua, int idx)
ldbCatStackValueRec	scripting.c	/^sds ldbCatStackValueRec(sds s, lua_State *lua, int idx, int level) {$/;"	f	signature:(sds s, lua_State *lua, int idx, int level)
ldbDelBreakpoint	scripting.c	/^int ldbDelBreakpoint(int line) {$/;"	f	signature:(int line)
ldbDisable	scripting.c	/^void ldbDisable(client *c) {$/;"	f	signature:(client *c)
ldbDisable	scripting.c	/^void ldbDisable(client *c);$/;"	p	file:	signature:(client *c)
ldbEnable	scripting.c	/^void ldbEnable(client *c) {$/;"	f	signature:(client *c)
ldbEnable	scripting.c	/^void ldbEnable(client *c);$/;"	p	file:	signature:(client *c)
ldbEndSession	scripting.c	/^void ldbEndSession(client *c) {$/;"	f	signature:(client *c)
ldbEval	scripting.c	/^void ldbEval(lua_State *lua, sds *argv, int argc) {$/;"	f	signature:(lua_State *lua, sds *argv, int argc)
ldbFlushLog	scripting.c	/^void ldbFlushLog(list *log) {$/;"	f	signature:(list *log)
ldbGetSourceLine	scripting.c	/^char *ldbGetSourceLine(int line) {$/;"	f	signature:(int line)
ldbInit	scripting.c	/^void ldbInit(void) {$/;"	f	signature:(void)
ldbInit	scripting.c	/^void ldbInit(void);$/;"	p	file:	signature:(void)
ldbIsBreakpoint	scripting.c	/^int ldbIsBreakpoint(int line) {$/;"	f	signature:(int line)
ldbKillForkedSessions	scripting.c	/^void ldbKillForkedSessions(void) {$/;"	f	signature:(void)
ldbKillForkedSessions	server.h	/^void ldbKillForkedSessions(void);$/;"	p	signature:(void)
ldbList	scripting.c	/^void ldbList(int around, int context) {$/;"	f	signature:(int around, int context)
ldbLog	scripting.c	/^void ldbLog(sds entry) {$/;"	f	signature:(sds entry)
ldbLog	scripting.c	/^void ldbLog(sds entry);$/;"	p	file:	signature:(sds entry)
ldbLogRedisReply	scripting.c	/^void ldbLogRedisReply(char *reply) {$/;"	f	signature:(char *reply)
ldbLogRedisReply	scripting.c	/^void ldbLogRedisReply(char *reply);$/;"	p	file:	signature:(char *reply)
ldbLogSourceLine	scripting.c	/^void ldbLogSourceLine(int lnum) {$/;"	f	signature:(int lnum)
ldbLogStackValue	scripting.c	/^void ldbLogStackValue(lua_State *lua, char *prefix) {$/;"	f	signature:(lua_State *lua, char *prefix)
ldbLogWithMaxLen	scripting.c	/^void ldbLogWithMaxLen(sds entry) {$/;"	f	signature:(sds entry)
ldbMaxlen	scripting.c	/^void ldbMaxlen(sds *argv, int argc) {$/;"	f	signature:(sds *argv, int argc)
ldbPendingChildren	scripting.c	/^int ldbPendingChildren(void) {$/;"	f	signature:(void)
ldbPendingChildren	server.h	/^int ldbPendingChildren(void);$/;"	p	signature:(void)
ldbPrint	scripting.c	/^void ldbPrint(lua_State *lua, char *varname) {$/;"	f	signature:(lua_State *lua, char *varname)
ldbPrintAll	scripting.c	/^void ldbPrintAll(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
ldbRedis	scripting.c	/^void ldbRedis(lua_State *lua, sds *argv, int argc) {$/;"	f	signature:(lua_State *lua, sds *argv, int argc)
ldbRedisProtocolToHuman	scripting.c	/^char *ldbRedisProtocolToHuman(sds *o, char *reply) {$/;"	f	signature:(sds *o, char *reply)
ldbRedisProtocolToHuman_Bulk	scripting.c	/^char *ldbRedisProtocolToHuman_Bulk(sds *o, char *reply) {$/;"	f	signature:(sds *o, char *reply)
ldbRedisProtocolToHuman_Bulk	scripting.c	/^char *ldbRedisProtocolToHuman_Bulk(sds *o, char *reply);$/;"	p	file:	signature:(sds *o, char *reply)
ldbRedisProtocolToHuman_Int	scripting.c	/^char *ldbRedisProtocolToHuman_Int(sds *o, char *reply) {$/;"	f	signature:(sds *o, char *reply)
ldbRedisProtocolToHuman_Int	scripting.c	/^char *ldbRedisProtocolToHuman_Int(sds *o, char *reply);$/;"	p	file:	signature:(sds *o, char *reply)
ldbRedisProtocolToHuman_MultiBulk	scripting.c	/^char *ldbRedisProtocolToHuman_MultiBulk(sds *o, char *reply) {$/;"	f	signature:(sds *o, char *reply)
ldbRedisProtocolToHuman_MultiBulk	scripting.c	/^char *ldbRedisProtocolToHuman_MultiBulk(sds *o, char *reply);$/;"	p	file:	signature:(sds *o, char *reply)
ldbRedisProtocolToHuman_Status	scripting.c	/^char *ldbRedisProtocolToHuman_Status(sds *o, char *reply) {$/;"	f	signature:(sds *o, char *reply)
ldbRedisProtocolToHuman_Status	scripting.c	/^char *ldbRedisProtocolToHuman_Status(sds *o, char *reply);$/;"	p	file:	signature:(sds *o, char *reply)
ldbRemoveChild	scripting.c	/^int ldbRemoveChild(pid_t pid) {$/;"	f	signature:(pid_t pid)
ldbRemoveChild	server.h	/^int ldbRemoveChild(pid_t pid);$/;"	p	signature:(pid_t pid)
ldbRepl	scripting.c	/^int ldbRepl(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
ldbReplParseCommand	scripting.c	/^sds *ldbReplParseCommand(int *argcp) {$/;"	f	signature:(int *argcp)
ldbSendLogs	scripting.c	/^void ldbSendLogs(void) {$/;"	f	signature:(void)
ldbStartSession	scripting.c	/^int ldbStartSession(client *c) {$/;"	f	signature:(client *c)
ldbState	scripting.c	/^struct ldbState {$/;"	s	file:
ldbState::active	scripting.c	/^    int active; \/* Are we debugging EVAL right now? *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::bp	scripting.c	/^    int bp[LDB_BREAKPOINTS_MAX]; \/* An array of breakpoints line numbers. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::bpcount	scripting.c	/^    int bpcount; \/* Number of valid entries inside bp. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::cbuf	scripting.c	/^    sds cbuf;   \/* Debugger client command buffer. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::children	scripting.c	/^    list *children; \/* All forked debugging sessions pids. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::currentline	scripting.c	/^    int currentline;    \/* Current line number. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::fd	scripting.c	/^    int fd;     \/* Socket of the debugging client. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::forked	scripting.c	/^    int forked; \/* Is this a fork()ed debugging session? *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::lines	scripting.c	/^    int lines;  \/* Number of lines in 'src'. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::logs	scripting.c	/^    list *logs; \/* List of messages to send to the client. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::luabp	scripting.c	/^    int luabp;  \/* Stop at next line because redis.breakpoint() was called. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::maxlen	scripting.c	/^    size_t maxlen;  \/* Max var dump \/ reply length. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::maxlen_hint_sent	scripting.c	/^    int maxlen_hint_sent; \/* Did we already hint about "set maxlen"? *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::src	scripting.c	/^    sds *src;   \/* Lua script source code split by line. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::step	scripting.c	/^    int step;   \/* Stop at next line ragardless of breakpoints. *\/$/;"	m	struct:ldbState	file:	access:public
ldbState::traces	scripting.c	/^    list *traces; \/* Messages about Redis commands executed since last stop.*\/$/;"	m	struct:ldbState	file:	access:public
ldbTrace	scripting.c	/^void ldbTrace(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
leader	sentinel.c	/^    char *leader;       \/* If this is a master instance, this is the runid of$/;"	m	struct:sentinelRedisInstance	file:	access:public
leaderVotesDictType	sentinel.c	/^dictType leaderVotesDictType = {$/;"	v
leader_epoch	sentinel.c	/^    uint64_t leader_epoch; \/* Epoch of the 'leader' field. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
len	adlist.h	/^    unsigned long len;$/;"	m	struct:list	access:public
len	quicklist.h	/^    unsigned int len;           \/* number of quicklistNodes *\/$/;"	m	struct:quicklist	access:public
len	sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:sdshdr16	access:public
len	sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:sdshdr32	access:public
len	sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:sdshdr64	access:public
len	sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:sdshdr8	access:public
len	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:	access:public
length	intset.h	/^    uint32_t length;$/;"	m	struct:intset	access:public
length	server.h	/^    unsigned long length;$/;"	m	struct:zskiplist	access:public
length	sparkline.h	/^    int length;$/;"	m	struct:sequence	access:public
lensize	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:	access:public
level	server.h	/^    int level;$/;"	m	struct:zskiplist	access:public
level	server.h	/^    } level[];$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistLevel	access:public
li	server.h	/^    listTypeIterator *li;$/;"	m	struct:__anon33	access:public
likely	quicklist.c	85;"	d	file:
likely	quicklist.c	88;"	d	file:
lindex	slots_async.c	/^    unsigned long lindex;$/;"	m	struct:__anon12	file:	access:public
lindexCommand	server.h	/^void lindexCommand(client *c);$/;"	p	signature:(client *c)
lindexCommand	t_list.c	/^void lindexCommand(client *c) {$/;"	f	signature:(client *c)
lines	scripting.c	/^    int lines;  \/* Number of lines in 'src'. *\/$/;"	m	struct:ldbState	file:	access:public
link	cluster.h	/^    clusterLink *link;          \/* TCP\/IP link with this node *\/$/;"	m	struct:clusterNode	access:public
link	sentinel.c	/^    instanceLink *link; \/* Link to the instance, may be shared for Sentinels. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
linsertCommand	server.h	/^void linsertCommand(client *c);$/;"	p	signature:(client *c)
linsertCommand	t_list.c	/^void linsertCommand(client *c) {$/;"	f	signature:(client *c)
linuxMemoryWarnings	server.c	/^void linuxMemoryWarnings(void) {$/;"	f	signature:(void)
linuxOvercommitMemoryValue	server.c	/^int linuxOvercommitMemoryValue(void) {$/;"	f	signature:(void)
list	adlist.h	/^typedef struct list {$/;"	s
list	adlist.h	/^} list;$/;"	t	typeref:struct:list
list	slots_async.c	/^    list *list;$/;"	m	struct:__anon13	file:	access:public
list::dup	adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list	access:public
list::free	adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list	access:public
list::head	adlist.h	/^    listNode *head;$/;"	m	struct:list	access:public
list::len	adlist.h	/^    unsigned long len;$/;"	m	struct:list	access:public
list::match	adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list	access:public
list::tail	adlist.h	/^    listNode *tail;$/;"	m	struct:list	access:public
listAddNodeHead	adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f	signature:(list *list, void *value)
listAddNodeHead	adlist.h	/^list *listAddNodeHead(list *list, void *value);$/;"	p	signature:(list *list, void *value)
listAddNodeTail	adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f	signature:(list *list, void *value)
listAddNodeTail	adlist.h	/^list *listAddNodeTail(list *list, void *value);$/;"	p	signature:(list *list, void *value)
listCreate	adlist.c	/^list *listCreate(void)$/;"	f	signature:(void)
listCreate	adlist.h	/^list *listCreate(void);$/;"	p	signature:(void)
listDelNode	adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f	signature:(list *list, listNode *node)
listDelNode	adlist.h	/^void listDelNode(list *list, listNode *node);$/;"	p	signature:(list *list, listNode *node)
listDup	adlist.c	/^list *listDup(list *orig)$/;"	f	signature:(list *orig)
listDup	adlist.h	/^list *listDup(list *orig);$/;"	p	signature:(list *orig)
listFirst	adlist.h	58;"	d
listGetDupMethod	adlist.h	68;"	d
listGetFree	adlist.h	69;"	d
listGetIterator	adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f	signature:(list *list, int direction)
listGetIterator	adlist.h	/^listIter *listGetIterator(list *list, int direction);$/;"	p	signature:(list *list, int direction)
listGetMatchMethod	adlist.h	70;"	d
listIndex	adlist.c	/^listNode *listIndex(list *list, long index) {$/;"	f	signature:(list *list, long index)
listIndex	adlist.h	/^listNode *listIndex(list *list, long index);$/;"	p	signature:(list *list, long index)
listInsertNode	adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f	signature:(list *list, listNode *old_node, void *value, int after)
listInsertNode	adlist.h	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after);$/;"	p	signature:(list *list, listNode *old_node, void *value, int after)
listIter	adlist.h	/^typedef struct listIter {$/;"	s
listIter	adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listIter::direction	adlist.h	/^    int direction;$/;"	m	struct:listIter	access:public
listIter::next	adlist.h	/^    listNode *next;$/;"	m	struct:listIter	access:public
listLast	adlist.h	59;"	d
listLength	adlist.h	57;"	d
listMatchObjects	networking.c	/^int listMatchObjects(void *a, void *b) {$/;"	f	signature:(void *a, void *b)
listMatchPubsubPattern	pubsub.c	/^int listMatchPubsubPattern(void *a, void *b) {$/;"	f	signature:(void *a, void *b)
listMatchPubsubPattern	server.h	/^int listMatchPubsubPattern(void *a, void *b);$/;"	p	signature:(void *a, void *b)
listNext	adlist.c	/^listNode *listNext(listIter *iter)$/;"	f	signature:(listIter *iter)
listNext	adlist.h	/^listNode *listNext(listIter *iter);$/;"	p	signature:(listIter *iter)
listNextNode	adlist.h	61;"	d
listNode	adlist.h	/^typedef struct listNode {$/;"	s
listNode	adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNode::next	adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode	access:public
listNode::prev	adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode	access:public
listNode::value	adlist.h	/^    void *value;$/;"	m	struct:listNode	access:public
listNodeValue	adlist.h	62;"	d
listPopSaver	t_list.c	/^void *listPopSaver(unsigned char *data, unsigned int sz) {$/;"	f	signature:(unsigned char *data, unsigned int sz)
listPrevNode	adlist.h	60;"	d
listRelease	adlist.c	/^void listRelease(list *list)$/;"	f	signature:(list *list)
listRelease	adlist.h	/^void listRelease(list *list);$/;"	p	signature:(list *list)
listReleaseIterator	adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f	signature:(listIter *iter)
listReleaseIterator	adlist.h	/^void listReleaseIterator(listIter *iter);$/;"	p	signature:(listIter *iter)
listRewind	adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f	signature:(list *list, listIter *li)
listRewind	adlist.h	/^void listRewind(list *list, listIter *li);$/;"	p	signature:(list *list, listIter *li)
listRewindTail	adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f	signature:(list *list, listIter *li)
listRewindTail	adlist.h	/^void listRewindTail(list *list, listIter *li);$/;"	p	signature:(list *list, listIter *li)
listRotate	adlist.c	/^void listRotate(list *list) {$/;"	f	signature:(list *list)
listRotate	adlist.h	/^void listRotate(list *list);$/;"	p	signature:(list *list)
listSearchKey	adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f	signature:(list *list, void *key)
listSearchKey	adlist.h	/^listNode *listSearchKey(list *list, void *key);$/;"	p	signature:(list *list, void *key)
listSetDupMethod	adlist.h	64;"	d
listSetFreeMethod	adlist.h	65;"	d
listSetMatchMethod	adlist.h	66;"	d
listTypeConvert	server.h	/^void listTypeConvert(robj *subject, int enc);$/;"	p	signature:(robj *subject, int enc)
listTypeConvert	t_list.c	/^void listTypeConvert(robj *subject, int enc) {$/;"	f	signature:(robj *subject, int enc)
listTypeDelete	server.h	/^void listTypeDelete(listTypeIterator *iter, listTypeEntry *entry);$/;"	p	signature:(listTypeIterator *iter, listTypeEntry *entry)
listTypeDelete	t_list.c	/^void listTypeDelete(listTypeIterator *iter, listTypeEntry *entry) {$/;"	f	signature:(listTypeIterator *iter, listTypeEntry *entry)
listTypeEntry	server.h	/^} listTypeEntry;$/;"	t	typeref:struct:__anon33
listTypeEqual	server.h	/^int listTypeEqual(listTypeEntry *entry, robj *o);$/;"	p	signature:(listTypeEntry *entry, robj *o)
listTypeEqual	t_list.c	/^int listTypeEqual(listTypeEntry *entry, robj *o) {$/;"	f	signature:(listTypeEntry *entry, robj *o)
listTypeGet	server.h	/^robj *listTypeGet(listTypeEntry *entry);$/;"	p	signature:(listTypeEntry *entry)
listTypeGet	t_list.c	/^robj *listTypeGet(listTypeEntry *entry) {$/;"	f	signature:(listTypeEntry *entry)
listTypeInitIterator	server.h	/^listTypeIterator *listTypeInitIterator(robj *subject, long index, unsigned char direction);$/;"	p	signature:(robj *subject, long index, unsigned char direction)
listTypeInitIterator	t_list.c	/^listTypeIterator *listTypeInitIterator(robj *subject, long index,$/;"	f	signature:(robj *subject, long index, unsigned char direction)
listTypeInsert	server.h	/^void listTypeInsert(listTypeEntry *entry, robj *value, int where);$/;"	p	signature:(listTypeEntry *entry, robj *value, int where)
listTypeInsert	t_list.c	/^void listTypeInsert(listTypeEntry *entry, robj *value, int where) {$/;"	f	signature:(listTypeEntry *entry, robj *value, int where)
listTypeIterator	server.h	/^} listTypeIterator;$/;"	t	typeref:struct:__anon32
listTypeLength	server.h	/^unsigned long listTypeLength(robj *subject);$/;"	p	signature:(robj *subject)
listTypeLength	t_list.c	/^unsigned long listTypeLength(robj *subject) {$/;"	f	signature:(robj *subject)
listTypeNext	server.h	/^int listTypeNext(listTypeIterator *li, listTypeEntry *entry);$/;"	p	signature:(listTypeIterator *li, listTypeEntry *entry)
listTypeNext	t_list.c	/^int listTypeNext(listTypeIterator *li, listTypeEntry *entry) {$/;"	f	signature:(listTypeIterator *li, listTypeEntry *entry)
listTypePop	server.h	/^robj *listTypePop(robj *subject, int where);$/;"	p	signature:(robj *subject, int where)
listTypePop	t_list.c	/^robj *listTypePop(robj *subject, int where) {$/;"	f	signature:(robj *subject, int where)
listTypePush	server.h	/^void listTypePush(robj *subject, robj *value, int where);$/;"	p	signature:(robj *subject, robj *value, int where)
listTypePush	t_list.c	/^void listTypePush(robj *subject, robj *value, int where) {$/;"	f	signature:(robj *subject, robj *value, int where)
listTypeReleaseIterator	server.h	/^void listTypeReleaseIterator(listTypeIterator *li);$/;"	p	signature:(listTypeIterator *li)
listTypeReleaseIterator	t_list.c	/^void listTypeReleaseIterator(listTypeIterator *li) {$/;"	f	signature:(listTypeIterator *li)
listTypeTryConversion	server.h	/^void listTypeTryConversion(robj *subject, robj *value);$/;"	p	signature:(robj *subject, robj *value)
list_compress_depth	server.h	/^    int list_compress_depth;$/;"	m	struct:redisServer	access:public
list_max_ziplist_size	server.h	/^    int list_max_ziplist_size;$/;"	m	struct:redisServer	access:public
listenToPort	server.c	/^int listenToPort(int port, int *fds, int *count) {$/;"	f	signature:(int port, int *fds, int *count)
listenToPort	server.h	/^int listenToPort(int port, int *fds, int *count);$/;"	p	signature:(int port, int *fds, int *count)
liveclients	redis-benchmark.c	/^    int liveclients;$/;"	m	struct:config	file:	access:public
ll2string	util.c	/^int ll2string(char* dst, size_t dstlen, long long svalue) {$/;"	f	signature:(char* dst, size_t dstlen, long long svalue)
ll2string	util.h	/^int ll2string(char *s, size_t len, long long value);$/;"	p	signature:(char *s, size_t len, long long value)
llenCommand	server.h	/^void llenCommand(client *c);$/;"	p	signature:(client *c)
llenCommand	t_list.c	/^void llenCommand(client *c) {$/;"	f	signature:(client *c)
loadAppendOnlyFile	aof.c	/^int loadAppendOnlyFile(char *filename) {$/;"	f	signature:(char *filename)
loadAppendOnlyFile	server.h	/^int loadAppendOnlyFile(char *filename);$/;"	p	signature:(char *filename)
loadDataFromDisk	server.c	/^void loadDataFromDisk(void) {$/;"	f	signature:(void)
loadServerConfig	config.c	/^void loadServerConfig(char *filename, char *options) {$/;"	f	signature:(char *filename, char *options)
loadServerConfig	server.h	/^void loadServerConfig(char *filename, char *options);$/;"	p	signature:(char *filename, char *options)
loadServerConfigFromString	config.c	/^void loadServerConfigFromString(char *config) {$/;"	f	signature:(char *config)
load_cluster_info_from_node	redis-trib.rb	/^    def load_cluster_info_from_node(nodeaddr)$/;"	f	class:RedisTrib.alloc_slots
load_info	redis-trib.rb	/^    def load_info(o={})$/;"	f	class:ClusterNode
loading	server.h	/^    int loading;                \/* We are loading data from disk if true *\/$/;"	m	struct:redisServer	access:public
loadingProgress	rdb.c	/^void loadingProgress(off_t pos) {$/;"	f	signature:(off_t pos)
loadingProgress	server.h	/^void loadingProgress(off_t pos);$/;"	p	signature:(off_t pos)
loading_loaded_bytes	server.h	/^    off_t loading_loaded_bytes;$/;"	m	struct:redisServer	access:public
loading_process_events_interval_bytes	server.h	/^    off_t loading_process_events_interval_bytes;$/;"	m	struct:redisServer	access:public
loading_start_time	server.h	/^    time_t loading_start_time;$/;"	m	struct:redisServer	access:public
loading_total_bytes	server.h	/^    off_t loading_total_bytes;$/;"	m	struct:redisServer	access:public
loadingerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
logCurrentClient	debug.c	/^void logCurrentClient(void) {$/;"	f	signature:(void)
logRegisters	debug.c	/^void logRegisters(ucontext_t *uc) {$/;"	f	signature:(ucontext_t *uc)
logStackContent	debug.c	/^void logStackContent(void **sp) {$/;"	f	signature:(void **sp)
logStackTrace	debug.c	/^void logStackTrace(ucontext_t *uc) {$/;"	f	signature:(ucontext_t *uc)
logfile	server.h	/^    char *logfile;                  \/* Path of log file *\/$/;"	m	struct:redisServer	access:public
loglevel_enum	config.c	/^configEnum loglevel_enum[] = {$/;"	v
logs	scripting.c	/^    list *logs; \/* List of messages to send to the client. *\/$/;"	m	struct:ldbState	file:	access:public
longLatFromMember	geo.c	/^int longLatFromMember(robj *zobj, robj *member, double *xy) {$/;"	f	signature:(robj *zobj, robj *member, double *xy)
longitude	geo.h	/^    double longitude;$/;"	m	struct:geoPoint	access:public
longval	quicklist.h	/^    long long longval;$/;"	m	struct:quicklistEntry	access:public
lookupCommand	server.c	/^struct redisCommand *lookupCommand(sds name) {$/;"	f	signature:(sds name)
lookupCommand	server.h	/^struct redisCommand *lookupCommand(sds name);$/;"	p	signature:(sds name)
lookupCommandByCString	server.c	/^struct redisCommand *lookupCommandByCString(char *s) {$/;"	f	signature:(char *s)
lookupCommandByCString	server.h	/^struct redisCommand *lookupCommandByCString(char *s);$/;"	p	signature:(char *s)
lookupCommandOrOriginal	server.c	/^struct redisCommand *lookupCommandOrOriginal(sds name) {$/;"	f	signature:(sds name)
lookupCommandOrOriginal	server.h	/^struct redisCommand *lookupCommandOrOriginal(sds name);$/;"	p	signature:(sds name)
lookupKey	db.c	/^robj *lookupKey(redisDb *db, robj *key, int flags) {$/;"	f	signature:(redisDb *db, robj *key, int flags)
lookupKey	server.h	/^robj *lookupKey(redisDb *db, robj *key, int flags);$/;"	p	signature:(redisDb *db, robj *key, int flags)
lookupKeyByPattern	sort.c	/^robj *lookupKeyByPattern(redisDb *db, robj *pattern, robj *subst) {$/;"	f	signature:(redisDb *db, robj *pattern, robj *subst)
lookupKeyRead	db.c	/^robj *lookupKeyRead(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
lookupKeyRead	server.h	/^robj *lookupKeyRead(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
lookupKeyReadOrReply	db.c	/^robj *lookupKeyReadOrReply(client *c, robj *key, robj *reply) {$/;"	f	signature:(client *c, robj *key, robj *reply)
lookupKeyReadOrReply	server.h	/^robj *lookupKeyReadOrReply(client *c, robj *key, robj *reply);$/;"	p	signature:(client *c, robj *key, robj *reply)
lookupKeyReadWithFlags	db.c	/^robj *lookupKeyReadWithFlags(redisDb *db, robj *key, int flags) {$/;"	f	signature:(redisDb *db, robj *key, int flags)
lookupKeyReadWithFlags	server.h	/^robj *lookupKeyReadWithFlags(redisDb *db, robj *key, int flags);$/;"	p	signature:(redisDb *db, robj *key, int flags)
lookupKeyWrite	db.c	/^robj *lookupKeyWrite(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
lookupKeyWrite	server.h	/^robj *lookupKeyWrite(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
lookupKeyWriteOrReply	db.c	/^robj *lookupKeyWriteOrReply(client *c, robj *key, robj *reply) {$/;"	f	signature:(client *c, robj *key, robj *reply)
lookupKeyWriteOrReply	server.h	/^robj *lookupKeyWriteOrReply(client *c, robj *key, robj *reply);$/;"	p	signature:(client *c, robj *key, robj *reply)
lookupStringForBitCommand	bitops.c	/^robj *lookupStringForBitCommand(client *c, size_t maxbit) {$/;"	f	signature:(client *c, size_t maxbit)
loop	redis-benchmark.c	/^    int loop;$/;"	m	struct:config	file:	access:public
loop	sentinel.c	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	file:	access:public
lpop	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
lpopCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
lpopCommand	server.h	/^void lpopCommand(client *c);$/;"	p	signature:(client *c)
lpopCommand	t_list.c	/^void lpopCommand(client *c) {$/;"	f	signature:(client *c)
lpush	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct	access:public
lpushCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
lpushCommand	server.h	/^void lpushCommand(client *c);$/;"	p	signature:(client *c)
lpushCommand	t_list.c	/^void lpushCommand(client *c) {$/;"	f	signature:(client *c)
lpushxCommand	server.h	/^void lpushxCommand(client *c);$/;"	p	signature:(client *c)
lpushxCommand	t_list.c	/^void lpushxCommand(client *c) {$/;"	f	signature:(client *c)
lrangeCommand	server.h	/^void lrangeCommand(client *c);$/;"	p	signature:(client *c)
lrangeCommand	t_list.c	/^void lrangeCommand(client *c) {$/;"	f	signature:(client *c)
lremCommand	server.h	/^void lremCommand(client *c);$/;"	p	signature:(client *c)
lremCommand	t_list.c	/^void lremCommand(client *c) {$/;"	f	signature:(client *c)
lru	server.h	/^    unsigned lru:LRU_BITS; \/* lru time (relative to server.lruclock) *\/$/;"	m	struct:redisObject	access:public
lru_test_mode	redis-cli.c	/^    int lru_test_mode;$/;"	m	struct:config	file:	access:public
lru_test_sample_size	redis-cli.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:	access:public
lruclock	server.h	/^    unsigned lruclock:LRU_BITS; \/* Clock for LRU eviction *\/$/;"	m	struct:redisServer	access:public
lsetCommand	server.h	/^void lsetCommand(client *c);$/;"	p	signature:(client *c)
lsetCommand	t_list.c	/^void lsetCommand(client *c) {$/;"	f	signature:(client *c)
ltrimCommand	server.h	/^void ltrimCommand(client *c);$/;"	p	signature:(client *c)
ltrimCommand	t_list.c	/^void ltrimCommand(client *c) {$/;"	f	signature:(client *c)
lua	server.h	/^    lua_State *lua; \/* The Lua interpreter. We use just one for all clients *\/$/;"	m	struct:redisServer	access:public
luaCreateFunction	scripting.c	/^int luaCreateFunction(client *c, lua_State *lua, char *funcname, robj *body) {$/;"	f	signature:(client *c, lua_State *lua, char *funcname, robj *body)
luaLdbLineHook	scripting.c	/^void luaLdbLineHook(lua_State *lua, lua_Debug *ar) {$/;"	f	signature:(lua_State *lua, lua_Debug *ar)
luaLdbLineHook	scripting.c	/^void luaLdbLineHook(lua_State *lua, lua_Debug *ar);$/;"	p	file:	signature:(lua_State *lua, lua_Debug *ar)
luaLoadLib	scripting.c	/^void luaLoadLib(lua_State *lua, const char *libname, lua_CFunction luafunc) {$/;"	f	signature:(lua_State *lua, const char *libname, lua_CFunction luafunc)
luaLoadLibraries	scripting.c	/^void luaLoadLibraries(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaLogCommand	scripting.c	/^int luaLogCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaMaskCountHook	scripting.c	/^void luaMaskCountHook(lua_State *lua, lua_Debug *ar) {$/;"	f	signature:(lua_State *lua, lua_Debug *ar)
luaPushError	scripting.c	/^void luaPushError(lua_State *lua, char *error) {$/;"	f	signature:(lua_State *lua, char *error)
luaRaiseError	scripting.c	/^int luaRaiseError(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisBreakpointCommand	scripting.c	/^int luaRedisBreakpointCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisCallCommand	scripting.c	/^int luaRedisCallCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisDebugCommand	scripting.c	/^int luaRedisDebugCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisErrorReplyCommand	scripting.c	/^int luaRedisErrorReplyCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisGenericCommand	scripting.c	/^int luaRedisGenericCommand(lua_State *lua, int raise_error) {$/;"	f	signature:(lua_State *lua, int raise_error)
luaRedisPCallCommand	scripting.c	/^int luaRedisPCallCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisReplicateCommandsCommand	scripting.c	/^int luaRedisReplicateCommandsCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisReturnSingleFieldTable	scripting.c	/^int luaRedisReturnSingleFieldTable(lua_State *lua, char *field) {$/;"	f	signature:(lua_State *lua, char *field)
luaRedisSetReplCommand	scripting.c	/^int luaRedisSetReplCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisSha1hexCommand	scripting.c	/^int luaRedisSha1hexCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRedisStatusReplyCommand	scripting.c	/^int luaRedisStatusReplyCommand(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaRemoveUnsupportedFunctions	scripting.c	/^void luaRemoveUnsupportedFunctions(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
luaReplyToRedisReply	scripting.c	/^void luaReplyToRedisReply(client *c, lua_State *lua) {$/;"	f	signature:(client *c, lua_State *lua)
luaSetGlobalArray	scripting.c	/^void luaSetGlobalArray(lua_State *lua, char *var, robj **elev, int elec) {$/;"	f	signature:(lua_State *lua, char *var, robj **elev, int elec)
luaSortArray	scripting.c	/^void luaSortArray(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
lua_always_replicate_commands	server.h	/^    int lua_always_replicate_commands; \/* Default replication type. *\/$/;"	m	struct:redisServer	access:public
lua_caller	server.h	/^    client *lua_caller;   \/* The client running EVAL right now, or NULL *\/$/;"	m	struct:redisServer	access:public
lua_client	server.h	/^    client *lua_client;   \/* The "fake client" to query Redis from Lua *\/$/;"	m	struct:redisServer	access:public
lua_kill	server.h	/^    int lua_kill;         \/* Kill the script if true. *\/$/;"	m	struct:redisServer	access:public
lua_multi_emitted	server.h	/^    int lua_multi_emitted;\/* True if we already proagated MULTI. *\/$/;"	m	struct:redisServer	access:public
lua_random_dirty	server.h	/^    int lua_random_dirty; \/* True if a random command was called during the$/;"	m	struct:redisServer	access:public
lua_repl	server.h	/^    int lua_repl;         \/* Script replication flags for redis.set_repl(). *\/$/;"	m	struct:redisServer	access:public
lua_replicate_commands	server.h	/^    int lua_replicate_commands; \/* True if we are doing single commands repl. *\/$/;"	m	struct:redisServer	access:public
lua_scripts	server.h	/^    dict *lua_scripts;         \/* A dictionary of SHA1 -> Lua scripts *\/$/;"	m	struct:redisServer	access:public
lua_time_limit	server.h	/^    mstime_t lua_time_limit;  \/* Script timeout in milliseconds *\/$/;"	m	struct:redisServer	access:public
lua_time_start	server.h	/^    mstime_t lua_time_start;  \/* Start time of script, milliseconds time *\/$/;"	m	struct:redisServer	access:public
lua_timedout	server.h	/^    int lua_timedout;     \/* True if we reached the time limit for script$/;"	m	struct:redisServer	access:public
lua_write_dirty	server.h	/^    int lua_write_dirty;  \/* True if a write command was called during the$/;"	m	struct:redisServer	access:public
luabp	scripting.c	/^    int luabp;  \/* Stop at next line because redis.breakpoint() was called. *\/$/;"	m	struct:ldbState	file:	access:public
luaopen_bit	scripting.c	/^LUALIB_API int (luaopen_bit) (lua_State *L);$/;"	p	file:	signature:(lua_State *L)
luaopen_cjson	scripting.c	/^LUALIB_API int (luaopen_cjson) (lua_State *L);$/;"	p	file:	signature:(lua_State *L)
luaopen_cmsgpack	scripting.c	/^LUALIB_API int (luaopen_cmsgpack) (lua_State *L);$/;"	p	file:	signature:(lua_State *L)
luaopen_struct	scripting.c	/^LUALIB_API int (luaopen_struct) (lua_State *L);$/;"	p	file:	signature:(lua_State *L)
lzf_compress	lzf.h	/^lzf_compress (const void *const in_data,  unsigned int in_len,$/;"	p	signature:(const void *const in_data, unsigned int in_len, void *out_data, unsigned int out_len)
lzf_compress	lzf_c.c	/^lzf_compress (const void *const in_data, unsigned int in_len,$/;"	f	signature:(const void *const in_data, unsigned int in_len, void *out_data, unsigned int out_len , LZF_STATE htab )
lzf_decompress	lzf.h	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	p	signature:(const void *const in_data, unsigned int in_len, void *out_data, unsigned int out_len)
lzf_decompress	lzf_d.c	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	f	signature:(const void *const in_data, unsigned int in_len, void *out_data, unsigned int out_len)
lzf_movsb	lzf_d.c	48;"	d	file:
mad	latency.h	/^    uint32_t mad;           \/* Mean absolute deviation. *\/$/;"	m	struct:latencyStats	access:public
magic	hyperloglog.c	/^    char magic[4];      \/* "HYLL" *\/$/;"	m	struct:hllhdr	file:	access:public
main	redis-benchmark.c	/^int main(int argc, const char **argv) {$/;"	f	signature:(int argc, const char **argv)
main	redis-check-aof.c	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	redis-cli.c	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
main	sds.c	/^int main(void) {$/;"	f	signature:(void)
main	server.c	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
malloc	server.h	/^void *malloc(size_t size) __attribute__ ((deprecated));$/;"	p	signature:(size_t size)
malloc	zmalloc.c	59;"	d	file:
malloc	zmalloc.c	64;"	d	file:
manualFailoverCheckTimeout	cluster.c	/^void manualFailoverCheckTimeout(void) {$/;"	f	signature:(void)
markNodeAsFailingIfNeeded	cluster.c	/^void markNodeAsFailingIfNeeded(clusterNode *node) {$/;"	f	signature:(clusterNode *node)
mask	ae.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE) *\/$/;"	m	struct:aeFileEvent	access:public
mask	ae.h	/^    int mask;$/;"	m	struct:aeFiredEvent	access:public
master	sentinel.c	/^    struct sentinelRedisInstance *master; \/* Master instance if it's slave. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:	access:public
master	server.h	/^    client *master;     \/* Client that is master for this slave *\/$/;"	m	struct:redisServer	access:public
masterTryPartialResynchronization	replication.c	/^int masterTryPartialResynchronization(client *c) {$/;"	f	signature:(client *c)
master_link_down_time	sentinel.c	/^    mstime_t master_link_down_time; \/* Slave replication link down time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
master_repl_offset	server.h	/^    long long master_repl_offset;   \/* Global replication offset *\/$/;"	m	struct:redisServer	access:public
masterauth	server.h	/^    char *masterauth;               \/* AUTH with this password with master *\/$/;"	m	struct:redisServer	access:public
masterdownerr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
masterhost	server.h	/^    char *masterhost;               \/* Hostname of master *\/$/;"	m	struct:redisServer	access:public
masterport	server.h	/^    int masterport;                 \/* Port of master *\/$/;"	m	struct:redisServer	access:public
masters	sentinel.c	/^    dict *masters;      \/* Dictionary of master sentinelRedisInstances.$/;"	m	struct:sentinelState	file:	access:public
match	adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list	access:public
max	latency.h	/^    uint32_t max;           \/* Max of current samples. *\/$/;"	m	struct:latencyStats	access:public
max	latency.h	/^    uint32_t max; \/* Max latency observed for this event. *\/$/;"	m	struct:latencyTimeSeries	access:public
max	redis-cli.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:	access:public
max	server.h	/^    double min, max;$/;"	m	struct:__anon36	access:public
max	server.h	/^    robj *min, *max;  \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon37	access:public
max	sparkline.h	/^    double min, max;$/;"	m	struct:sequence	access:public
max_processing_chunk	rio.h	/^    size_t max_processing_chunk;$/;"	m	struct:_rio	access:public
maxbulks	slots_async.c	/^    unsigned int maxbulks;$/;"	m	struct:__anon13	file:	access:public
maxbytes	slots_async.c	/^    unsigned int maxbytes;$/;"	m	struct:__anon13	file:	access:public
maxclients	server.h	/^    unsigned int maxclients;            \/* Max number of simultaneous clients *\/$/;"	m	struct:redisServer	access:public
maxex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon36	access:public
maxex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon37	access:public
maxfd	ae.h	/^    int maxfd;   \/* highest file descriptor currently registered *\/$/;"	m	struct:aeEventLoop	access:public
maxidletime	server.h	/^    int maxidletime;                \/* Client timeout in seconds *\/$/;"	m	struct:redisServer	access:public
maxlen	scripting.c	/^    size_t maxlen;  \/* Max var dump \/ reply length. *\/$/;"	m	struct:ldbState	file:	access:public
maxlen_hint_sent	scripting.c	/^    int maxlen_hint_sent; \/* Did we already hint about "set maxlen"? *\/$/;"	m	struct:ldbState	file:	access:public
maxmemory	server.h	/^    unsigned long long maxmemory;   \/* Max number of memory bytes to use *\/$/;"	m	struct:redisServer	access:public
maxmemory_policy	server.h	/^    int maxmemory_policy;           \/* Policy for key eviction *\/$/;"	m	struct:redisServer	access:public
maxmemory_policy_enum	config.c	/^configEnum maxmemory_policy_enum[] = {$/;"	v
maxmemory_samples	server.h	/^    int maxmemory_samples;          \/* Pricision of random sampling *\/$/;"	m	struct:redisServer	access:public
maxstring	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct	access:public
mb_delim	redis-cli.c	/^    sds mb_delim;$/;"	m	struct:config	file:	access:public
mbulkhdr	server.h	/^    *mbulkhdr[OBJ_SHARED_BULKHDR_LEN], \/* "*<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct	access:public
med3	pqsort.c	/^med3(char *a, char *b, char *c,$/;"	f	file:	signature:(char *a, char *b, char *c, int (*cmp) (const void *, const void *))
med3	pqsort.c	/^static inline char	*med3 (char *, char *, char *,$/;"	p	file:	signature:(char *, char *, char *, int (*)(const void *, const void *))
member	geo.h	/^    char *member;$/;"	m	struct:geoPoint	access:public
membersOfAllNeighbors	geo.c	/^int membersOfAllNeighbors(robj *zobj, GeoHashRadius n, double lon, double lat, double radius, geoArray *ga) {$/;"	f	signature:(robj *zobj, GeoHashRadius n, double lon, double lat, double radius, geoArray *ga)
membersOfGeoHashBox	geo.c	/^int membersOfGeoHashBox(robj *zobj, GeoHashBits hash, geoArray *ga, double lon, double lat, double radius) {$/;"	f	signature:(robj *zobj, GeoHashBits hash, geoArray *ga, double lon, double lat, double radius)
memrev16	endianconv.c	/^void memrev16(void *p) {$/;"	f	signature:(void *p)
memrev16	endianconv.h	/^void memrev16(void *p);$/;"	p	signature:(void *p)
memrev16ifbe	endianconv.h	49;"	d
memrev16ifbe	endianconv.h	56;"	d
memrev32	endianconv.c	/^void memrev32(void *p) {$/;"	f	signature:(void *p)
memrev32	endianconv.h	/^void memrev32(void *p);$/;"	p	signature:(void *p)
memrev32ifbe	endianconv.h	50;"	d
memrev32ifbe	endianconv.h	57;"	d
memrev64	endianconv.c	/^void memrev64(void *p) {$/;"	f	signature:(void *p)
memrev64	endianconv.h	/^void memrev64(void *p);$/;"	p	signature:(void *p)
memrev64ifbe	endianconv.h	51;"	d
memrev64ifbe	endianconv.h	58;"	d
memtest	memtest.c	/^void memtest(size_t megabytes, int passes) {$/;"	f	signature:(size_t megabytes, int passes)
memtest	server.c	/^void memtest(size_t megabytes, int passes);$/;"	p	file:	signature:(size_t megabytes, int passes)
memtest_addressing	memtest.c	/^int memtest_addressing(unsigned long *l, size_t bytes, int interactive) {$/;"	f	signature:(unsigned long *l, size_t bytes, int interactive)
memtest_alloc_and_test	memtest.c	/^void memtest_alloc_and_test(size_t megabytes, int passes) {$/;"	f	signature:(size_t megabytes, int passes)
memtest_compare	memtest.c	/^int memtest_compare(unsigned long *l, size_t bytes, int interactive) {$/;"	f	signature:(unsigned long *l, size_t bytes, int interactive)
memtest_compare_times	memtest.c	/^int memtest_compare_times(unsigned long *m, size_t bytes, int pass, int times,$/;"	f	signature:(unsigned long *m, size_t bytes, int pass, int times, int interactive)
memtest_fill_random	memtest.c	/^void memtest_fill_random(unsigned long *l, size_t bytes, int interactive) {$/;"	f	signature:(unsigned long *l, size_t bytes, int interactive)
memtest_fill_value	memtest.c	/^void memtest_fill_value(unsigned long *l, size_t bytes, unsigned long v1,$/;"	f	signature:(unsigned long *l, size_t bytes, unsigned long v1, unsigned long v2, char sym, int interactive)
memtest_preserving_test	memtest.c	/^int memtest_preserving_test(unsigned long *m, size_t bytes, int passes) {$/;"	f	signature:(unsigned long *m, size_t bytes, int passes)
memtest_preserving_test	server.h	/^int memtest_preserving_test(unsigned long *m, size_t bytes, int passes);$/;"	p	signature:(unsigned long *m, size_t bytes, int passes)
memtest_progress_end	memtest.c	/^void memtest_progress_end(void) {$/;"	f	signature:(void)
memtest_progress_start	memtest.c	/^void memtest_progress_start(char *title, int pass) {$/;"	f	signature:(char *title, int pass)
memtest_progress_step	memtest.c	/^void memtest_progress_step(size_t curr, size_t size, char c) {$/;"	f	signature:(size_t curr, size_t size, char c)
memtest_test	memtest.c	/^int memtest_test(unsigned long *m, size_t bytes, int passes, int interactive) {$/;"	f	signature:(unsigned long *m, size_t bytes, int passes, int interactive)
memtest_test_linux_anonymous_maps	debug.c	/^int memtest_test_linux_anonymous_maps(void) {$/;"	f	signature:(void)
memtoll	util.c	/^long long memtoll(const char *p, int *err) {$/;"	f	signature:(const char *p, int *err)
memtoll	util.h	/^long long memtoll(const char *p, int *err);$/;"	p	signature:(const char *p, int *err)
message_len	cluster.h	/^    uint32_t message_len;$/;"	m	struct:__anon3	access:public
messagebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
mf_can_start	cluster.h	/^    int mf_can_start;           \/* If non-zero signal that the manual failover$/;"	m	struct:clusterState	access:public
mf_end	cluster.h	/^    mstime_t mf_end;            \/* Manual failover time limit (ms unixtime).$/;"	m	struct:clusterState	access:public
mf_master_offset	cluster.h	/^    long long mf_master_offset; \/* Master offset the slave needs to start MF$/;"	m	struct:clusterState	access:public
mf_slave	cluster.h	/^    clusterNode *mf_slave;      \/* Slave performing the manual failover. *\/$/;"	m	struct:clusterState	access:public
mflags	cluster.h	/^    unsigned char mflags[3]; \/* Message flags: CLUSTERMSG_FLAG[012]_... *\/$/;"	m	struct:__anon9	access:public
mgetCommand	server.h	/^void mgetCommand(client *c);$/;"	p	signature:(client *c)
mgetCommand	t_string.c	/^void mgetCommand(client *c) {$/;"	f	signature:(client *c)
microseconds	server.h	/^    long long microseconds, calls;$/;"	m	struct:redisCommand	access:public
migrateCacheDictType	server.c	/^dictType migrateCacheDictType = {$/;"	v
migrateCachedSocket	cluster.c	/^typedef struct migrateCachedSocket {$/;"	s	file:
migrateCachedSocket	cluster.c	/^} migrateCachedSocket;$/;"	t	typeref:struct:migrateCachedSocket	file:
migrateCachedSocket::fd	cluster.c	/^    int fd;$/;"	m	struct:migrateCachedSocket	file:	access:public
migrateCachedSocket::last_dbid	cluster.c	/^    long last_dbid;$/;"	m	struct:migrateCachedSocket	file:	access:public
migrateCachedSocket::last_use_time	cluster.c	/^    time_t last_use_time;$/;"	m	struct:migrateCachedSocket	file:	access:public
migrateCloseSocket	cluster.c	/^void migrateCloseSocket(robj *host, robj *port) {$/;"	f	signature:(robj *host, robj *port)
migrateCloseTimedoutSockets	cluster.c	/^void migrateCloseTimedoutSockets(void) {$/;"	f	signature:(void)
migrateCloseTimedoutSockets	server.h	/^void migrateCloseTimedoutSockets(void);$/;"	p	signature:(void)
migrateCommand	cluster.c	/^void migrateCommand(client *c) {$/;"	f	signature:(client *c)
migrateCommand	server.h	/^void migrateCommand(client *c);$/;"	p	signature:(client *c)
migrateGetKeys	db.c	/^int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
migrateGetKeys	server.h	/^int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);$/;"	p	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
migrateGetSocket	cluster.c	/^migrateCachedSocket* migrateGetSocket(client *c, robj *host, robj *port, long timeout) {$/;"	f	signature:(client *c, robj *host, robj *port, long timeout)
migrate_cached_sockets	server.h	/^    dict *migrate_cached_sockets;\/* MIGRATE cached sockets *\/$/;"	m	struct:redisServer	access:public
migrating_slots_to	cluster.h	/^    clusterNode *migrating_slots_to[CLUSTER_SLOTS];$/;"	m	struct:clusterState	access:public
min	latency.h	/^    uint32_t min;           \/* Min of current samples. *\/$/;"	m	struct:latencyStats	access:public
min	pqsort.c	49;"	d	file:
min	server.h	/^    double min, max;$/;"	m	struct:__anon36	access:public
min	server.h	/^    robj *min, *max;  \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon37	access:public
min	sparkline.h	/^    double min, max;$/;"	m	struct:sequence	access:public
minex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon36	access:public
minex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon37	access:public
minreplicas	server.h	/^    int minreplicas;        \/* MINREPLICAS for synchronous replication *\/$/;"	m	struct:multiState	access:public
minreplicas_timeout	server.h	/^    time_t minreplicas_timeout; \/* MINREPLICAS timeout as unixtime. *\/$/;"	m	struct:multiState	access:public
minstring	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct	access:public
mixDigest	debug.c	/^void mixDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f	signature:(unsigned char *digest, void *ptr, size_t len)
mixObjectDigest	debug.c	/^void mixObjectDigest(unsigned char *digest, robj *o) {$/;"	f	signature:(unsigned char *digest, robj *o)
monitorCommand	server.c	/^void monitorCommand(client *c) {$/;"	f	signature:(client *c)
monitorCommand	server.h	/^void monitorCommand(client *c);$/;"	p	signature:(client *c)
monitor_mode	redis-cli.c	/^    int monitor_mode;$/;"	m	struct:config	file:	access:public
monitors	server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer	access:public
moveCommand	db.c	/^void moveCommand(client *c) {$/;"	f	signature:(client *c)
moveCommand	server.h	/^void moveCommand(client *c);$/;"	p	signature:(client *c)
move_slot	redis-trib.rb	/^    def move_slot(source,target,slot,o={})$/;"	f	class:RedisTrib.alloc_slots
msetCommand	server.h	/^void msetCommand(client *c);$/;"	p	signature:(client *c)
msetCommand	t_string.c	/^void msetCommand(client *c) {$/;"	f	signature:(client *c)
msetGenericCommand	t_string.c	/^void msetGenericCommand(client *c, int nx) {$/;"	f	signature:(client *c, int nx)
msetnxCommand	server.h	/^void msetnxCommand(client *c);$/;"	p	signature:(client *c)
msetnxCommand	t_string.c	/^void msetnxCommand(client *c) {$/;"	f	signature:(client *c)
msg	cluster.h	/^        clusterMsgDataPublish msg;$/;"	m	struct:clusterMsgData::__anon7	access:public
mstate	server.h	/^    multiState mstate;      \/* MULTI\/EXEC state *\/$/;"	m	struct:client	access:public
mstime	quicklist.c	/^static long long mstime(void) { return ustime() \/ 1000; }$/;"	f	file:	signature:(void)
mstime	redis-benchmark.c	/^static long long mstime(void) {$/;"	f	file:	signature:(void)
mstime	redis-cli.c	/^static long long mstime(void) {$/;"	f	file:	signature:(void)
mstime	server.c	/^mstime_t mstime(void) {$/;"	f	signature:(void)
mstime	server.h	/^    long long mstime;       \/* Like 'unixtime' but with milliseconds resolution. *\/$/;"	m	struct:redisServer	access:public
mstime	server.h	/^long long mstime(void);$/;"	p	signature:(void)
mstime_t	server.h	/^typedef long long mstime_t; \/* millisecond time type. *\/$/;"	t
multiCmd	server.h	/^typedef struct multiCmd {$/;"	s
multiCmd	server.h	/^} multiCmd;$/;"	t	typeref:struct:multiCmd
multiCmd::argc	server.h	/^    int argc;$/;"	m	struct:multiCmd	access:public
multiCmd::argv	server.h	/^    robj **argv;$/;"	m	struct:multiCmd	access:public
multiCmd::cmd	server.h	/^    struct redisCommand *cmd;$/;"	m	struct:multiCmd	typeref:struct:multiCmd::redisCommand	access:public
multiCommand	multi.c	/^void multiCommand(client *c) {$/;"	f	signature:(client *c)
multiCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
multiCommand	server.h	/^void multiCommand(client *c);$/;"	p	signature:(client *c)
multiState	server.h	/^typedef struct multiState {$/;"	s
multiState	server.h	/^} multiState;$/;"	t	typeref:struct:multiState
multiState::commands	server.h	/^    multiCmd *commands;     \/* Array of MULTI commands *\/$/;"	m	struct:multiState	access:public
multiState::count	server.h	/^    int count;              \/* Total number of MULTI commands *\/$/;"	m	struct:multiState	access:public
multiState::minreplicas	server.h	/^    int minreplicas;        \/* MINREPLICAS for synchronous replication *\/$/;"	m	struct:multiState	access:public
multiState::minreplicas_timeout	server.h	/^    time_t minreplicas_timeout; \/* MINREPLICAS timeout as unixtime. *\/$/;"	m	struct:multiState	access:public
multibulklen	server.h	/^    int multibulklen;       \/* Number of multi bulk arguments left to read. *\/$/;"	m	struct:client	access:public
myid	sentinel.c	/^    char myid[CONFIG_RUN_ID_SIZE+1]; \/* This sentinel ID. *\/$/;"	m	struct:sentinelState	file:	access:public
myself	cluster.c	/^clusterNode *myself = NULL;$/;"	v
myself	cluster.h	/^    clusterNode *myself;  \/* This node *\/$/;"	m	struct:clusterState	access:public
myslots	cluster.h	/^    unsigned char myslots[CLUSTER_SLOTS\/8];$/;"	m	struct:__anon9	access:public
name	cluster.c	/^    char *name;$/;"	m	struct:redisNodeFlags	file:	access:public
name	cluster.h	/^    char name[CLUSTER_NAMELEN]; \/* Node name, hex string, sha1-size *\/$/;"	m	struct:clusterNode	access:public
name	config.c	/^    const char *name;$/;"	m	struct:configEnum	file:	access:public
name	help.h	/^  char *name;$/;"	m	struct:commandHelp	access:public
name	sentinel.c	/^    char *name;     \/* Master name from the point of view of this sentinel. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
name	server.h	/^    char *name;$/;"	m	struct:redisCommand	access:public
name	server.h	/^    char *name;$/;"	m	struct:redisFunctionSym	access:public
name	server.h	/^    robj *name;             \/* As set by CLIENT SETNAME. *\/$/;"	m	struct:client	access:public
neterr	server.h	/^    char neterr[ANET_ERR_LEN];   \/* Error buffer for anet.c *\/$/;"	m	struct:redisServer	access:public
next	adlist.h	/^    listNode *next;$/;"	m	struct:listIter	access:public
next	adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode	access:public
next	ae.h	/^    struct aeTimeEvent *next;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent::aeTimeEvent	access:public
next	dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry	access:public
next	quicklist.h	/^    struct quicklistNode *next;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode::quicklistNode	access:public
next	rand.c	/^static void next(void) {$/;"	f	file:	signature:(void)
next	rand.c	/^static void next(void);$/;"	p	file:	signature:(void)
nextEntry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator	access:public
next_client_id	server.h	/^    uint64_t next_client_id;    \/* Next client unique ID. Incremental. *\/$/;"	m	struct:redisServer	access:public
noautherr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
node	cluster.h	/^    struct clusterNode *node;   \/* Node related to this link if any, or NULL *\/$/;"	m	struct:clusterLink	typeref:struct:clusterLink::clusterNode	access:public
node	cluster.h	/^    struct clusterNode *node;  \/* Node reporting the failure condition. *\/$/;"	m	struct:clusterNodeFailReport	typeref:struct:clusterNodeFailReport::clusterNode	access:public
node	quicklist.h	/^    quicklistNode *node;$/;"	m	struct:quicklistEntry	access:public
node	t_zset.c	/^                zskiplistNode *node;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon21	file:	access:public
nodeFailed	cluster.h	66;"	d
nodeHasAddr	cluster.h	63;"	d
nodeInHandshake	cluster.h	62;"	d
nodeIp2String	cluster.c	/^void nodeIp2String(char *buf, clusterLink *link) {$/;"	f	signature:(char *buf, clusterLink *link)
nodeIsMaster	cluster.h	60;"	d
nodeIsSlave	cluster.h	61;"	d
nodeTimedOut	cluster.h	65;"	d
nodeUpdateAddressIfNeeded	cluster.c	/^int nodeUpdateAddressIfNeeded(clusterNode *node, clusterLink *link, int port) {$/;"	f	signature:(clusterNode *node, clusterLink *link, int port)
nodeWithoutAddr	cluster.h	64;"	d
nodecfg	cluster.h	/^        clusterMsgDataUpdate nodecfg;$/;"	m	struct:clusterMsgData::__anon8	access:public
nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN]; \/* Name of the slots owner. *\/$/;"	m	struct:__anon4	access:public
nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon1	access:public
nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon2	access:public
nodes	cluster.h	/^    dict *nodes;          \/* Hash table of name -> clusterNode structures *\/$/;"	m	struct:clusterState	access:public
nodes_black_list	cluster.h	/^    dict *nodes_black_list; \/* Nodes we don't re-add for a few seconds. *\/$/;"	m	struct:clusterState	access:public
nodes_with_keys_in_slot	redis-trib.rb	/^    def nodes_with_keys_in_slot(slot)$/;"	f	class:RedisTrib
nokeyerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
noninteractive	redis-cli.c	/^static int noninteractive(int argc, char **argv) {$/;"	f	file:	signature:(int argc, char **argv)
noreplicaserr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
noscripterr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
notification_script	sentinel.c	/^    char *notification_script;$/;"	m	struct:sentinelRedisInstance	file:	access:public
notifyKeyspaceEvent	notify.c	/^void notifyKeyspaceEvent(int type, char *event, robj *key, int dbid) {$/;"	f	signature:(int type, char *event, robj *key, int dbid)
notifyKeyspaceEvent	server.h	/^void notifyKeyspaceEvent(int type, char *event, robj *key, int dbid);$/;"	p	signature:(int type, char *event, robj *key, int dbid)
notifySlotsmgrtAsyncClient	slots_async.c	/^notifySlotsmgrtAsyncClient(slotsmgrtAsyncClient *ac, const char *errmsg) {$/;"	f	file:	signature:(slotsmgrtAsyncClient *ac, const char *errmsg)
notify_keyspace_events	server.h	/^    int notify_keyspace_events; \/* Events to propagate via Pub\/Sub. This is an$/;"	m	struct:redisServer	access:public
notused	hyperloglog.c	/^    uint8_t notused[3]; \/* Reserved for future use, must be zero. *\/$/;"	m	struct:hllhdr	file:	access:public
notused0	cluster.h	/^    uint16_t notused0;  \/* 2 bytes not used. *\/$/;"	m	struct:__anon9	access:public
notused1	cluster.h	/^    char notused1[32];  \/* 32 bytes reserved for future usage. *\/$/;"	m	struct:__anon9	access:public
notused1	cluster.h	/^    uint16_t notused1;          \/* Some room for future improvements. *\/$/;"	m	struct:__anon1	access:public
notused2	cluster.h	/^    uint32_t notused2;$/;"	m	struct:__anon1	access:public
npending	ae_evport.c	/^    int     npending;                           \/* # of pending fds *\/$/;"	m	struct:aeApiState	file:	access:public
ntohu64	endianconv.h	68;"	d
ntohu64	endianconv.h	71;"	d
nul	setproctitle.c	/^	char *nul;$/;"	m	struct:__anon39	file:	access:public
nullbulk	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct	access:public
nullmultibulk	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct	access:public
numberOfRestoreCommandsFromObject	slots_async.c	/^numberOfRestoreCommandsFromObject(robj *val, long long maxbulks) {$/;"	f	file:	signature:(robj *val, long long maxbulks)
numclients	redis-benchmark.c	/^    int numclients;$/;"	m	struct:config	file:	access:public
numfds	rio.h	/^            int numfds;$/;"	m	struct:_rio::__anon24::__anon27	access:public
numops	server.h	/^    int numops;$/;"	m	struct:redisOpArray	access:public
numreplicas	server.h	/^    int numreplicas;        \/* Number of replicas we are waiting for ACK. *\/$/;"	m	struct:blockingState	access:public
numslaves	cluster.h	/^    int numslaves;  \/* Number of slave nodes, if this is a master *\/$/;"	m	struct:clusterNode	access:public
numslots	cluster.h	/^    int numslots;   \/* Number of slots handled by this node *\/$/;"	m	struct:clusterNode	access:public
o_down_since_time	sentinel.c	/^    mstime_t o_down_since_time; \/* Objectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
obj	server.h	/^    robj *obj;$/;"	m	struct:_redisSortObject	access:public
obj	server.h	/^    robj *obj;$/;"	m	struct:zskiplistNode	access:public
objectCommand	object.c	/^void objectCommand(client *c) {$/;"	f	signature:(client *c)
objectCommand	server.h	/^void objectCommand(client *c);$/;"	p	signature:(client *c)
objectCommandLookup	object.c	/^robj *objectCommandLookup(client *c, robj *key) {$/;"	f	signature:(client *c, robj *key)
objectCommandLookupOrReply	object.c	/^robj *objectCommandLookupOrReply(client *c, robj *key, robj *reply) {$/;"	f	signature:(client *c, robj *key, robj *reply)
obuf	redis-benchmark.c	/^    sds obuf;$/;"	m	struct:_client	file:	access:public
obuf_soft_limit_reached_time	server.h	/^    time_t obuf_soft_limit_reached_time;$/;"	m	struct:client	access:public
offset	bitops.c	/^    uint64_t offset;    \/* Bitfield offset. *\/$/;"	m	struct:bitfieldOp	file:	access:public
offset	cluster.h	/^    uint64_t offset;    \/* Master replication offset if node is a master or$/;"	m	struct:__anon9	access:public
offset	quicklist.h	/^    int offset;$/;"	m	struct:quicklistEntry	access:public
offset	quicklist.h	/^    long offset; \/* offset in current ziplist *\/$/;"	m	struct:quicklistIter	access:public
ok	intset.c	/^static void ok(void) {$/;"	f	file:	signature:(void)
ok	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
oomerr	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
opcode	bitops.c	/^    int opcode;         \/* Operation id. *\/$/;"	m	struct:bitfieldOp	file:	access:public
openDirectLogFiledes	debug.c	/^int openDirectLogFiledes(void) {$/;"	f	signature:(void)
ops	server.h	/^    redisOp *ops;$/;"	m	struct:redisOpArray	access:public
optimization_level	quicklist.c	/^static const size_t optimization_level[] = {4096, 8192, 16384, 32768, 65536};$/;"	v	file:
org	redis-cli.c	/^    struct commandHelp *org;$/;"	m	struct:__anon38	typeref:struct:__anon38::commandHelp	file:	access:public
orig_commands	server.h	/^    dict *orig_commands;        \/* Command table before command renaming. *\/$/;"	m	struct:redisServer	access:public
orphaned_time	cluster.h	/^    mstime_t orphaned_time;     \/* Starting time of orphaned master condition *\/$/;"	m	struct:clusterNode	access:public
outofrangeerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
output	redis-cli.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:	access:public
owtype	bitops.c	/^    int owtype;         \/* Overflow type to use. *\/$/;"	m	struct:bitfieldOp	file:	access:public
p	ziplist.c	/^    unsigned char *p;$/;"	m	struct:zlentry	file:	access:public
parallel_syncs	sentinel.c	/^    int parallel_syncs; \/* How many slaves to reconfigure at same time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
params	help.h	/^  char *params;$/;"	m	struct:commandHelp	access:public
parseOptions	redis-benchmark.c	/^int parseOptions(int argc, const char **argv) {$/;"	f	signature:(int argc, const char **argv)
parseOptions	redis-cli.c	/^static int parseOptions(int argc, char **argv) {$/;"	f	file:	signature:(int argc, char **argv)
parseScanCursorOrReply	db.c	/^int parseScanCursorOrReply(client *c, robj *o, unsigned long *cursor) {$/;"	f	signature:(client *c, robj *o, unsigned long *cursor)
parseScanCursorOrReply	server.h	/^int parseScanCursorOrReply(client *c, robj *o, unsigned long *cursor);$/;"	p	signature:(client *c, robj *o, unsigned long *cursor)
parse_int	slots.c	/^parse_int(client *c, robj *obj, int *p) {$/;"	f	file:	signature:(client *c, robj *obj, int *p)
parse_options	redis-trib.rb	/^    def parse_options(cmd)$/;"	f	class:RedisTrib.alloc_slots
parse_slot	slots.c	/^parse_slot(client *c, robj *obj, int *p) {$/;"	f	file:	signature:(client *c, robj *obj, int *p)
parse_timeout	slots.c	/^parse_timeout(client *c, robj *obj, int *p) {$/;"	f	file:	signature:(client *c, robj *obj, int *p)
pathIsBaseName	util.c	/^int pathIsBaseName(char *path) {$/;"	f	signature:(char *path)
pathIsBaseName	util.h	/^int pathIsBaseName(char *path);$/;"	p	signature:(char *path)
pattern	redis-cli.c	/^    char *pattern;$/;"	m	struct:config	file:	access:public
pattern	server.h	/^    robj *pattern;$/;"	m	struct:_redisSortOperation	access:public
pattern	server.h	/^    robj *pattern;$/;"	m	struct:pubsubPattern	access:public
pauseClients	networking.c	/^void pauseClients(mstime_t end) {$/;"	f	signature:(mstime_t end)
pauseClients	server.h	/^void pauseClients(mstime_t duration);$/;"	p	signature:(mstime_t duration)
pc	sentinel.c	/^    redisAsyncContext *pc; \/* Hiredis context for Pub \/ Sub. *\/$/;"	m	struct:instanceLink	file:	access:public
pc_conn_time	sentinel.c	/^    mstime_t pc_conn_time; \/* pc connection time. *\/$/;"	m	struct:instanceLink	file:	access:public
pc_last_activity	sentinel.c	/^    mstime_t pc_last_activity; \/* Last time we received any message. *\/$/;"	m	struct:instanceLink	file:	access:public
peerid	server.h	/^    sds peerid;             \/* Cached peer ID. *\/$/;"	m	struct:client	access:public
pending	redis-benchmark.c	/^    int pending;            \/* Number of pending requests (replies to consume) *\/$/;"	m	struct:_client	file:	access:public
pending_commands	sentinel.c	/^    int pending_commands;  \/* Number of commands sent waiting for a reply. *\/$/;"	m	struct:instanceLink	file:	access:public
pending_fds	ae_evport.c	/^    int     pending_fds[MAX_EVENT_BATCHSZ];     \/* pending fds *\/$/;"	m	struct:aeApiState	file:	access:public
pending_masks	ae_evport.c	/^    int     pending_masks[MAX_EVENT_BATCHSZ];   \/* pending fds' masks *\/$/;"	m	struct:aeApiState	file:	access:public
period	latency.h	/^    time_t period;          \/* Number of seconds since first event and now. *\/$/;"	m	struct:latencyStats	access:public
persistCommand	db.c	/^void persistCommand(client *c) {$/;"	f	signature:(client *c)
persistCommand	server.h	/^void persistCommand(client *c);$/;"	p	signature:(client *c)
pexpireCommand	db.c	/^void pexpireCommand(client *c) {$/;"	f	signature:(client *c)
pexpireCommand	server.h	/^void pexpireCommand(client *c);$/;"	p	signature:(client *c)
pexpireatCommand	db.c	/^void pexpireatCommand(client *c) {$/;"	f	signature:(client *c)
pexpireatCommand	server.h	/^void pexpireatCommand(client *c);$/;"	p	signature:(client *c)
pfaddCommand	hyperloglog.c	/^void pfaddCommand(client *c) {$/;"	f	signature:(client *c)
pfaddCommand	server.h	/^void pfaddCommand(client *c);$/;"	p	signature:(client *c)
pfcountCommand	hyperloglog.c	/^void pfcountCommand(client *c) {$/;"	f	signature:(client *c)
pfcountCommand	server.h	/^void pfcountCommand(client *c);$/;"	p	signature:(client *c)
pfdebugCommand	hyperloglog.c	/^void pfdebugCommand(client *c) {$/;"	f	signature:(client *c)
pfdebugCommand	server.h	/^void pfdebugCommand(client *c);$/;"	p	signature:(client *c)
pfmergeCommand	hyperloglog.c	/^void pfmergeCommand(client *c) {$/;"	f	signature:(client *c)
pfmergeCommand	server.h	/^void pfmergeCommand(client *c);$/;"	p	signature:(client *c)
pfselftestCommand	hyperloglog.c	/^void pfselftestCommand(client *c) {$/;"	f	signature:(client *c)
pfselftestCommand	server.h	/^void pfselftestCommand(client *c);$/;"	p	signature:(client *c)
pid	sentinel.c	/^    pid_t pid;              \/* Script execution pid. *\/$/;"	m	struct:sentinelScriptJob	file:	access:public
pid	server.h	/^    pid_t pid;                  \/* Main process pid. *\/$/;"	m	struct:redisServer	access:public
pidfile	server.h	/^    char *pidfile;              \/* PID file path *\/$/;"	m	struct:redisServer	access:public
ping	cluster.h	/^    } ping;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon5	access:public
pingCommand	server.c	/^void pingCommand(client *c) {$/;"	f	signature:(client *c)
pingCommand	server.h	/^void pingCommand(client *c);$/;"	p	signature:(client *c)
ping_sent	cluster.h	/^    mstime_t ping_sent;      \/* Unix time we sent latest ping *\/$/;"	m	struct:clusterNode	access:public
ping_sent	cluster.h	/^    uint32_t ping_sent;$/;"	m	struct:__anon1	access:public
pipeMode	redis-cli.c	/^static void pipeMode(void) {$/;"	f	file:	signature:(void)
pipe_mode	redis-cli.c	/^    int pipe_mode;$/;"	m	struct:config	file:	access:public
pipe_timeout	redis-cli.c	/^    int pipe_timeout;$/;"	m	struct:config	file:	access:public
pipeline	redis-benchmark.c	/^    int pipeline;$/;"	m	struct:config	file:	access:public
plus	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
pmessagebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
pointer	server.h	/^    unsigned long pointer;$/;"	m	struct:redisFunctionSym	access:public
pong	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
pong_received	cluster.h	/^    mstime_t pong_received;  \/* Unix time we received the pong *\/$/;"	m	struct:clusterNode	access:public
pong_received	cluster.h	/^    uint32_t pong_received;$/;"	m	struct:__anon1	access:public
pop	ziplist.c	/^static unsigned char *pop(unsigned char *zl, int where) {$/;"	f	file:	signature:(unsigned char *zl, int where)
popGenericCommand	server.h	/^void popGenericCommand(client *c, int where);$/;"	p	signature:(client *c, int where)
popGenericCommand	t_list.c	/^void popGenericCommand(client *c, int where) {$/;"	f	signature:(client *c, int where)
populateCommandTable	server.c	/^void populateCommandTable(void) {$/;"	f	signature:(void)
populateCommandTable	server.h	/^void populateCommandTable(void);$/;"	p	signature:(void)
populate_nodes_replicas_info	redis-trib.rb	/^    def populate_nodes_replicas_info$/;"	f	class:RedisTrib.alloc_slots
port	cluster.h	/^    int port;                   \/* Latest known port of this node *\/$/;"	m	struct:clusterNode	access:public
port	cluster.h	/^    uint16_t port;              \/* port last time it was seen *\/$/;"	m	struct:__anon1	access:public
port	cluster.h	/^    uint16_t port;      \/* Sender TCP base port *\/$/;"	m	struct:__anon9	access:public
port	sentinel.c	/^    int port;$/;"	m	struct:sentinelAddr	file:	access:public
port	server.h	/^    int port;                   \/* TCP listening port *\/$/;"	m	struct:redisServer	access:public
port	server.h	/^    int port;$/;"	m	struct:__anon29	access:public
portfd	ae_evport.c	/^    int     portfd;                             \/* event port *\/$/;"	m	struct:aeApiState	file:	access:public
pos	rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anon24::__anon25	access:public
pos	rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anon24::__anon27	access:public
powerLawRand	redis-cli.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f	signature:(long long min, long long max, double alpha)
pqsort	pqsort.c	/^pqsort(void *a, size_t n, size_t es,$/;"	f	signature:(void *a, size_t n, size_t es, int (*cmp) (const void *, const void *), size_t lrange, size_t rrange)
pqsort	pqsort.h	/^pqsort(void *a, size_t n, size_t es,$/;"	p	signature:(void *a, size_t n, size_t es, int (*cmp) (const void *, const void *), size_t lrange, size_t rrange)
pref	redis-cli.c	/^static struct pref {$/;"	s	file:
pref	redis-cli.c	/^} pref;$/;"	v	typeref:struct:pref	file:
pref::hints	redis-cli.c	/^    int hints;$/;"	m	struct:pref	file:	access:public
prefix_pending	redis-benchmark.c	/^    int prefix_pending;     \/* If non-zero, number of pending prefix commands. Commands$/;"	m	struct:_client	file:	access:public
prefixlen	redis-benchmark.c	/^    int prefixlen;          \/* Size in bytes of the pending prefix commands *\/$/;"	m	struct:_client	file:	access:public
prepareClientToWrite	networking.c	/^int prepareClientToWrite(client *c) {$/;"	f	signature:(client *c)
prepareForShutdown	server.c	/^int prepareForShutdown(int flags) {$/;"	f	signature:(int flags)
prepareForShutdown	server.h	/^int prepareForShutdown();$/;"	p	signature:()
prev	adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode	access:public
prev	quicklist.h	/^    struct quicklistNode *prev;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode::quicklistNode	access:public
preventCommandAOF	server.c	/^void preventCommandAOF(client *c) {$/;"	f	signature:(client *c)
preventCommandAOF	server.h	/^void preventCommandAOF(client *c);$/;"	p	signature:(client *c)
preventCommandPropagation	server.c	/^void preventCommandPropagation(client *c) {$/;"	f	signature:(client *c)
preventCommandPropagation	server.h	/^void preventCommandPropagation(client *c);$/;"	p	signature:(client *c)
preventCommandReplication	server.c	/^void preventCommandReplication(client *c) {$/;"	f	signature:(client *c)
preventCommandReplication	server.h	/^void preventCommandReplication(client *c);$/;"	p	signature:(client *c)
previous_time	sentinel.c	/^    mstime_t previous_time;         \/* Last time we ran the time handler. *\/$/;"	m	struct:sentinelState	file:	access:public
prevrawlen	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:	access:public
prevrawlensize	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:	access:public
printBits	bitops.c	/^void printBits(unsigned char *p, unsigned long count) {$/;"	f	signature:(unsigned char *p, unsigned long count)
privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict	access:public
proc	server.h	/^    redisCommandProc *proc;$/;"	m	struct:redisCommand	access:public
process	redis-check-aof.c	/^off_t process(FILE *fp) {$/;"	f	signature:(FILE *fp)
processClientsWaitingReplicas	replication.c	/^void processClientsWaitingReplicas(void) {$/;"	f	signature:(void)
processClientsWaitingReplicas	server.h	/^void processClientsWaitingReplicas(void);$/;"	p	signature:(void)
processCommand	server.c	/^int processCommand(client *c) {$/;"	f	signature:(client *c)
processCommand	server.h	/^int processCommand(client *c);$/;"	p	signature:(client *c)
processEventsWhileBlocked	networking.c	/^int processEventsWhileBlocked(void) {$/;"	f	signature:(void)
processEventsWhileBlocked	server.h	/^int processEventsWhileBlocked(void);$/;"	p	signature:(void)
processInlineBuffer	networking.c	/^int processInlineBuffer(client *c) {$/;"	f	signature:(client *c)
processInputBuffer	networking.c	/^void processInputBuffer(client *c) {$/;"	f	signature:(client *c)
processInputBuffer	server.h	/^void processInputBuffer(client *c);$/;"	p	signature:(client *c)
processMultibulkBuffer	networking.c	/^int processMultibulkBuffer(client *c) {$/;"	f	signature:(client *c)
processTimeEvents	ae.c	/^static int processTimeEvents(aeEventLoop *eventLoop) {$/;"	f	file:	signature:(aeEventLoop *eventLoop)
processUnblockedClients	blocked.c	/^void processUnblockedClients(void) {$/;"	f	signature:(void)
processUnblockedClients	server.h	/^void processUnblockedClients(void);$/;"	p	signature:(void)
processed_bytes	rio.h	/^    size_t processed_bytes;$/;"	m	struct:_rio	access:public
progress_full	memtest.c	/^size_t progress_full; \/* How many chars to write to fill the progress bar. *\/$/;"	v
progress_printed	memtest.c	/^size_t progress_printed; \/* Printed chars in screen-wide progress bar. *\/$/;"	v
promoted_slave	sentinel.c	/^    struct sentinelRedisInstance *promoted_slave; \/* Promoted slave instance. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:	access:public
prompt	redis-cli.c	/^    char prompt[128];$/;"	m	struct:config	file:	access:public
propagate	server.c	/^void propagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f	signature:(struct redisCommand *cmd, int dbid, robj **argv, int argc, int flags)
propagate	server.h	/^void propagate(struct redisCommand *cmd, int dbid, robj **argv, int argc, int flags);$/;"	p	signature:(struct redisCommand *cmd, int dbid, robj **argv, int argc, int flags)
propagateExpire	db.c	/^void propagateExpire(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
propagateExpire	server.h	/^void propagateExpire(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
protected_mode	server.h	/^    int protected_mode;         \/* Don't accept external connections. *\/$/;"	m	struct:redisServer	access:public
psetexCommand	server.h	/^void psetexCommand(client *c);$/;"	p	signature:(client *c)
psetexCommand	t_string.c	/^void psetexCommand(client *c) {$/;"	f	signature:(client *c)
psubscribeCommand	pubsub.c	/^void psubscribeCommand(client *c) {$/;"	f	signature:(client *c)
psubscribeCommand	server.h	/^void psubscribeCommand(client *c);$/;"	p	signature:(client *c)
psubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
psync_initial_offset	server.h	/^    long long psync_initial_offset; \/* FULLRESYNC reply offset other slaves$/;"	m	struct:client	access:public
ptr	rio.h	/^            sds ptr;$/;"	m	struct:_rio::__anon24::__anon25	access:public
ptr	server.h	/^    void *ptr;$/;"	m	struct:redisObject	access:public
pttlCommand	db.c	/^void pttlCommand(client *c) {$/;"	f	signature:(client *c)
pttlCommand	server.h	/^void pttlCommand(client *c);$/;"	p	signature:(client *c)
publish	cluster.h	/^    } publish;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon7	access:public
publishCommand	pubsub.c	/^void publishCommand(client *c) {$/;"	f	signature:(client *c)
publishCommand	server.h	/^void publishCommand(client *c);$/;"	p	signature:(client *c)
pubsubCommand	pubsub.c	/^void pubsubCommand(client *c) {$/;"	f	signature:(client *c)
pubsubCommand	server.h	/^void pubsubCommand(client *c);$/;"	p	signature:(client *c)
pubsubPattern	server.h	/^typedef struct pubsubPattern {$/;"	s
pubsubPattern	server.h	/^} pubsubPattern;$/;"	t	typeref:struct:pubsubPattern
pubsubPattern::client	server.h	/^    client *client;$/;"	m	struct:pubsubPattern	access:public
pubsubPattern::pattern	server.h	/^    robj *pattern;$/;"	m	struct:pubsubPattern	access:public
pubsubPublishMessage	pubsub.c	/^int pubsubPublishMessage(robj *channel, robj *message) {$/;"	f	signature:(robj *channel, robj *message)
pubsubPublishMessage	server.h	/^int pubsubPublishMessage(robj *channel, robj *message);$/;"	p	signature:(robj *channel, robj *message)
pubsubSubscribeChannel	pubsub.c	/^int pubsubSubscribeChannel(client *c, robj *channel) {$/;"	f	signature:(client *c, robj *channel)
pubsubSubscribePattern	pubsub.c	/^int pubsubSubscribePattern(client *c, robj *pattern) {$/;"	f	signature:(client *c, robj *pattern)
pubsubUnsubscribeAllChannels	pubsub.c	/^int pubsubUnsubscribeAllChannels(client *c, int notify) {$/;"	f	signature:(client *c, int notify)
pubsubUnsubscribeAllChannels	server.h	/^int pubsubUnsubscribeAllChannels(client *c, int notify);$/;"	p	signature:(client *c, int notify)
pubsubUnsubscribeAllPatterns	pubsub.c	/^int pubsubUnsubscribeAllPatterns(client *c, int notify) {$/;"	f	signature:(client *c, int notify)
pubsubUnsubscribeAllPatterns	server.h	/^int pubsubUnsubscribeAllPatterns(client *c, int notify);$/;"	p	signature:(client *c, int notify)
pubsubUnsubscribeChannel	pubsub.c	/^int pubsubUnsubscribeChannel(client *c, robj *channel, int notify) {$/;"	f	signature:(client *c, robj *channel, int notify)
pubsubUnsubscribePattern	pubsub.c	/^int pubsubUnsubscribePattern(client *c, robj *pattern, int notify) {$/;"	f	signature:(client *c, robj *pattern, int notify)
pubsub_channels	server.h	/^    dict *pubsub_channels;  \/* Map channels to list of subscribed clients *\/$/;"	m	struct:redisServer	access:public
pubsub_channels	server.h	/^    dict *pubsub_channels;  \/* channels a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client	access:public
pubsub_mode	redis-cli.c	/^    int pubsub_mode;$/;"	m	struct:config	file:	access:public
pubsub_patterns	server.h	/^    list *pubsub_patterns;  \/* A list of pubsub_patterns *\/$/;"	m	struct:redisServer	access:public
pubsub_patterns	server.h	/^    list *pubsub_patterns;  \/* patterns a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client	access:public
punsubscribeCommand	pubsub.c	/^void punsubscribeCommand(client *c) {$/;"	f	signature:(client *c)
punsubscribeCommand	server.h	/^void punsubscribeCommand(client *c);$/;"	p	signature:(client *c)
punsubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
pushGenericCommand	t_list.c	/^void pushGenericCommand(client *c, int where) {$/;"	f	signature:(client *c, int where)
pushxGenericCommand	t_list.c	/^void pushxGenericCommand(client *c, robj *refval, robj *val, int where) {$/;"	f	signature:(client *c, robj *refval, robj *val, int where)
putSlaveOnline	replication.c	/^void putSlaveOnline(client *slave) {$/;"	f	signature:(client *slave)
putSlaveOnline	replication.c	/^void putSlaveOnline(client *slave);$/;"	p	file:	signature:(client *slave)
ql_info	quicklist.c	/^static void ql_info(quicklist *ql) {$/;"	f	file:	signature:(quicklist *ql)
ql_verify	quicklist.c	1512;"	d	file:
qsortCompareSetsByCardinality	t_set.c	/^int qsortCompareSetsByCardinality(const void *s1, const void *s2) {$/;"	f	signature:(const void *s1, const void *s2)
qsortCompareSetsByRevCardinality	t_set.c	/^int qsortCompareSetsByRevCardinality(const void *s1, const void *s2) {$/;"	f	signature:(const void *s1, const void *s2)
querybuf	server.h	/^    sds querybuf;           \/* Buffer we use to accumulate client queries. *\/$/;"	m	struct:client	access:public
querybuf_peak	server.h	/^    size_t querybuf_peak;   \/* Recent (100ms or more) peak of querybuf size. *\/$/;"	m	struct:client	access:public
queueMultiCommand	multi.c	/^void queueMultiCommand(client *c) {$/;"	f	signature:(client *c)
queueMultiCommand	server.h	/^void queueMultiCommand(client *c);$/;"	p	signature:(client *c)
queued	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct	access:public
quicklist	quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistEntry	access:public
quicklist	quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistIter	access:public
quicklist	quicklist.h	/^typedef struct quicklist {$/;"	s
quicklist	quicklist.h	/^} quicklist;$/;"	t	typeref:struct:quicklist
quicklist::compress	quicklist.h	/^    unsigned int compress : 16; \/* depth of end nodes not to compress;0=off *\/$/;"	m	struct:quicklist	access:public
quicklist::count	quicklist.h	/^    unsigned long count;        \/* total count of all entries in all ziplists *\/$/;"	m	struct:quicklist	access:public
quicklist::fill	quicklist.h	/^    int fill : 16;              \/* fill factor for individual nodes *\/$/;"	m	struct:quicklist	access:public
quicklist::head	quicklist.h	/^    quicklistNode *head;$/;"	m	struct:quicklist	access:public
quicklist::len	quicklist.h	/^    unsigned int len;           \/* number of quicklistNodes *\/$/;"	m	struct:quicklist	access:public
quicklist::tail	quicklist.h	/^    quicklistNode *tail;$/;"	m	struct:quicklist	access:public
quicklistAllowsCompression	quicklist.c	259;"	d	file:
quicklistAppendValuesFromZiplist	quicklist.c	/^quicklist *quicklistAppendValuesFromZiplist(quicklist *quicklist,$/;"	f	signature:(quicklist *quicklist, unsigned char *zl)
quicklistAppendValuesFromZiplist	quicklist.h	/^quicklist *quicklistAppendValuesFromZiplist(quicklist *quicklist,$/;"	p	signature:(quicklist *quicklist, unsigned char *zl)
quicklistAppendZiplist	quicklist.c	/^void quicklistAppendZiplist(quicklist *quicklist, unsigned char *zl) {$/;"	f	signature:(quicklist *quicklist, unsigned char *zl)
quicklistAppendZiplist	quicklist.h	/^void quicklistAppendZiplist(quicklist *quicklist, unsigned char *zl);$/;"	p	signature:(quicklist *quicklist, unsigned char *zl)
quicklistCompare	quicklist.c	/^int quicklistCompare(unsigned char *p1, unsigned char *p2, int p2_len) {$/;"	f	signature:(unsigned char *p1, unsigned char *p2, int p2_len)
quicklistCompare	quicklist.h	/^int quicklistCompare(unsigned char *p1, unsigned char *p2, int p2_len);$/;"	p	signature:(unsigned char *p1, unsigned char *p2, int p2_len)
quicklistCompress	quicklist.c	333;"	d	file:
quicklistCompressNode	quicklist.c	206;"	d	file:
quicklistCount	quicklist.c	/^unsigned int quicklistCount(quicklist *ql) { return ql->count; }$/;"	f	signature:(quicklist *ql)
quicklistCount	quicklist.h	/^unsigned int quicklistCount(quicklist *ql);$/;"	p	signature:(quicklist *ql)
quicklistCreate	quicklist.c	/^quicklist *quicklistCreate(void) {$/;"	f	signature:(void)
quicklistCreate	quicklist.h	/^quicklist *quicklistCreate(void);$/;"	p	signature:(void)
quicklistCreateFromZiplist	quicklist.c	/^quicklist *quicklistCreateFromZiplist(int fill, int compress,$/;"	f	signature:(int fill, int compress, unsigned char *zl)
quicklistCreateFromZiplist	quicklist.h	/^quicklist *quicklistCreateFromZiplist(int fill, int compress,$/;"	p	signature:(int fill, int compress, unsigned char *zl)
quicklistCreateNode	quicklist.c	/^REDIS_STATIC quicklistNode *quicklistCreateNode(void) {$/;"	f	signature:(void)
quicklistDecompressNode	quicklist.c	234;"	d	file:
quicklistDecompressNodeForUse	quicklist.c	242;"	d	file:
quicklistDelEntry	quicklist.c	/^void quicklistDelEntry(quicklistIter *iter, quicklistEntry *entry) {$/;"	f	signature:(quicklistIter *iter, quicklistEntry *entry)
quicklistDelEntry	quicklist.h	/^void quicklistDelEntry(quicklistIter *iter, quicklistEntry *entry);$/;"	p	signature:(quicklistIter *iter, quicklistEntry *entry)
quicklistDelIndex	quicklist.c	/^REDIS_STATIC int quicklistDelIndex(quicklist *quicklist, quicklistNode *node,$/;"	f	signature:(quicklist *quicklist, quicklistNode *node, unsigned char **p)
quicklistDelRange	quicklist.c	/^int quicklistDelRange(quicklist *quicklist, const long start,$/;"	f	signature:(quicklist *quicklist, const long start, const long count)
quicklistDelRange	quicklist.h	/^int quicklistDelRange(quicklist *quicklist, const long start, const long stop);$/;"	p	signature:(quicklist *quicklist, const long start, const long stop)
quicklistDeleteIfEmpty	quicklist.c	571;"	d	file:
quicklistDup	quicklist.c	/^quicklist *quicklistDup(quicklist *orig) {$/;"	f	signature:(quicklist *orig)
quicklistDup	quicklist.h	/^quicklist *quicklistDup(quicklist *orig);$/;"	p	signature:(quicklist *orig)
quicklistEntry	quicklist.h	/^typedef struct quicklistEntry {$/;"	s
quicklistEntry	quicklist.h	/^} quicklistEntry;$/;"	t	typeref:struct:quicklistEntry
quicklistEntry::longval	quicklist.h	/^    long long longval;$/;"	m	struct:quicklistEntry	access:public
quicklistEntry::node	quicklist.h	/^    quicklistNode *node;$/;"	m	struct:quicklistEntry	access:public
quicklistEntry::offset	quicklist.h	/^    int offset;$/;"	m	struct:quicklistEntry	access:public
quicklistEntry::quicklist	quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistEntry	access:public
quicklistEntry::sz	quicklist.h	/^    unsigned int sz;$/;"	m	struct:quicklistEntry	access:public
quicklistEntry::value	quicklist.h	/^    unsigned char *value;$/;"	m	struct:quicklistEntry	access:public
quicklistEntry::zi	quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistEntry	access:public
quicklistGetIterator	quicklist.c	/^quicklistIter *quicklistGetIterator(const quicklist *quicklist, int direction) {$/;"	f	signature:(const quicklist *quicklist, int direction)
quicklistGetIterator	quicklist.h	/^quicklistIter *quicklistGetIterator(const quicklist *quicklist, int direction);$/;"	p	signature:(const quicklist *quicklist, int direction)
quicklistGetIteratorAtIdx	quicklist.c	/^quicklistIter *quicklistGetIteratorAtIdx(const quicklist *quicklist,$/;"	f	signature:(const quicklist *quicklist, const int direction, const long long idx)
quicklistGetIteratorAtIdx	quicklist.h	/^quicklistIter *quicklistGetIteratorAtIdx(const quicklist *quicklist,$/;"	p	signature:(const quicklist *quicklist, int direction, const long long idx)
quicklistGetLzf	quicklist.c	/^size_t quicklistGetLzf(const quicklistNode *node, void **data) {$/;"	f	signature:(const quicklistNode *node, void **data)
quicklistGetLzf	quicklist.h	/^size_t quicklistGetLzf(const quicklistNode *node, void **data);$/;"	p	signature:(const quicklistNode *node, void **data)
quicklistIndex	quicklist.c	/^int quicklistIndex(const quicklist *quicklist, const long long idx,$/;"	f	signature:(const quicklist *quicklist, const long long idx, quicklistEntry *entry)
quicklistIndex	quicklist.h	/^int quicklistIndex(const quicklist *quicklist, const long long index,$/;"	p	signature:(const quicklist *quicklist, const long long index, quicklistEntry *entry)
quicklistInsertAfter	quicklist.c	/^void quicklistInsertAfter(quicklist *quicklist, quicklistEntry *entry,$/;"	f	signature:(quicklist *quicklist, quicklistEntry *entry, void *value, const size_t sz)
quicklistInsertAfter	quicklist.h	/^void quicklistInsertAfter(quicklist *quicklist, quicklistEntry *node,$/;"	p	signature:(quicklist *quicklist, quicklistEntry *node, void *value, const size_t sz)
quicklistInsertBefore	quicklist.c	/^void quicklistInsertBefore(quicklist *quicklist, quicklistEntry *entry,$/;"	f	signature:(quicklist *quicklist, quicklistEntry *entry, void *value, const size_t sz)
quicklistInsertBefore	quicklist.h	/^void quicklistInsertBefore(quicklist *quicklist, quicklistEntry *node,$/;"	p	signature:(quicklist *quicklist, quicklistEntry *node, void *value, const size_t sz)
quicklistIter	quicklist.h	/^typedef struct quicklistIter {$/;"	s
quicklistIter	quicklist.h	/^} quicklistIter;$/;"	t	typeref:struct:quicklistIter
quicklistIter::current	quicklist.h	/^    quicklistNode *current;$/;"	m	struct:quicklistIter	access:public
quicklistIter::direction	quicklist.h	/^    int direction;$/;"	m	struct:quicklistIter	access:public
quicklistIter::offset	quicklist.h	/^    long offset; \/* offset in current ziplist *\/$/;"	m	struct:quicklistIter	access:public
quicklistIter::quicklist	quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistIter	access:public
quicklistIter::zi	quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistIter	access:public
quicklistLZF	quicklist.h	/^typedef struct quicklistLZF {$/;"	s
quicklistLZF	quicklist.h	/^} quicklistLZF;$/;"	t	typeref:struct:quicklistLZF
quicklistLZF::compressed	quicklist.h	/^    char compressed[];$/;"	m	struct:quicklistLZF	access:public
quicklistLZF::sz	quicklist.h	/^    unsigned int sz; \/* LZF size in bytes*\/$/;"	m	struct:quicklistLZF	access:public
quicklistNew	quicklist.c	/^quicklist *quicklistNew(int fill, int compress) {$/;"	f	signature:(int fill, int compress)
quicklistNew	quicklist.h	/^quicklist *quicklistNew(int fill, int compress);$/;"	p	signature:(int fill, int compress)
quicklistNext	quicklist.c	/^int quicklistNext(quicklistIter *iter, quicklistEntry *entry) {$/;"	f	signature:(quicklistIter *iter, quicklistEntry *entry)
quicklistNext	quicklist.h	/^int quicklistNext(quicklistIter *iter, quicklistEntry *node);$/;"	p	signature:(quicklistIter *iter, quicklistEntry *node)
quicklistNode	quicklist.h	/^typedef struct quicklistNode {$/;"	s
quicklistNode	quicklist.h	/^} quicklistNode;$/;"	t	typeref:struct:quicklistNode
quicklistNode::attempted_compress	quicklist.h	/^    unsigned int attempted_compress : 1; \/* node can't compress; too small *\/$/;"	m	struct:quicklistNode	access:public
quicklistNode::container	quicklist.h	/^    unsigned int container : 2;  \/* NONE==1 or ZIPLIST==2 *\/$/;"	m	struct:quicklistNode	access:public
quicklistNode::count	quicklist.h	/^    unsigned int count : 16;     \/* count of items in ziplist *\/$/;"	m	struct:quicklistNode	access:public
quicklistNode::encoding	quicklist.h	/^    unsigned int encoding : 2;   \/* RAW==1 or LZF==2 *\/$/;"	m	struct:quicklistNode	access:public
quicklistNode::extra	quicklist.h	/^    unsigned int extra : 10; \/* more bits to steal for future usage *\/$/;"	m	struct:quicklistNode	access:public
quicklistNode::next	quicklist.h	/^    struct quicklistNode *next;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode::quicklistNode	access:public
quicklistNode::prev	quicklist.h	/^    struct quicklistNode *prev;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode::quicklistNode	access:public
quicklistNode::recompress	quicklist.h	/^    unsigned int recompress : 1; \/* was this node previous compressed? *\/$/;"	m	struct:quicklistNode	access:public
quicklistNode::sz	quicklist.h	/^    unsigned int sz;             \/* ziplist size in bytes *\/$/;"	m	struct:quicklistNode	access:public
quicklistNode::zl	quicklist.h	/^    unsigned char *zl;$/;"	m	struct:quicklistNode	access:public
quicklistNodeIsCompressed	quicklist.h	114;"	d
quicklistNodeUpdateSz	quicklist.c	471;"	d	file:
quicklistPop	quicklist.c	/^int quicklistPop(quicklist *quicklist, int where, unsigned char **data,$/;"	f	signature:(quicklist *quicklist, int where, unsigned char **data, unsigned int *sz, long long *slong)
quicklistPop	quicklist.h	/^int quicklistPop(quicklist *quicklist, int where, unsigned char **data,$/;"	p	signature:(quicklist *quicklist, int where, unsigned char **data, unsigned int *sz, long long *slong)
quicklistPopCustom	quicklist.c	/^int quicklistPopCustom(quicklist *quicklist, int where, unsigned char **data,$/;"	f	signature:(quicklist *quicklist, int where, unsigned char **data, unsigned int *sz, long long *sval, void *(*saver)(unsigned char *data, unsigned int sz))
quicklistPopCustom	quicklist.h	/^int quicklistPopCustom(quicklist *quicklist, int where, unsigned char **data,$/;"	p	signature:(quicklist *quicklist, int where, unsigned char **data, unsigned int *sz, long long *sval, void *(*saver)(unsigned char *data, unsigned int sz))
quicklistPush	quicklist.c	/^void quicklistPush(quicklist *quicklist, void *value, const size_t sz,$/;"	f	signature:(quicklist *quicklist, void *value, const size_t sz, int where)
quicklistPush	quicklist.h	/^void quicklistPush(quicklist *quicklist, void *value, const size_t sz,$/;"	p	signature:(quicklist *quicklist, void *value, const size_t sz, int where)
quicklistPushHead	quicklist.c	/^int quicklistPushHead(quicklist *quicklist, void *value, size_t sz) {$/;"	f	signature:(quicklist *quicklist, void *value, size_t sz)
quicklistPushHead	quicklist.h	/^int quicklistPushHead(quicklist *quicklist, void *value, const size_t sz);$/;"	p	signature:(quicklist *quicklist, void *value, const size_t sz)
quicklistPushTail	quicklist.c	/^int quicklistPushTail(quicklist *quicklist, void *value, size_t sz) {$/;"	f	signature:(quicklist *quicklist, void *value, size_t sz)
quicklistPushTail	quicklist.h	/^int quicklistPushTail(quicklist *quicklist, void *value, const size_t sz);$/;"	p	signature:(quicklist *quicklist, void *value, const size_t sz)
quicklistRecompressOnly	quicklist.c	342;"	d	file:
quicklistRelease	quicklist.c	/^void quicklistRelease(quicklist *quicklist) {$/;"	f	signature:(quicklist *quicklist)
quicklistRelease	quicklist.h	/^void quicklistRelease(quicklist *quicklist);$/;"	p	signature:(quicklist *quicklist)
quicklistReleaseIterator	quicklist.c	/^void quicklistReleaseIterator(quicklistIter *iter) {$/;"	f	signature:(quicklistIter *iter)
quicklistReleaseIterator	quicklist.h	/^void quicklistReleaseIterator(quicklistIter *iter);$/;"	p	signature:(quicklistIter *iter)
quicklistReplaceAtIndex	quicklist.c	/^int quicklistReplaceAtIndex(quicklist *quicklist, long index, void *data,$/;"	f	signature:(quicklist *quicklist, long index, void *data, int sz)
quicklistReplaceAtIndex	quicklist.h	/^int quicklistReplaceAtIndex(quicklist *quicklist, long index, void *data,$/;"	p	signature:(quicklist *quicklist, long index, void *data, int sz)
quicklistRewind	quicklist.h	/^void quicklistRewind(quicklist *quicklist, quicklistIter *li);$/;"	p	signature:(quicklist *quicklist, quicklistIter *li)
quicklistRewindTail	quicklist.h	/^void quicklistRewindTail(quicklist *quicklist, quicklistIter *li);$/;"	p	signature:(quicklist *quicklist, quicklistIter *li)
quicklistRotate	quicklist.c	/^void quicklistRotate(quicklist *quicklist) {$/;"	f	signature:(quicklist *quicklist)
quicklistRotate	quicklist.h	/^void quicklistRotate(quicklist *quicklist);$/;"	p	signature:(quicklist *quicklist)
quicklistSetCompressDepth	quicklist.c	/^void quicklistSetCompressDepth(quicklist *quicklist, int compress) {$/;"	f	signature:(quicklist *quicklist, int compress)
quicklistSetCompressDepth	quicklist.h	/^void quicklistSetCompressDepth(quicklist *quicklist, int depth);$/;"	p	signature:(quicklist *quicklist, int depth)
quicklistSetFill	quicklist.c	/^void quicklistSetFill(quicklist *quicklist, int fill) {$/;"	f	signature:(quicklist *quicklist, int fill)
quicklistSetFill	quicklist.h	/^void quicklistSetFill(quicklist *quicklist, int fill);$/;"	p	signature:(quicklist *quicklist, int fill)
quicklistSetOptions	quicklist.c	/^void quicklistSetOptions(quicklist *quicklist, int fill, int depth) {$/;"	f	signature:(quicklist *quicklist, int fill, int depth)
quicklistSetOptions	quicklist.h	/^void quicklistSetOptions(quicklist *quicklist, int fill, int depth);$/;"	p	signature:(quicklist *quicklist, int fill, int depth)
quicklistTest	quicklist.c	/^int quicklistTest(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
quicklistTest	quicklist.h	/^int quicklistTest(int argc, char *argv[]);$/;"	p	signature:(int argc, char *argv[])
quiet	redis-benchmark.c	/^    int quiet;$/;"	m	struct:config	file:	access:public
quorum	sentinel.c	/^    unsigned int quorum;\/* Number of sentinels that need to agree on failure. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
r	redis-trib.rb	/^    def r$/;"	f	class:ClusterNode
randfree	redis-benchmark.c	/^    size_t randfree;        \/* Number of unused pointers in client->randptr *\/$/;"	m	struct:_client	file:	access:public
randlen	redis-benchmark.c	/^    size_t randlen;         \/* Number of pointers in client->randptr *\/$/;"	m	struct:_client	file:	access:public
randomizeClientKey	redis-benchmark.c	/^static void randomizeClientKey(client c) {$/;"	f	file:	signature:(client c)
randomkeyCommand	db.c	/^void randomkeyCommand(client *c) {$/;"	f	signature:(client *c)
randomkeyCommand	server.h	/^void randomkeyCommand(client *c);$/;"	p	signature:(client *c)
randomkeys	redis-benchmark.c	/^    int randomkeys;$/;"	m	struct:config	file:	access:public
randomkeys_keyspacelen	redis-benchmark.c	/^    int randomkeys_keyspacelen;$/;"	m	struct:config	file:	access:public
randptr	redis-benchmark.c	/^    char **randptr;         \/* Pointers to :rand: strings inside the command buf *\/$/;"	m	struct:_client	file:	access:public
randstring	ziplist.c	/^static int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f	file:	signature:(char *target, unsigned int min, unsigned int max)
rcvbuf	cluster.h	/^    sds rcvbuf;                 \/* Packet reception buffer *\/$/;"	m	struct:clusterLink	access:public
rdbCheckError	rdb.c	/^void rdbCheckError(const char *fmt, ...);$/;"	p	file:	signature:(const char *fmt, ...)
rdbCheckError	redis-check-rdb.c	/^void rdbCheckError(const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
rdbCheckHandleCrash	redis-check-rdb.c	/^void rdbCheckHandleCrash(int sig, siginfo_t *info, void *secret) {$/;"	f	signature:(int sig, siginfo_t *info, void *secret)
rdbCheckInfo	redis-check-rdb.c	/^void rdbCheckInfo(const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
rdbCheckMode	redis-check-rdb.c	/^int rdbCheckMode = 0;$/;"	v
rdbCheckSetError	rdb.c	/^void rdbCheckSetError(const char *fmt, ...);$/;"	p	file:	signature:(const char *fmt, ...)
rdbCheckSetError	redis-check-rdb.c	/^void rdbCheckSetError(const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
rdbCheckSetupSignals	redis-check-rdb.c	/^void rdbCheckSetupSignals(void) {$/;"	f	signature:(void)
rdbCheckThenExit	rdb.c	/^void rdbCheckThenExit(int linenum, char *reason, ...) {$/;"	f	signature:(int linenum, char *reason, ...)
rdbEncodeInteger	rdb.c	/^int rdbEncodeInteger(long long value, unsigned char *enc) {$/;"	f	signature:(long long value, unsigned char *enc)
rdbExitReportCorruptRDB	rdb.c	48;"	d	file:
rdbGenericLoadStringObject	rdb.c	/^void *rdbGenericLoadStringObject(rio *rdb, int flags) {$/;"	f	signature:(rio *rdb, int flags)
rdbIsObjectType	rdb.h	89;"	d
rdbLoad	rdb.c	/^int rdbLoad(char *filename) {$/;"	f	signature:(char *filename)
rdbLoad	rdb.h	/^int rdbLoad(char *filename);$/;"	p	signature:(char *filename)
rdbLoadDoubleValue	rdb.c	/^int rdbLoadDoubleValue(rio *rdb, double *val) {$/;"	f	signature:(rio *rdb, double *val)
rdbLoadEncodedStringObject	rdb.c	/^robj *rdbLoadEncodedStringObject(rio *rdb) {$/;"	f	signature:(rio *rdb)
rdbLoadIntegerObject	rdb.c	/^void *rdbLoadIntegerObject(rio *rdb, int enctype, int flags) {$/;"	f	signature:(rio *rdb, int enctype, int flags)
rdbLoadLen	rdb.c	/^uint32_t rdbLoadLen(rio *rdb, int *isencoded) {$/;"	f	signature:(rio *rdb, int *isencoded)
rdbLoadLen	rdb.h	/^uint32_t rdbLoadLen(rio *rdb, int *isencoded);$/;"	p	signature:(rio *rdb, int *isencoded)
rdbLoadLzfStringObject	rdb.c	/^void *rdbLoadLzfStringObject(rio *rdb, int flags) {$/;"	f	signature:(rio *rdb, int flags)
rdbLoadMillisecondTime	rdb.c	/^long long rdbLoadMillisecondTime(rio *rdb) {$/;"	f	signature:(rio *rdb)
rdbLoadMillisecondTime	redis-check-rdb.c	/^long long rdbLoadMillisecondTime(rio *rdb);$/;"	p	file:	signature:(rio *rdb)
rdbLoadObject	rdb.c	/^robj *rdbLoadObject(int rdbtype, rio *rdb) {$/;"	f	signature:(int rdbtype, rio *rdb)
rdbLoadObject	rdb.h	/^robj *rdbLoadObject(int type, rio *rdb);$/;"	p	signature:(int type, rio *rdb)
rdbLoadObjectType	rdb.c	/^int rdbLoadObjectType(rio *rdb) {$/;"	f	signature:(rio *rdb)
rdbLoadObjectType	rdb.h	/^int rdbLoadObjectType(rio *rdb);$/;"	p	signature:(rio *rdb)
rdbLoadProgressCallback	rdb.c	/^void rdbLoadProgressCallback(rio *r, const void *buf, size_t len) {$/;"	f	signature:(rio *r, const void *buf, size_t len)
rdbLoadProgressCallback	redis-check-rdb.c	/^void rdbLoadProgressCallback(rio *r, const void *buf, size_t len);$/;"	p	file:	signature:(rio *r, const void *buf, size_t len)
rdbLoadStringObject	rdb.c	/^robj *rdbLoadStringObject(rio *rdb) {$/;"	f	signature:(rio *rdb)
rdbLoadStringObject	rdb.h	/^robj *rdbLoadStringObject(rio *rdb);$/;"	p	signature:(rio *rdb)
rdbLoadTime	rdb.c	/^time_t rdbLoadTime(rio *rdb) {$/;"	f	signature:(rio *rdb)
rdbLoadTime	rdb.h	/^time_t rdbLoadTime(rio *rdb);$/;"	p	signature:(rio *rdb)
rdbLoadType	rdb.c	/^int rdbLoadType(rio *rdb) {$/;"	f	signature:(rio *rdb)
rdbLoadType	rdb.h	/^int rdbLoadType(rio *rdb);$/;"	p	signature:(rio *rdb)
rdbRemoveTempFile	rdb.c	/^void rdbRemoveTempFile(pid_t childpid) {$/;"	f	signature:(pid_t childpid)
rdbRemoveTempFile	rdb.h	/^void rdbRemoveTempFile(pid_t childpid);$/;"	p	signature:(pid_t childpid)
rdbSave	rdb.c	/^int rdbSave(char *filename) {$/;"	f	signature:(char *filename)
rdbSave	rdb.h	/^int rdbSave(char *filename);$/;"	p	signature:(char *filename)
rdbSaveAuxField	rdb.c	/^int rdbSaveAuxField(rio *rdb, void *key, size_t keylen, void *val, size_t vallen) {$/;"	f	signature:(rio *rdb, void *key, size_t keylen, void *val, size_t vallen)
rdbSaveAuxFieldStrInt	rdb.c	/^int rdbSaveAuxFieldStrInt(rio *rdb, char *key, long long val) {$/;"	f	signature:(rio *rdb, char *key, long long val)
rdbSaveAuxFieldStrStr	rdb.c	/^int rdbSaveAuxFieldStrStr(rio *rdb, char *key, char *val) {$/;"	f	signature:(rio *rdb, char *key, char *val)
rdbSaveBackground	rdb.c	/^int rdbSaveBackground(char *filename) {$/;"	f	signature:(char *filename)
rdbSaveBackground	rdb.h	/^int rdbSaveBackground(char *filename);$/;"	p	signature:(char *filename)
rdbSaveDoubleValue	rdb.c	/^int rdbSaveDoubleValue(rio *rdb, double val) {$/;"	f	signature:(rio *rdb, double val)
rdbSaveInfoAuxFields	rdb.c	/^int rdbSaveInfoAuxFields(rio *rdb) {$/;"	f	signature:(rio *rdb)
rdbSaveKeyValuePair	rdb.c	/^int rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,$/;"	f	signature:(rio *rdb, robj *key, robj *val, long long expiretime, long long now)
rdbSaveKeyValuePair	rdb.h	/^int rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val, long long expiretime, long long now);$/;"	p	signature:(rio *rdb, robj *key, robj *val, long long expiretime, long long now)
rdbSaveLen	rdb.c	/^int rdbSaveLen(rio *rdb, uint32_t len) {$/;"	f	signature:(rio *rdb, uint32_t len)
rdbSaveLen	rdb.h	/^int rdbSaveLen(rio *rdb, uint32_t len);$/;"	p	signature:(rio *rdb, uint32_t len)
rdbSaveLongLongAsStringObject	rdb.c	/^ssize_t rdbSaveLongLongAsStringObject(rio *rdb, long long value) {$/;"	f	signature:(rio *rdb, long long value)
rdbSaveLzfBlob	rdb.c	/^ssize_t rdbSaveLzfBlob(rio *rdb, void *data, size_t compress_len,$/;"	f	signature:(rio *rdb, void *data, size_t compress_len, size_t original_len)
rdbSaveLzfStringObject	rdb.c	/^ssize_t rdbSaveLzfStringObject(rio *rdb, unsigned char *s, size_t len) {$/;"	f	signature:(rio *rdb, unsigned char *s, size_t len)
rdbSaveMillisecondTime	rdb.c	/^int rdbSaveMillisecondTime(rio *rdb, long long t) {$/;"	f	signature:(rio *rdb, long long t)
rdbSaveObject	rdb.c	/^ssize_t rdbSaveObject(rio *rdb, robj *o) {$/;"	f	signature:(rio *rdb, robj *o)
rdbSaveObject	rdb.h	/^ssize_t rdbSaveObject(rio *rdb, robj *o);$/;"	p	signature:(rio *rdb, robj *o)
rdbSaveObjectType	rdb.c	/^int rdbSaveObjectType(rio *rdb, robj *o) {$/;"	f	signature:(rio *rdb, robj *o)
rdbSaveObjectType	rdb.h	/^int rdbSaveObjectType(rio *rdb, robj *o);$/;"	p	signature:(rio *rdb, robj *o)
rdbSaveRawString	rdb.c	/^ssize_t rdbSaveRawString(rio *rdb, unsigned char *s, size_t len) {$/;"	f	signature:(rio *rdb, unsigned char *s, size_t len)
rdbSaveRio	rdb.c	/^int rdbSaveRio(rio *rdb, int *error) {$/;"	f	signature:(rio *rdb, int *error)
rdbSaveRioWithEOFMark	rdb.c	/^int rdbSaveRioWithEOFMark(rio *rdb, int *error) {$/;"	f	signature:(rio *rdb, int *error)
rdbSaveStringObject	rdb.c	/^int rdbSaveStringObject(rio *rdb, robj *obj) {$/;"	f	signature:(rio *rdb, robj *obj)
rdbSaveTime	rdb.h	/^int rdbSaveTime(rio *rdb, time_t t);$/;"	p	signature:(rio *rdb, time_t t)
rdbSaveToSlavesSockets	rdb.c	/^int rdbSaveToSlavesSockets(void) {$/;"	f	signature:(void)
rdbSaveToSlavesSockets	rdb.h	/^int rdbSaveToSlavesSockets(void);$/;"	p	signature:(void)
rdbSaveType	rdb.c	/^int rdbSaveType(rio *rdb, unsigned char type) {$/;"	f	signature:(rio *rdb, unsigned char type)
rdbSaveType	rdb.h	/^int rdbSaveType(rio *rdb, unsigned char type);$/;"	p	signature:(rio *rdb, unsigned char type)
rdbSavedObjectLen	rdb.c	/^size_t rdbSavedObjectLen(robj *o) {$/;"	f	signature:(robj *o)
rdbSavedObjectLen	rdb.h	/^size_t rdbSavedObjectLen(robj *o);$/;"	p	signature:(robj *o)
rdbShowGenericInfo	redis-check-rdb.c	/^void rdbShowGenericInfo(void) {$/;"	f	signature:(void)
rdbTryIntegerEncoding	rdb.c	/^int rdbTryIntegerEncoding(char *s, size_t len, unsigned char *enc) {$/;"	f	signature:(char *s, size_t len, unsigned char *enc)
rdbWriteRaw	rdb.c	/^static int rdbWriteRaw(rio *rdb, void *p, size_t len) {$/;"	f	file:	signature:(rio *rdb, void *p, size_t len)
rdb_bgsave_scheduled	server.h	/^    int rdb_bgsave_scheduled;       \/* BGSAVE when possible if true. *\/$/;"	m	struct:redisServer	access:public
rdb_check_doing_string	redis-check-rdb.c	/^char *rdb_check_doing_string[] = {$/;"	v
rdb_checksum	server.h	/^    int rdb_checksum;               \/* Use RDB checksum? *\/$/;"	m	struct:redisServer	access:public
rdb_child_pid	server.h	/^    pid_t rdb_child_pid;            \/* PID of RDB saving child *\/$/;"	m	struct:redisServer	access:public
rdb_child_type	server.h	/^    int rdb_child_type;             \/* Type of save by active child. *\/$/;"	m	struct:redisServer	access:public
rdb_compression	server.h	/^    int rdb_compression;            \/* Use compression in RDB? *\/$/;"	m	struct:redisServer	access:public
rdb_filename	redis-cli.c	/^    char *rdb_filename;$/;"	m	struct:config	file:	access:public
rdb_filename	server.h	/^    char *rdb_filename;             \/* Name of RDB file *\/$/;"	m	struct:redisServer	access:public
rdb_fsync_range	config.h	112;"	d
rdb_fsync_range	config.h	114;"	d
rdb_pipe_read_result_from_child	server.h	/^    int rdb_pipe_read_result_from_child; \/* of each slave in diskless SYNC. *\/$/;"	m	struct:redisServer	access:public
rdb_pipe_write_result_to_parent	server.h	/^    int rdb_pipe_write_result_to_parent; \/* RDB pipes used to return the state *\/$/;"	m	struct:redisServer	access:public
rdb_save_time_last	server.h	/^    time_t rdb_save_time_last;      \/* Time used by last RDB save run. *\/$/;"	m	struct:redisServer	access:public
rdb_save_time_start	server.h	/^    time_t rdb_save_time_start;     \/* Current RDB save start time. *\/$/;"	m	struct:redisServer	access:public
rdb_type_string	redis-check-rdb.c	/^char *rdb_type_string[] = {$/;"	v
rdbstate	redis-check-rdb.c	/^} rdbstate;$/;"	v	typeref:struct:__anon23
read	rio.h	/^    size_t (*read)(struct _rio *, void *buf, size_t len);$/;"	m	struct:_rio	access:public
readArgFromStdin	redis-cli.c	/^static sds readArgFromStdin(void) {$/;"	f	file:	signature:(void)
readArgc	redis-check-aof.c	/^int readArgc(FILE *fp, long *target) {$/;"	f	signature:(FILE *fp, long *target)
readBytes	redis-check-aof.c	/^int readBytes(FILE *fp, char *target, long length) {$/;"	f	signature:(FILE *fp, char *target, long length)
readHandler	redis-benchmark.c	/^static void readHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
readLong	redis-check-aof.c	/^int readLong(FILE *fp, char prefix, long *target) {$/;"	f	signature:(FILE *fp, char prefix, long *target)
readQueryFromClient	networking.c	/^void readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
readQueryFromClient	server.h	/^void readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask);$/;"	p	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
readString	redis-check-aof.c	/^int readString(FILE *fp, char** target) {$/;"	f	signature:(FILE *fp, char** target)
readSyncBulkPayload	replication.c	/^void readSyncBulkPayload(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
reading	sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:	access:public
readonlyCommand	cluster.c	/^void readonlyCommand(client *c) {$/;"	f	signature:(client *c)
readonlyCommand	server.h	/^void readonlyCommand(client *c);$/;"	p	signature:(client *c)
readwriteCommand	cluster.c	/^void readwriteCommand(client *c) {$/;"	f	signature:(client *c)
readwriteCommand	server.h	/^void readwriteCommand(client *c);$/;"	p	signature:(client *c)
readyList	server.h	/^typedef struct readyList {$/;"	s
readyList	server.h	/^} readyList;$/;"	t	typeref:struct:readyList
readyList::db	server.h	/^    redisDb *db;$/;"	m	struct:readyList	access:public
readyList::key	server.h	/^    robj *key;$/;"	m	struct:readyList	access:public
ready_keys	server.h	/^    dict *ready_keys;           \/* Blocked keys that received a PUSH *\/$/;"	m	struct:redisDb	access:public
ready_keys	server.h	/^    list *ready_keys;        \/* List of readyList structures for BLPOP & co *\/$/;"	m	struct:redisServer	access:public
realloc	server.h	/^void *realloc(void *ptr, size_t size) __attribute__ ((deprecated));$/;"	p	signature:(void *ptr, size_t size)
realloc	zmalloc.c	61;"	d	file:
realloc	zmalloc.c	66;"	d	file:
rebalance_cluster_cmd	redis-trib.rb	/^    def rebalance_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
recompress	quicklist.h	/^    unsigned int recompress : 1; \/* was this node previous compressed? *\/$/;"	m	struct:quicklistNode	access:public
reconnectingRedisCommand	redis-cli.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, const char *fmt, ...) {$/;"	f	file:	signature:(redisContext *c, const char *fmt, ...)
redisAeAddRead	sentinel.c	/^static void redisAeAddRead(void *privdata) {$/;"	f	file:	signature:(void *privdata)
redisAeAddWrite	sentinel.c	/^static void redisAeAddWrite(void *privdata) {$/;"	f	file:	signature:(void *privdata)
redisAeAttach	sentinel.c	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f	file:	signature:(aeEventLoop *loop, redisAsyncContext *ac)
redisAeCleanup	sentinel.c	/^static void redisAeCleanup(void *privdata) {$/;"	f	file:	signature:(void *privdata)
redisAeDelRead	sentinel.c	/^static void redisAeDelRead(void *privdata) {$/;"	f	file:	signature:(void *privdata)
redisAeDelWrite	sentinel.c	/^static void redisAeDelWrite(void *privdata) {$/;"	f	file:	signature:(void *privdata)
redisAeEvents	sentinel.c	/^typedef struct redisAeEvents {$/;"	s	file:
redisAeEvents	sentinel.c	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents	file:
redisAeEvents::context	sentinel.c	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	file:	access:public
redisAeEvents::fd	sentinel.c	/^    int fd;$/;"	m	struct:redisAeEvents	file:	access:public
redisAeEvents::loop	sentinel.c	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	file:	access:public
redisAeEvents::reading	sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:	access:public
redisAeEvents::writing	sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:	access:public
redisAeReadEvent	sentinel.c	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
redisAeWriteEvent	sentinel.c	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
redisAsciiArt	server.c	/^void redisAsciiArt(void) {$/;"	f	signature:(void)
redisBitpos	bitops.c	/^long redisBitpos(void *s, unsigned long count, int bit) {$/;"	f	signature:(void *s, unsigned long count, int bit)
redisBuildId	release.c	/^uint64_t redisBuildId(void) {$/;"	f	signature:(void)
redisBuildId	server.h	/^uint64_t redisBuildId(void);$/;"	p	signature:(void)
redisCommand	server.h	/^struct redisCommand {$/;"	s
redisCommand::arity	server.h	/^    int arity;$/;"	m	struct:redisCommand	access:public
redisCommand::calls	server.h	/^    long long microseconds, calls;$/;"	m	struct:redisCommand	access:public
redisCommand::firstkey	server.h	/^    int firstkey; \/* The first argument that's a key (0 = no keys) *\/$/;"	m	struct:redisCommand	access:public
redisCommand::flags	server.h	/^    int flags;    \/* The actual flags, obtained from the 'sflags' field. *\/$/;"	m	struct:redisCommand	access:public
redisCommand::getkeys_proc	server.h	/^    redisGetKeysProc *getkeys_proc;$/;"	m	struct:redisCommand	access:public
redisCommand::keystep	server.h	/^    int keystep;  \/* The step between first and last key *\/$/;"	m	struct:redisCommand	access:public
redisCommand::lastkey	server.h	/^    int lastkey;  \/* The last argument that's a key *\/$/;"	m	struct:redisCommand	access:public
redisCommand::microseconds	server.h	/^    long long microseconds, calls;$/;"	m	struct:redisCommand	access:public
redisCommand::name	server.h	/^    char *name;$/;"	m	struct:redisCommand	access:public
redisCommand::proc	server.h	/^    redisCommandProc *proc;$/;"	m	struct:redisCommand	access:public
redisCommand::sflags	server.h	/^    char *sflags; \/* Flags as string representation, one char per flag. *\/$/;"	m	struct:redisCommand	access:public
redisCommandProc	server.h	/^typedef void redisCommandProc(client *c);$/;"	t
redisCommandTable	server.c	/^struct redisCommand redisCommandTable[] = {$/;"	v	typeref:struct:redisCommand
redisDb	server.h	/^typedef struct redisDb {$/;"	s
redisDb	server.h	/^} redisDb;$/;"	t	typeref:struct:redisDb
redisDb::avg_ttl	server.h	/^    long long avg_ttl;          \/* Average TTL, just for stats *\/$/;"	m	struct:redisDb	access:public
redisDb::blocking_keys	server.h	/^    dict *blocking_keys;        \/* Keys with clients waiting for data (BLPOP) *\/$/;"	m	struct:redisDb	access:public
redisDb::dict	server.h	/^    dict *dict;                 \/* The keyspace for this DB *\/$/;"	m	struct:redisDb	access:public
redisDb::eviction_pool	server.h	/^    struct evictionPoolEntry *eviction_pool;    \/* Eviction pool of keys *\/$/;"	m	struct:redisDb	typeref:struct:redisDb::evictionPoolEntry	access:public
redisDb::expires	server.h	/^    dict *expires;              \/* Timeout of keys with a timeout set *\/$/;"	m	struct:redisDb	access:public
redisDb::hash_slots	server.h	/^    dict *hash_slots[HASH_SLOTS_SIZE];$/;"	m	struct:redisDb	access:public
redisDb::hash_slots_rehashing	server.h	/^    int hash_slots_rehashing;$/;"	m	struct:redisDb	access:public
redisDb::id	server.h	/^    int id;                     \/* Database ID *\/$/;"	m	struct:redisDb	access:public
redisDb::ready_keys	server.h	/^    dict *ready_keys;           \/* Blocked keys that received a PUSH *\/$/;"	m	struct:redisDb	access:public
redisDb::tagged_keys	server.h	/^    struct zskiplist *tagged_keys;$/;"	m	struct:redisDb	typeref:struct:redisDb::zskiplist	access:public
redisDb::watched_keys	server.h	/^    dict *watched_keys;         \/* WATCHED keys for MULTI\/EXEC CAS *\/$/;"	m	struct:redisDb	access:public
redisDebug	server.h	1738;"	d
redisDebugMark	server.h	1740;"	d
redisFunctionSym	server.h	/^struct redisFunctionSym {$/;"	s
redisFunctionSym::name	server.h	/^    char *name;$/;"	m	struct:redisFunctionSym	access:public
redisFunctionSym::pointer	server.h	/^    unsigned long pointer;$/;"	m	struct:redisFunctionSym	access:public
redisGetKeysProc	server.h	/^typedef int *redisGetKeysProc(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);$/;"	t
redisGitDirty	redis-cli.c	/^char *redisGitDirty(void);$/;"	p	file:	signature:(void)
redisGitDirty	release.c	/^char *redisGitDirty(void) {$/;"	f	signature:(void)
redisGitDirty	server.h	/^char *redisGitDirty(void);$/;"	p	signature:(void)
redisGitSHA1	redis-cli.c	/^char *redisGitSHA1(void);$/;"	p	file:	signature:(void)
redisGitSHA1	release.c	/^char *redisGitSHA1(void) {$/;"	f	signature:(void)
redisGitSHA1	server.h	/^char *redisGitSHA1(void);$/;"	p	signature:(void)
redisIsSupervised	server.c	/^int redisIsSupervised(int mode) {$/;"	f	signature:(int mode)
redisLrand48	rand.c	/^int32_t redisLrand48() {$/;"	f
redisLrand48	rand.h	/^int32_t redisLrand48();$/;"	p	signature:()
redisNodeFlags	cluster.c	/^struct redisNodeFlags {$/;"	s	file:
redisNodeFlags::flag	cluster.c	/^    uint16_t flag;$/;"	m	struct:redisNodeFlags	file:	access:public
redisNodeFlags::name	cluster.c	/^    char *name;$/;"	m	struct:redisNodeFlags	file:	access:public
redisNodeFlagsTable	cluster.c	/^static struct redisNodeFlags redisNodeFlagsTable[] = {$/;"	v	typeref:struct:redisNodeFlags	file:
redisObject	server.h	/^typedef struct redisObject {$/;"	s
redisObject::encoding	server.h	/^    unsigned encoding:4;$/;"	m	struct:redisObject	access:public
redisObject::lru	server.h	/^    unsigned lru:LRU_BITS; \/* lru time (relative to server.lruclock) *\/$/;"	m	struct:redisObject	access:public
redisObject::ptr	server.h	/^    void *ptr;$/;"	m	struct:redisObject	access:public
redisObject::refcount	server.h	/^    int refcount;$/;"	m	struct:redisObject	access:public
redisObject::type	server.h	/^    unsigned type:4;$/;"	m	struct:redisObject	access:public
redisOp	server.h	/^typedef struct redisOp {$/;"	s
redisOp	server.h	/^} redisOp;$/;"	t	typeref:struct:redisOp
redisOp::argc	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	access:public
redisOp::argv	server.h	/^    robj **argv;$/;"	m	struct:redisOp	access:public
redisOp::cmd	server.h	/^    struct redisCommand *cmd;$/;"	m	struct:redisOp	typeref:struct:redisOp::redisCommand	access:public
redisOp::dbid	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	access:public
redisOp::target	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	access:public
redisOpArray	server.h	/^typedef struct redisOpArray {$/;"	s
redisOpArray	server.h	/^} redisOpArray;$/;"	t	typeref:struct:redisOpArray
redisOpArray::numops	server.h	/^    int numops;$/;"	m	struct:redisOpArray	access:public
redisOpArray::ops	server.h	/^    redisOp *ops;$/;"	m	struct:redisOpArray	access:public
redisOpArrayAppend	server.c	/^int redisOpArrayAppend(redisOpArray *oa, struct redisCommand *cmd, int dbid,$/;"	f	signature:(redisOpArray *oa, struct redisCommand *cmd, int dbid, robj **argv, int argc, int target)
redisOpArrayFree	server.c	/^void redisOpArrayFree(redisOpArray *oa) {$/;"	f	signature:(redisOpArray *oa)
redisOpArrayInit	server.c	/^void redisOpArrayInit(redisOpArray *oa) {$/;"	f	signature:(redisOpArray *oa)
redisOutOfMemoryHandler	server.c	/^void redisOutOfMemoryHandler(size_t allocation_size) {$/;"	f	signature:(size_t allocation_size)
redisPopcount	bitops.c	/^size_t redisPopcount(void *s, long count) {$/;"	f	signature:(void *s, long count)
redisPopcount	server.h	/^size_t redisPopcount(void *s, long count);$/;"	p	signature:(void *s, long count)
redisProtocolToLuaType	scripting.c	/^char *redisProtocolToLuaType(lua_State *lua, char* reply) {$/;"	f	signature:(lua_State *lua, char* reply)
redisProtocolToLuaType_Bulk	scripting.c	/^char *redisProtocolToLuaType_Bulk(lua_State *lua, char *reply) {$/;"	f	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_Bulk	scripting.c	/^char *redisProtocolToLuaType_Bulk(lua_State *lua, char *reply);$/;"	p	file:	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_Error	scripting.c	/^char *redisProtocolToLuaType_Error(lua_State *lua, char *reply) {$/;"	f	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_Error	scripting.c	/^char *redisProtocolToLuaType_Error(lua_State *lua, char *reply);$/;"	p	file:	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_Int	scripting.c	/^char *redisProtocolToLuaType_Int(lua_State *lua, char *reply) {$/;"	f	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_Int	scripting.c	/^char *redisProtocolToLuaType_Int(lua_State *lua, char *reply);$/;"	p	file:	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_MultiBulk	scripting.c	/^char *redisProtocolToLuaType_MultiBulk(lua_State *lua, char *reply) {$/;"	f	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_MultiBulk	scripting.c	/^char *redisProtocolToLuaType_MultiBulk(lua_State *lua, char *reply);$/;"	p	file:	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_Status	scripting.c	/^char *redisProtocolToLuaType_Status(lua_State *lua, char *reply) {$/;"	f	signature:(lua_State *lua, char *reply)
redisProtocolToLuaType_Status	scripting.c	/^char *redisProtocolToLuaType_Status(lua_State *lua, char *reply);$/;"	p	file:	signature:(lua_State *lua, char *reply)
redisServer	server.h	/^struct redisServer {$/;"	s
redisServer::__anon30::idx	server.h	/^        int idx;$/;"	m	struct:redisServer::__anon30	access:public
redisServer::__anon30::last_sample_count	server.h	/^        long long last_sample_count;\/* Count in last sample *\/$/;"	m	struct:redisServer::__anon30	access:public
redisServer::__anon30::last_sample_time	server.h	/^        long long last_sample_time; \/* Timestamp of last sample in ms *\/$/;"	m	struct:redisServer::__anon30	access:public
redisServer::__anon30::samples	server.h	/^        long long samples[STATS_METRIC_SAMPLES];$/;"	m	struct:redisServer::__anon30	access:public
redisServer::active_expire_enabled	server.h	/^    int active_expire_enabled;      \/* Can be disabled for testing purposes. *\/$/;"	m	struct:redisServer	access:public
redisServer::activerehashing	server.h	/^    int activerehashing;        \/* Incremental rehash in serverCron() *\/$/;"	m	struct:redisServer	access:public
redisServer::also_propagate	server.h	/^    redisOpArray also_propagate;    \/* Additional command to propagate. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_buf	server.h	/^    sds aof_buf;      \/* AOF buffer, written before entering the event loop *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_child_diff	server.h	/^    sds aof_child_diff;             \/* AOF diff accumulator child side. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_child_pid	server.h	/^    pid_t aof_child_pid;            \/* PID if rewriting process *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_current_size	server.h	/^    off_t aof_current_size;         \/* AOF current size. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_delayed_fsync	server.h	/^    unsigned long aof_delayed_fsync;  \/* delayed AOF fsync() counter *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_fd	server.h	/^    int aof_fd;       \/* File descriptor of currently selected AOF file *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_filename	server.h	/^    char *aof_filename;             \/* Name of the AOF file *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_flush_postponed_start	server.h	/^    time_t aof_flush_postponed_start; \/* UNIX time of postponed AOF flush *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_fsync	server.h	/^    int aof_fsync;                  \/* Kind of fsync() policy *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_last_fsync	server.h	/^    time_t aof_last_fsync;            \/* UNIX time of last fsync() *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_last_write_errno	server.h	/^    int aof_last_write_errno;       \/* Valid if aof_last_write_status is ERR *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_last_write_status	server.h	/^    int aof_last_write_status;      \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_lastbgrewrite_status	server.h	/^    int aof_lastbgrewrite_status;   \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_load_truncated	server.h	/^    int aof_load_truncated;         \/* Don't stop on unexpected AOF EOF. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_no_fsync_on_rewrite	server.h	/^    int aof_no_fsync_on_rewrite;    \/* Don't fsync if a rewrite is in prog. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_pipe_read_ack_from_child	server.h	/^    int aof_pipe_read_ack_from_child;$/;"	m	struct:redisServer	access:public
redisServer::aof_pipe_read_ack_from_parent	server.h	/^    int aof_pipe_read_ack_from_parent;$/;"	m	struct:redisServer	access:public
redisServer::aof_pipe_read_data_from_parent	server.h	/^    int aof_pipe_read_data_from_parent;$/;"	m	struct:redisServer	access:public
redisServer::aof_pipe_write_ack_to_child	server.h	/^    int aof_pipe_write_ack_to_child;$/;"	m	struct:redisServer	access:public
redisServer::aof_pipe_write_ack_to_parent	server.h	/^    int aof_pipe_write_ack_to_parent;$/;"	m	struct:redisServer	access:public
redisServer::aof_pipe_write_data_to_child	server.h	/^    int aof_pipe_write_data_to_child;$/;"	m	struct:redisServer	access:public
redisServer::aof_rewrite_base_size	server.h	/^    off_t aof_rewrite_base_size;    \/* AOF size on latest startup or rewrite. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_rewrite_buf_blocks	server.h	/^    list *aof_rewrite_buf_blocks;   \/* Hold changes during an AOF rewrite. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_rewrite_incremental_fsync	server.h	/^    int aof_rewrite_incremental_fsync;\/* fsync incrementally while rewriting? *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_rewrite_min_size	server.h	/^    off_t aof_rewrite_min_size;     \/* the AOF file is at least N bytes. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_rewrite_perc	server.h	/^    int aof_rewrite_perc;           \/* Rewrite AOF if % growth is > M and... *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_rewrite_scheduled	server.h	/^    int aof_rewrite_scheduled;      \/* Rewrite once BGSAVE terminates. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_rewrite_time_last	server.h	/^    time_t aof_rewrite_time_last;   \/* Time used by last AOF rewrite run. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_rewrite_time_start	server.h	/^    time_t aof_rewrite_time_start;  \/* Current AOF rewrite start time. *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_selected_db	server.h	/^    int aof_selected_db; \/* Currently selected DB in AOF *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_state	server.h	/^    int aof_state;                  \/* AOF_(ON|OFF|WAIT_REWRITE) *\/$/;"	m	struct:redisServer	access:public
redisServer::aof_stop_sending_diff	server.h	/^    int aof_stop_sending_diff;     \/* If true stop sending accumulated diffs$/;"	m	struct:redisServer	access:public
redisServer::arch_bits	server.h	/^    int arch_bits;              \/* 32 or 64 depending on sizeof(long) *\/$/;"	m	struct:redisServer	access:public
redisServer::assert_failed	server.h	/^    char *assert_failed;$/;"	m	struct:redisServer	access:public
redisServer::assert_file	server.h	/^    char *assert_file;$/;"	m	struct:redisServer	access:public
redisServer::assert_line	server.h	/^    int assert_line;$/;"	m	struct:redisServer	access:public
redisServer::bindaddr	server.h	/^    char *bindaddr[CONFIG_BINDADDR_MAX]; \/* Addresses we should bind to *\/$/;"	m	struct:redisServer	access:public
redisServer::bindaddr_count	server.h	/^    int bindaddr_count;         \/* Number of addresses in server.bindaddr[] *\/$/;"	m	struct:redisServer	access:public
redisServer::bpop_blocked_clients	server.h	/^    unsigned int bpop_blocked_clients; \/* Number of clients blocked by lists *\/$/;"	m	struct:redisServer	access:public
redisServer::bug_report_start	server.h	/^    int bug_report_start; \/* True if bug report header was already logged. *\/$/;"	m	struct:redisServer	access:public
redisServer::cached_master	server.h	/^    client *cached_master; \/* Cached master to be reused for PSYNC. *\/$/;"	m	struct:redisServer	access:public
redisServer::cfd	server.h	/^    int cfd[CONFIG_BINDADDR_MAX];\/* Cluster bus listening socket *\/$/;"	m	struct:redisServer	access:public
redisServer::cfd_count	server.h	/^    int cfd_count;              \/* Used slots in cfd[] *\/$/;"	m	struct:redisServer	access:public
redisServer::client_max_querybuf_len	server.h	/^    size_t client_max_querybuf_len; \/* Limit for client query buffer length *\/$/;"	m	struct:redisServer	access:public
redisServer::client_obuf_limits	server.h	/^    clientBufferLimitsConfig client_obuf_limits[CLIENT_TYPE_OBUF_COUNT];$/;"	m	struct:redisServer	access:public
redisServer::clients	server.h	/^    list *clients;              \/* List of active clients *\/$/;"	m	struct:redisServer	access:public
redisServer::clients_pause_end_time	server.h	/^    mstime_t clients_pause_end_time; \/* Time when we undo clients_paused *\/$/;"	m	struct:redisServer	access:public
redisServer::clients_paused	server.h	/^    int clients_paused;         \/* True if clients are currently paused *\/$/;"	m	struct:redisServer	access:public
redisServer::clients_pending_write	server.h	/^    list *clients_pending_write; \/* There is to write or install handler. *\/$/;"	m	struct:redisServer	access:public
redisServer::clients_to_close	server.h	/^    list *clients_to_close;     \/* Clients to close asynchronously *\/$/;"	m	struct:redisServer	access:public
redisServer::clients_waiting_acks	server.h	/^    list *clients_waiting_acks;         \/* Clients waiting in WAIT command. *\/$/;"	m	struct:redisServer	access:public
redisServer::cluster	server.h	/^    struct clusterState *cluster;  \/* State of the cluster *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::clusterState	access:public
redisServer::cluster_configfile	server.h	/^    char *cluster_configfile; \/* Cluster auto-generated config file name. *\/$/;"	m	struct:redisServer	access:public
redisServer::cluster_enabled	server.h	/^    int cluster_enabled;      \/* Is cluster enabled? *\/$/;"	m	struct:redisServer	access:public
redisServer::cluster_migration_barrier	server.h	/^    int cluster_migration_barrier; \/* Cluster replicas migration barrier. *\/$/;"	m	struct:redisServer	access:public
redisServer::cluster_node_timeout	server.h	/^    mstime_t cluster_node_timeout; \/* Cluster node timeout. *\/$/;"	m	struct:redisServer	access:public
redisServer::cluster_require_full_coverage	server.h	/^    int cluster_require_full_coverage; \/* If true, put the cluster down if$/;"	m	struct:redisServer	access:public
redisServer::cluster_slave_validity_factor	server.h	/^    int cluster_slave_validity_factor; \/* Slave max data age for failover. *\/$/;"	m	struct:redisServer	access:public
redisServer::commands	server.h	/^    dict *commands;             \/* Command table *\/$/;"	m	struct:redisServer	access:public
redisServer::configfile	server.h	/^    char *configfile;           \/* Absolute config file path, or NULL *\/$/;"	m	struct:redisServer	access:public
redisServer::cronloops	server.h	/^    int cronloops;              \/* Number of times the cron function run *\/$/;"	m	struct:redisServer	access:public
redisServer::current_client	server.h	/^    client *current_client; \/* Current client, only used on crash report *\/$/;"	m	struct:redisServer	access:public
redisServer::daemonize	server.h	/^    int daemonize;                  \/* True if running as a daemon *\/$/;"	m	struct:redisServer	access:public
redisServer::db	server.h	/^    redisDb *db;$/;"	m	struct:redisServer	access:public
redisServer::dbnum	server.h	/^    int dbnum;                      \/* Total number of configured DBs *\/$/;"	m	struct:redisServer	access:public
redisServer::delCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::redisCommand	access:public
redisServer::dirty	server.h	/^    long long dirty;                \/* Changes to DB from the last save *\/$/;"	m	struct:redisServer	access:public
redisServer::dirty_before_bgsave	server.h	/^    long long dirty_before_bgsave;  \/* Used to restore dirty on failed BGSAVE *\/$/;"	m	struct:redisServer	access:public
redisServer::el	server.h	/^    aeEventLoop *el;$/;"	m	struct:redisServer	access:public
redisServer::execCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
redisServer::exec_argv	server.h	/^    char **exec_argv;           \/* Executable argv vector (copy). *\/$/;"	m	struct:redisServer	access:public
redisServer::executable	server.h	/^    char *executable;           \/* Absolute executable file path. *\/$/;"	m	struct:redisServer	access:public
redisServer::get_ack_from_slaves	server.h	/^    int get_ack_from_slaves;            \/* If true we send REPLCONF GETACK. *\/$/;"	m	struct:redisServer	access:public
redisServer::hash_max_ziplist_entries	server.h	/^    size_t hash_max_ziplist_entries;$/;"	m	struct:redisServer	access:public
redisServer::hash_max_ziplist_value	server.h	/^    size_t hash_max_ziplist_value;$/;"	m	struct:redisServer	access:public
redisServer::hll_sparse_max_bytes	server.h	/^    size_t hll_sparse_max_bytes;$/;"	m	struct:redisServer	access:public
redisServer::hz	server.h	/^    int hz;                     \/* serverCron() calls frequency in hertz *\/$/;"	m	struct:redisServer	access:public
redisServer::inst_metric	server.h	/^    } inst_metric[STATS_METRIC_COUNT];$/;"	m	struct:redisServer	typeref:struct:redisServer::__anon30	access:public
redisServer::ipfd	server.h	/^    int ipfd[CONFIG_BINDADDR_MAX]; \/* TCP socket file descriptors *\/$/;"	m	struct:redisServer	access:public
redisServer::ipfd_count	server.h	/^    int ipfd_count;             \/* Used slots in ipfd[] *\/$/;"	m	struct:redisServer	access:public
redisServer::lastbgsave_status	server.h	/^    int lastbgsave_status;          \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer	access:public
redisServer::lastbgsave_try	server.h	/^    time_t lastbgsave_try;          \/* Unix time of last attempted bgsave *\/$/;"	m	struct:redisServer	access:public
redisServer::lastsave	server.h	/^    time_t lastsave;                \/* Unix time of last successful save *\/$/;"	m	struct:redisServer	access:public
redisServer::latency_events	server.h	/^    dict *latency_events;$/;"	m	struct:redisServer	access:public
redisServer::latency_monitor_threshold	server.h	/^    long long latency_monitor_threshold;$/;"	m	struct:redisServer	access:public
redisServer::list_compress_depth	server.h	/^    int list_compress_depth;$/;"	m	struct:redisServer	access:public
redisServer::list_max_ziplist_size	server.h	/^    int list_max_ziplist_size;$/;"	m	struct:redisServer	access:public
redisServer::loading	server.h	/^    int loading;                \/* We are loading data from disk if true *\/$/;"	m	struct:redisServer	access:public
redisServer::loading_loaded_bytes	server.h	/^    off_t loading_loaded_bytes;$/;"	m	struct:redisServer	access:public
redisServer::loading_process_events_interval_bytes	server.h	/^    off_t loading_process_events_interval_bytes;$/;"	m	struct:redisServer	access:public
redisServer::loading_start_time	server.h	/^    time_t loading_start_time;$/;"	m	struct:redisServer	access:public
redisServer::loading_total_bytes	server.h	/^    off_t loading_total_bytes;$/;"	m	struct:redisServer	access:public
redisServer::logfile	server.h	/^    char *logfile;                  \/* Path of log file *\/$/;"	m	struct:redisServer	access:public
redisServer::lpopCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
redisServer::lpushCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
redisServer::lruclock	server.h	/^    unsigned lruclock:LRU_BITS; \/* Clock for LRU eviction *\/$/;"	m	struct:redisServer	access:public
redisServer::lua	server.h	/^    lua_State *lua; \/* The Lua interpreter. We use just one for all clients *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_always_replicate_commands	server.h	/^    int lua_always_replicate_commands; \/* Default replication type. *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_caller	server.h	/^    client *lua_caller;   \/* The client running EVAL right now, or NULL *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_client	server.h	/^    client *lua_client;   \/* The "fake client" to query Redis from Lua *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_kill	server.h	/^    int lua_kill;         \/* Kill the script if true. *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_multi_emitted	server.h	/^    int lua_multi_emitted;\/* True if we already proagated MULTI. *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_random_dirty	server.h	/^    int lua_random_dirty; \/* True if a random command was called during the$/;"	m	struct:redisServer	access:public
redisServer::lua_repl	server.h	/^    int lua_repl;         \/* Script replication flags for redis.set_repl(). *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_replicate_commands	server.h	/^    int lua_replicate_commands; \/* True if we are doing single commands repl. *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_scripts	server.h	/^    dict *lua_scripts;         \/* A dictionary of SHA1 -> Lua scripts *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_time_limit	server.h	/^    mstime_t lua_time_limit;  \/* Script timeout in milliseconds *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_time_start	server.h	/^    mstime_t lua_time_start;  \/* Start time of script, milliseconds time *\/$/;"	m	struct:redisServer	access:public
redisServer::lua_timedout	server.h	/^    int lua_timedout;     \/* True if we reached the time limit for script$/;"	m	struct:redisServer	access:public
redisServer::lua_write_dirty	server.h	/^    int lua_write_dirty;  \/* True if a write command was called during the$/;"	m	struct:redisServer	access:public
redisServer::master	server.h	/^    client *master;     \/* Client that is master for this slave *\/$/;"	m	struct:redisServer	access:public
redisServer::master_repl_offset	server.h	/^    long long master_repl_offset;   \/* Global replication offset *\/$/;"	m	struct:redisServer	access:public
redisServer::masterauth	server.h	/^    char *masterauth;               \/* AUTH with this password with master *\/$/;"	m	struct:redisServer	access:public
redisServer::masterhost	server.h	/^    char *masterhost;               \/* Hostname of master *\/$/;"	m	struct:redisServer	access:public
redisServer::masterport	server.h	/^    int masterport;                 \/* Port of master *\/$/;"	m	struct:redisServer	access:public
redisServer::maxclients	server.h	/^    unsigned int maxclients;            \/* Max number of simultaneous clients *\/$/;"	m	struct:redisServer	access:public
redisServer::maxidletime	server.h	/^    int maxidletime;                \/* Client timeout in seconds *\/$/;"	m	struct:redisServer	access:public
redisServer::maxmemory	server.h	/^    unsigned long long maxmemory;   \/* Max number of memory bytes to use *\/$/;"	m	struct:redisServer	access:public
redisServer::maxmemory_policy	server.h	/^    int maxmemory_policy;           \/* Policy for key eviction *\/$/;"	m	struct:redisServer	access:public
redisServer::maxmemory_samples	server.h	/^    int maxmemory_samples;          \/* Pricision of random sampling *\/$/;"	m	struct:redisServer	access:public
redisServer::migrate_cached_sockets	server.h	/^    dict *migrate_cached_sockets;\/* MIGRATE cached sockets *\/$/;"	m	struct:redisServer	access:public
redisServer::monitors	server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer	access:public
redisServer::mstime	server.h	/^    long long mstime;       \/* Like 'unixtime' but with milliseconds resolution. *\/$/;"	m	struct:redisServer	access:public
redisServer::multiCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
redisServer::neterr	server.h	/^    char neterr[ANET_ERR_LEN];   \/* Error buffer for anet.c *\/$/;"	m	struct:redisServer	access:public
redisServer::next_client_id	server.h	/^    uint64_t next_client_id;    \/* Next client unique ID. Incremental. *\/$/;"	m	struct:redisServer	access:public
redisServer::notify_keyspace_events	server.h	/^    int notify_keyspace_events; \/* Events to propagate via Pub\/Sub. This is an$/;"	m	struct:redisServer	access:public
redisServer::orig_commands	server.h	/^    dict *orig_commands;        \/* Command table before command renaming. *\/$/;"	m	struct:redisServer	access:public
redisServer::pid	server.h	/^    pid_t pid;                  \/* Main process pid. *\/$/;"	m	struct:redisServer	access:public
redisServer::pidfile	server.h	/^    char *pidfile;              \/* PID file path *\/$/;"	m	struct:redisServer	access:public
redisServer::port	server.h	/^    int port;                   \/* TCP listening port *\/$/;"	m	struct:redisServer	access:public
redisServer::protected_mode	server.h	/^    int protected_mode;         \/* Don't accept external connections. *\/$/;"	m	struct:redisServer	access:public
redisServer::pubsub_channels	server.h	/^    dict *pubsub_channels;  \/* Map channels to list of subscribed clients *\/$/;"	m	struct:redisServer	access:public
redisServer::pubsub_patterns	server.h	/^    list *pubsub_patterns;  \/* A list of pubsub_patterns *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_bgsave_scheduled	server.h	/^    int rdb_bgsave_scheduled;       \/* BGSAVE when possible if true. *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_checksum	server.h	/^    int rdb_checksum;               \/* Use RDB checksum? *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_child_pid	server.h	/^    pid_t rdb_child_pid;            \/* PID of RDB saving child *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_child_type	server.h	/^    int rdb_child_type;             \/* Type of save by active child. *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_compression	server.h	/^    int rdb_compression;            \/* Use compression in RDB? *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_filename	server.h	/^    char *rdb_filename;             \/* Name of RDB file *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_pipe_read_result_from_child	server.h	/^    int rdb_pipe_read_result_from_child; \/* of each slave in diskless SYNC. *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_pipe_write_result_to_parent	server.h	/^    int rdb_pipe_write_result_to_parent; \/* RDB pipes used to return the state *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_save_time_last	server.h	/^    time_t rdb_save_time_last;      \/* Time used by last RDB save run. *\/$/;"	m	struct:redisServer	access:public
redisServer::rdb_save_time_start	server.h	/^    time_t rdb_save_time_start;     \/* Current RDB save start time. *\/$/;"	m	struct:redisServer	access:public
redisServer::ready_keys	server.h	/^    list *ready_keys;        \/* List of readyList structures for BLPOP & co *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_backlog	server.h	/^    char *repl_backlog;             \/* Replication backlog for partial syncs *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_backlog_histlen	server.h	/^    long long repl_backlog_histlen; \/* Backlog actual data length *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_backlog_idx	server.h	/^    long long repl_backlog_idx;     \/* Backlog circular buffer current offset *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_backlog_off	server.h	/^    long long repl_backlog_off;     \/* Replication offset of first byte in the$/;"	m	struct:redisServer	access:public
redisServer::repl_backlog_size	server.h	/^    long long repl_backlog_size;    \/* Backlog circular buffer size *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_backlog_time_limit	server.h	/^    time_t repl_backlog_time_limit; \/* Time without slaves after the backlog$/;"	m	struct:redisServer	access:public
redisServer::repl_disable_tcp_nodelay	server.h	/^    int repl_disable_tcp_nodelay;   \/* Disable TCP_NODELAY after SYNC? *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_diskless_sync	server.h	/^    int repl_diskless_sync;         \/* Send RDB to slaves sockets directly. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_diskless_sync_delay	server.h	/^    int repl_diskless_sync_delay;   \/* Delay to start a diskless repl BGSAVE. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_down_since	server.h	/^    time_t repl_down_since; \/* Unix time at which link with master went down *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_good_slaves_count	server.h	/^    int repl_good_slaves_count;     \/* Number of slaves with lag <= max_lag. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_master_initial_offset	server.h	/^    long long repl_master_initial_offset;         \/* Master PSYNC offset. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_master_runid	server.h	/^    char repl_master_runid[CONFIG_RUN_ID_SIZE+1];  \/* Master run id for PSYNC.*\/$/;"	m	struct:redisServer	access:public
redisServer::repl_min_slaves_max_lag	server.h	/^    int repl_min_slaves_max_lag;    \/* Max lag of <count> slaves to write. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_min_slaves_to_write	server.h	/^    int repl_min_slaves_to_write;   \/* Min number of slaves to write. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_no_slaves_since	server.h	/^    time_t repl_no_slaves_since;    \/* We have no slaves since that time.$/;"	m	struct:redisServer	access:public
redisServer::repl_ping_slave_period	server.h	/^    int repl_ping_slave_period;     \/* Master pings the slave every N seconds *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_scriptcache_dict	server.h	/^    dict *repl_scriptcache_dict;        \/* SHA1 all slaves are aware of. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_scriptcache_fifo	server.h	/^    list *repl_scriptcache_fifo;        \/* First in, first out LRU eviction. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_scriptcache_size	server.h	/^    unsigned int repl_scriptcache_size; \/* Max number of elements. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_serve_stale_data	server.h	/^    int repl_serve_stale_data; \/* Serve stale data when link is down? *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_slave_ro	server.h	/^    int repl_slave_ro;          \/* Slave is read only? *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_state	server.h	/^    int repl_state;          \/* Replication status if the instance is a slave *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_syncio_timeout	server.h	/^    int repl_syncio_timeout; \/* Timeout for synchronous I\/O calls *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_timeout	server.h	/^    int repl_timeout;               \/* Timeout after N seconds of master idle *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_transfer_fd	server.h	/^    int repl_transfer_fd;    \/* Slave -> Master SYNC temp file descriptor *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_transfer_last_fsync_off	server.h	/^    off_t repl_transfer_last_fsync_off; \/* Offset when we fsync-ed last time. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_transfer_lastio	server.h	/^    time_t repl_transfer_lastio; \/* Unix time of the latest read, for timeout *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_transfer_read	server.h	/^    off_t repl_transfer_read; \/* Amount of RDB read from master during sync. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_transfer_s	server.h	/^    int repl_transfer_s;     \/* Slave -> Master SYNC socket *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_transfer_size	server.h	/^    off_t repl_transfer_size; \/* Size of RDB to read from master during sync. *\/$/;"	m	struct:redisServer	access:public
redisServer::repl_transfer_tmpfile	server.h	/^    char *repl_transfer_tmpfile; \/* Slave-> master SYNC temp file name *\/$/;"	m	struct:redisServer	access:public
redisServer::requirepass	server.h	/^    char *requirepass;          \/* Pass for AUTH command, or NULL *\/$/;"	m	struct:redisServer	access:public
redisServer::resident_set_size	server.h	/^    size_t resident_set_size;       \/* RSS sampled in serverCron(). *\/$/;"	m	struct:redisServer	access:public
redisServer::rpopCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
redisServer::runid	server.h	/^    char runid[CONFIG_RUN_ID_SIZE+1];  \/* ID always different at every exec. *\/$/;"	m	struct:redisServer	access:public
redisServer::saveparams	server.h	/^    struct saveparam *saveparams;   \/* Save points array for RDB *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::saveparam	access:public
redisServer::saveparamslen	server.h	/^    int saveparamslen;              \/* Number of saving points *\/$/;"	m	struct:redisServer	access:public
redisServer::sentinel_mode	server.h	/^    int sentinel_mode;          \/* True if this instance is a Sentinel. *\/$/;"	m	struct:redisServer	access:public
redisServer::set_max_intset_entries	server.h	/^    size_t set_max_intset_entries;$/;"	m	struct:redisServer	access:public
redisServer::shutdown_asap	server.h	/^    int shutdown_asap;          \/* SHUTDOWN needed ASAP *\/$/;"	m	struct:redisServer	access:public
redisServer::slave_announce_ip	server.h	/^    char *slave_announce_ip;        \/* Give the master this ip address. *\/$/;"	m	struct:redisServer	access:public
redisServer::slave_announce_port	server.h	/^    int slave_announce_port;        \/* Give the master this listening port. *\/$/;"	m	struct:redisServer	access:public
redisServer::slave_priority	server.h	/^    int slave_priority;             \/* Reported in INFO and used by Sentinel. *\/$/;"	m	struct:redisServer	access:public
redisServer::slaves	server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer	access:public
redisServer::slaveseldb	server.h	/^    int slaveseldb;                 \/* Last SELECTed DB in replication output *\/$/;"	m	struct:redisServer	access:public
redisServer::slotsmgrt_cached_clients	server.h	/^    slotsmgrtAsyncClient *slotsmgrt_cached_clients;$/;"	m	struct:redisServer	access:public
redisServer::slotsmgrt_cached_sockfds	server.h	/^    dict *slotsmgrt_cached_sockfds;$/;"	m	struct:redisServer	access:public
redisServer::slotsmgrt_lazy_release	server.h	/^    list *slotsmgrt_lazy_release;$/;"	m	struct:redisServer	access:public
redisServer::slowlog	server.h	/^    list *slowlog;                  \/* SLOWLOG list of commands *\/$/;"	m	struct:redisServer	access:public
redisServer::slowlog_entry_id	server.h	/^    long long slowlog_entry_id;     \/* SLOWLOG current entry ID *\/$/;"	m	struct:redisServer	access:public
redisServer::slowlog_log_slower_than	server.h	/^    long long slowlog_log_slower_than; \/* SLOWLOG time limit (to get logged) *\/$/;"	m	struct:redisServer	access:public
redisServer::slowlog_max_len	server.h	/^    unsigned long slowlog_max_len;     \/* SLOWLOG max number of items logged *\/$/;"	m	struct:redisServer	access:public
redisServer::sofd	server.h	/^    int sofd;                   \/* Unix socket file descriptor *\/$/;"	m	struct:redisServer	access:public
redisServer::sort_alpha	server.h	/^    int sort_alpha;$/;"	m	struct:redisServer	access:public
redisServer::sort_bypattern	server.h	/^    int sort_bypattern;$/;"	m	struct:redisServer	access:public
redisServer::sort_desc	server.h	/^    int sort_desc;$/;"	m	struct:redisServer	access:public
redisServer::sort_store	server.h	/^    int sort_store;$/;"	m	struct:redisServer	access:public
redisServer::sremCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
redisServer::stat_evictedkeys	server.h	/^    long long stat_evictedkeys;     \/* Number of evicted keys (maxmemory) *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_expiredkeys	server.h	/^    long long stat_expiredkeys;     \/* Number of expired keys *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_fork_rate	server.h	/^    double stat_fork_rate;          \/* Fork rate in GB\/sec. *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_fork_time	server.h	/^    long long stat_fork_time;       \/* Time needed to perform latest fork() *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_keyspace_hits	server.h	/^    long long stat_keyspace_hits;   \/* Number of successful lookups of keys *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_keyspace_misses	server.h	/^    long long stat_keyspace_misses; \/* Number of failed lookups of keys *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_net_input_bytes	server.h	/^    long long stat_net_input_bytes; \/* Bytes read from network. *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_net_output_bytes	server.h	/^    long long stat_net_output_bytes; \/* Bytes written to network. *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_numcommands	server.h	/^    long long stat_numcommands;     \/* Number of processed commands *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_numconnections	server.h	/^    long long stat_numconnections;  \/* Number of connections received *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_peak_memory	server.h	/^    size_t stat_peak_memory;        \/* Max used memory record *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_rejected_conn	server.h	/^    long long stat_rejected_conn;   \/* Clients rejected because of maxclients *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_starttime	server.h	/^    time_t stat_starttime;          \/* Server start time *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_sync_full	server.h	/^    long long stat_sync_full;       \/* Number of full resyncs with slaves. *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_sync_partial_err	server.h	/^    long long stat_sync_partial_err;\/* Number of unaccepted PSYNC requests. *\/$/;"	m	struct:redisServer	access:public
redisServer::stat_sync_partial_ok	server.h	/^    long long stat_sync_partial_ok; \/* Number of accepted PSYNC requests. *\/$/;"	m	struct:redisServer	access:public
redisServer::stop_writes_on_bgsave_err	server.h	/^    int stop_writes_on_bgsave_err;  \/* Don't allow writes if can't BGSAVE *\/$/;"	m	struct:redisServer	access:public
redisServer::supervised	server.h	/^    int supervised;                 \/* 1 if supervised, 0 otherwise. *\/$/;"	m	struct:redisServer	access:public
redisServer::supervised_mode	server.h	/^    int supervised_mode;            \/* See SUPERVISED_* *\/$/;"	m	struct:redisServer	access:public
redisServer::syslog_enabled	server.h	/^    int syslog_enabled;             \/* Is syslog enabled? *\/$/;"	m	struct:redisServer	access:public
redisServer::syslog_facility	server.h	/^    int syslog_facility;            \/* Syslog facility *\/$/;"	m	struct:redisServer	access:public
redisServer::syslog_ident	server.h	/^    char *syslog_ident;             \/* Syslog ident *\/$/;"	m	struct:redisServer	access:public
redisServer::system_memory_size	server.h	/^    size_t system_memory_size;  \/* Total memory in system as reported by OS *\/$/;"	m	struct:redisServer	access:public
redisServer::tcp_backlog	server.h	/^    int tcp_backlog;            \/* TCP listen() backlog *\/$/;"	m	struct:redisServer	access:public
redisServer::tcpkeepalive	server.h	/^    int tcpkeepalive;               \/* Set SO_KEEPALIVE if non-zero. *\/$/;"	m	struct:redisServer	access:public
redisServer::unblocked_clients	server.h	/^    list *unblocked_clients; \/* list of clients to unblock before next loop *\/$/;"	m	struct:redisServer	access:public
redisServer::unixsocket	server.h	/^    char *unixsocket;           \/* UNIX socket path *\/$/;"	m	struct:redisServer	access:public
redisServer::unixsocketperm	server.h	/^    mode_t unixsocketperm;      \/* UNIX socket permission *\/$/;"	m	struct:redisServer	access:public
redisServer::unixtime	server.h	/^    time_t unixtime;        \/* Unix time sampled every cron cycle. *\/$/;"	m	struct:redisServer	access:public
redisServer::verbosity	server.h	/^    int verbosity;                  \/* Loglevel in redis.conf *\/$/;"	m	struct:redisServer	access:public
redisServer::watchdog_period	server.h	/^    int watchdog_period;  \/* Software watchdog period in ms. 0 = off *\/$/;"	m	struct:redisServer	access:public
redisServer::zset_max_ziplist_entries	server.h	/^    size_t zset_max_ziplist_entries;$/;"	m	struct:redisServer	access:public
redisServer::zset_max_ziplist_value	server.h	/^    size_t zset_max_ziplist_value;$/;"	m	struct:redisServer	access:public
redisSetProcTitle	server.c	/^void redisSetProcTitle(char *title) {$/;"	f	signature:(char *title)
redisSetProcTitle	server.h	/^void redisSetProcTitle(char *title);$/;"	p	signature:(char *title)
redisSortObject	server.h	/^} redisSortObject;$/;"	t	typeref:struct:_redisSortObject
redisSortOperation	server.h	/^} redisSortOperation;$/;"	t	typeref:struct:_redisSortOperation
redisSrand48	rand.c	/^void redisSrand48(int32_t seedval) {$/;"	f	signature:(int32_t seedval)
redisSrand48	rand.h	/^void redisSrand48(int32_t seedval);$/;"	p	signature:(int32_t seedval)
redisSupervisedSystemd	server.c	/^int redisSupervisedSystemd(void) {$/;"	f	signature:(void)
redisSupervisedUpstart	server.c	/^int redisSupervisedUpstart(void) {$/;"	f	signature:(void)
redis_check_rdb	redis-check-rdb.c	/^int redis_check_rdb(char *rdbfilename) {$/;"	f	signature:(char *rdbfilename)
redis_check_rdb	server.h	/^int redis_check_rdb(char *rdbfilename);$/;"	p	signature:(char *rdbfilename)
redis_check_rdb_main	redis-check-rdb.c	/^int redis_check_rdb_main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
redis_check_rdb_main	server.h	/^int redis_check_rdb_main(int argc, char **argv);$/;"	p	signature:(int argc, char **argv)
redis_fstat	config.h	44;"	d
redis_fstat	config.h	47;"	d
redis_math_random	scripting.c	/^int redis_math_random (lua_State *L) {$/;"	f	signature:(lua_State *L)
redis_math_random	scripting.c	/^int redis_math_random (lua_State *L);$/;"	p	file:	signature:(lua_State *L)
redis_math_randomseed	scripting.c	/^int redis_math_randomseed (lua_State *L) {$/;"	f	signature:(lua_State *L)
redis_math_randomseed	scripting.c	/^int redis_math_randomseed (lua_State *L);$/;"	p	file:	signature:(lua_State *L)
redis_stat	config.h	45;"	d
redis_stat	config.h	48;"	d
refcount	sentinel.c	/^    int refcount;          \/* Number of sentinelRedisInstance owners. *\/$/;"	m	struct:instanceLink	file:	access:public
refcount	server.h	/^    int refcount;$/;"	m	struct:redisObject	access:public
refreshGoodSlavesCount	replication.c	/^void refreshGoodSlavesCount(void) {$/;"	f	signature:(void)
refreshGoodSlavesCount	server.h	/^void refreshGoodSlavesCount(void);$/;"	p	signature:(void)
registers	hyperloglog.c	/^    uint8_t registers[]; \/* Data bytes. *\/$/;"	m	struct:hllhdr	file:	access:public
rehashidx	dict.h	/^    long rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict	access:public
releaseInstanceLink	sentinel.c	/^instanceLink *releaseInstanceLink(instanceLink *link, sentinelRedisInstance *ri)$/;"	f	signature:(instanceLink *link, sentinelRedisInstance *ri)
releaseSentinelAddr	sentinel.c	/^void releaseSentinelAddr(sentinelAddr *sa) {$/;"	f	signature:(sentinelAddr *sa)
releaseSentinelRedisInstance	sentinel.c	/^void releaseSentinelRedisInstance(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
releaseSentinelRedisInstance	sentinel.c	/^void releaseSentinelRedisInstance(sentinelRedisInstance *ri);$/;"	p	file:	signature:(sentinelRedisInstance *ri)
releaseSlotsmgrtAsyncClient	slots_async.c	/^releaseSlotsmgrtAsyncClient(int db, const char *errmsg) {$/;"	f	file:	signature:(int db, const char *errmsg)
release_hdr	Makefile	/^release_hdr := $(shell sh -c '.\/mkreleasehdr.sh')$/;"	m
removeExpire	db.c	/^int removeExpire(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
removeExpire	server.h	/^int removeExpire(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
removeMatchingSentinelFromMaster	sentinel.c	/^int removeMatchingSentinelFromMaster(sentinelRedisInstance *master, char *runid) {$/;"	f	signature:(sentinelRedisInstance *master, char *runid)
removed_keys	slots_async.c	/^    list *removed_keys;$/;"	m	struct:__anon13	file:	access:public
renameCommand	db.c	/^void renameCommand(client *c) {$/;"	f	signature:(client *c)
renameCommand	server.h	/^void renameCommand(client *c);$/;"	p	signature:(client *c)
renameGenericCommand	db.c	/^void renameGenericCommand(client *c, int nx) {$/;"	f	signature:(client *c, int nx)
renamenxCommand	db.c	/^void renamenxCommand(client *c) {$/;"	f	signature:(client *c)
renamenxCommand	server.h	/^void renamenxCommand(client *c);$/;"	p	signature:(client *c)
repeat	redis-cli.c	/^    long repeat;$/;"	m	struct:config	file:	access:public
repl	redis-cli.c	/^static void repl(void) {$/;"	f	file:	signature:(void)
replScriptCacheDictType	server.c	/^dictType replScriptCacheDictType = {$/;"	v
repl_ack_off	server.h	/^    long long repl_ack_off; \/* Replication ack offset, if this is a slave. *\/$/;"	m	struct:client	access:public
repl_ack_time	server.h	/^    long long repl_ack_time;\/* Replication ack time, if this is a slave. *\/$/;"	m	struct:client	access:public
repl_backlog	server.h	/^    char *repl_backlog;             \/* Replication backlog for partial syncs *\/$/;"	m	struct:redisServer	access:public
repl_backlog_histlen	server.h	/^    long long repl_backlog_histlen; \/* Backlog actual data length *\/$/;"	m	struct:redisServer	access:public
repl_backlog_idx	server.h	/^    long long repl_backlog_idx;     \/* Backlog circular buffer current offset *\/$/;"	m	struct:redisServer	access:public
repl_backlog_off	server.h	/^    long long repl_backlog_off;     \/* Replication offset of first byte in the$/;"	m	struct:redisServer	access:public
repl_backlog_size	server.h	/^    long long repl_backlog_size;    \/* Backlog circular buffer size *\/$/;"	m	struct:redisServer	access:public
repl_backlog_time_limit	server.h	/^    time_t repl_backlog_time_limit; \/* Time without slaves after the backlog$/;"	m	struct:redisServer	access:public
repl_disable_tcp_nodelay	server.h	/^    int repl_disable_tcp_nodelay;   \/* Disable TCP_NODELAY after SYNC? *\/$/;"	m	struct:redisServer	access:public
repl_diskless_sync	server.h	/^    int repl_diskless_sync;         \/* Send RDB to slaves sockets directly. *\/$/;"	m	struct:redisServer	access:public
repl_diskless_sync_delay	server.h	/^    int repl_diskless_sync_delay;   \/* Delay to start a diskless repl BGSAVE. *\/$/;"	m	struct:redisServer	access:public
repl_down_since	server.h	/^    time_t repl_down_since; \/* Unix time at which link with master went down *\/$/;"	m	struct:redisServer	access:public
repl_good_slaves_count	server.h	/^    int repl_good_slaves_count;     \/* Number of slaves with lag <= max_lag. *\/$/;"	m	struct:redisServer	access:public
repl_master_initial_offset	server.h	/^    long long repl_master_initial_offset;         \/* Master PSYNC offset. *\/$/;"	m	struct:redisServer	access:public
repl_master_runid	server.h	/^    char repl_master_runid[CONFIG_RUN_ID_SIZE+1];  \/* Master run id for PSYNC.*\/$/;"	m	struct:redisServer	access:public
repl_min_slaves_max_lag	server.h	/^    int repl_min_slaves_max_lag;    \/* Max lag of <count> slaves to write. *\/$/;"	m	struct:redisServer	access:public
repl_min_slaves_to_write	server.h	/^    int repl_min_slaves_to_write;   \/* Min number of slaves to write. *\/$/;"	m	struct:redisServer	access:public
repl_no_slaves_since	server.h	/^    time_t repl_no_slaves_since;    \/* We have no slaves since that time.$/;"	m	struct:redisServer	access:public
repl_offset	cluster.h	/^    long long repl_offset;      \/* Last known repl offset for this node. *\/$/;"	m	struct:clusterNode	access:public
repl_offset_time	cluster.h	/^    mstime_t repl_offset_time;  \/* Unix time we received offset for this node *\/$/;"	m	struct:clusterNode	access:public
repl_ping_slave_period	server.h	/^    int repl_ping_slave_period;     \/* Master pings the slave every N seconds *\/$/;"	m	struct:redisServer	access:public
repl_put_online_on_ack	server.h	/^    int repl_put_online_on_ack; \/* Install slave write handler on ACK. *\/$/;"	m	struct:client	access:public
repl_scriptcache_dict	server.h	/^    dict *repl_scriptcache_dict;        \/* SHA1 all slaves are aware of. *\/$/;"	m	struct:redisServer	access:public
repl_scriptcache_fifo	server.h	/^    list *repl_scriptcache_fifo;        \/* First in, first out LRU eviction. *\/$/;"	m	struct:redisServer	access:public
repl_scriptcache_size	server.h	/^    unsigned int repl_scriptcache_size; \/* Max number of elements. *\/$/;"	m	struct:redisServer	access:public
repl_serve_stale_data	server.h	/^    int repl_serve_stale_data; \/* Serve stale data when link is down? *\/$/;"	m	struct:redisServer	access:public
repl_slave_ro	server.h	/^    int repl_slave_ro;          \/* Slave is read only? *\/$/;"	m	struct:redisServer	access:public
repl_state	server.h	/^    int repl_state;          \/* Replication status if the instance is a slave *\/$/;"	m	struct:redisServer	access:public
repl_syncio_timeout	server.h	/^    int repl_syncio_timeout; \/* Timeout for synchronous I\/O calls *\/$/;"	m	struct:redisServer	access:public
repl_timeout	server.h	/^    int repl_timeout;               \/* Timeout after N seconds of master idle *\/$/;"	m	struct:redisServer	access:public
repl_transfer_fd	server.h	/^    int repl_transfer_fd;    \/* Slave -> Master SYNC temp file descriptor *\/$/;"	m	struct:redisServer	access:public
repl_transfer_last_fsync_off	server.h	/^    off_t repl_transfer_last_fsync_off; \/* Offset when we fsync-ed last time. *\/$/;"	m	struct:redisServer	access:public
repl_transfer_lastio	server.h	/^    time_t repl_transfer_lastio; \/* Unix time of the latest read, for timeout *\/$/;"	m	struct:redisServer	access:public
repl_transfer_read	server.h	/^    off_t repl_transfer_read; \/* Amount of RDB read from master during sync. *\/$/;"	m	struct:redisServer	access:public
repl_transfer_s	server.h	/^    int repl_transfer_s;     \/* Slave -> Master SYNC socket *\/$/;"	m	struct:redisServer	access:public
repl_transfer_size	server.h	/^    off_t repl_transfer_size; \/* Size of RDB to read from master during sync. *\/$/;"	m	struct:redisServer	access:public
repl_transfer_tmpfile	server.h	/^    char *repl_transfer_tmpfile; \/* Slave-> master SYNC temp file name *\/$/;"	m	struct:redisServer	access:public
replaceClientCommandVector	networking.c	/^void replaceClientCommandVector(client *c, int argc, robj **argv) {$/;"	f	signature:(client *c, int argc, robj **argv)
replaceClientCommandVector	server.h	/^void replaceClientCommandVector(client *c, int argc, robj **argv);$/;"	p	signature:(client *c, int argc, robj **argv)
replconfCommand	replication.c	/^void replconfCommand(client *c) {$/;"	f	signature:(client *c)
replconfCommand	server.h	/^void replconfCommand(client *c);$/;"	p	signature:(client *c)
repldbfd	server.h	/^    int repldbfd;           \/* Replication DB file descriptor. *\/$/;"	m	struct:client	access:public
repldboff	server.h	/^    off_t repldboff;        \/* Replication DB file offset. *\/$/;"	m	struct:client	access:public
repldbsize	server.h	/^    off_t repldbsize;       \/* Replication DB file size. *\/$/;"	m	struct:client	access:public
replicationAbortSyncTransfer	replication.c	/^void replicationAbortSyncTransfer(void) {$/;"	f	signature:(void)
replicationCacheMaster	replication.c	/^void replicationCacheMaster(client *c) {$/;"	f	signature:(client *c)
replicationCacheMaster	server.h	/^void replicationCacheMaster(client *c);$/;"	p	signature:(client *c)
replicationCountAcksByOffset	replication.c	/^int replicationCountAcksByOffset(long long offset) {$/;"	f	signature:(long long offset)
replicationCountAcksByOffset	server.h	/^int replicationCountAcksByOffset(long long offset);$/;"	p	signature:(long long offset)
replicationCreateMasterClient	replication.c	/^void replicationCreateMasterClient(int fd) {$/;"	f	signature:(int fd)
replicationCron	replication.c	/^void replicationCron(void) {$/;"	f	signature:(void)
replicationCron	server.h	/^void replicationCron(void);$/;"	p	signature:(void)
replicationDiscardCachedMaster	replication.c	/^void replicationDiscardCachedMaster(void) {$/;"	f	signature:(void)
replicationDiscardCachedMaster	replication.c	/^void replicationDiscardCachedMaster(void);$/;"	p	file:	signature:(void)
replicationEmptyDbCallback	replication.c	/^void replicationEmptyDbCallback(void *privdata) {$/;"	f	signature:(void *privdata)
replicationFeedMonitors	replication.c	/^void replicationFeedMonitors(client *c, list *monitors, int dictid, robj **argv, int argc) {$/;"	f	signature:(client *c, list *monitors, int dictid, robj **argv, int argc)
replicationFeedMonitors	server.h	/^void replicationFeedMonitors(client *c, list *monitors, int dictid, robj **argv, int argc);$/;"	p	signature:(client *c, list *monitors, int dictid, robj **argv, int argc)
replicationFeedSlaves	replication.c	/^void replicationFeedSlaves(list *slaves, int dictid, robj **argv, int argc) {$/;"	f	signature:(list *slaves, int dictid, robj **argv, int argc)
replicationFeedSlaves	server.h	/^void replicationFeedSlaves(list *slaves, int dictid, robj **argv, int argc);$/;"	p	signature:(list *slaves, int dictid, robj **argv, int argc)
replicationGetSlaveName	replication.c	/^char *replicationGetSlaveName(client *c) {$/;"	f	signature:(client *c)
replicationGetSlaveName	server.h	/^char *replicationGetSlaveName(client *c);$/;"	p	signature:(client *c)
replicationGetSlaveOffset	replication.c	/^long long replicationGetSlaveOffset(void) {$/;"	f	signature:(void)
replicationGetSlaveOffset	server.h	/^long long replicationGetSlaveOffset(void);$/;"	p	signature:(void)
replicationHandleMasterDisconnection	replication.c	/^void replicationHandleMasterDisconnection(void) {$/;"	f	signature:(void)
replicationHandleMasterDisconnection	server.h	/^void replicationHandleMasterDisconnection(void);$/;"	p	signature:(void)
replicationRequestAckFromSlaves	replication.c	/^void replicationRequestAckFromSlaves(void) {$/;"	f	signature:(void)
replicationResurrectCachedMaster	replication.c	/^void replicationResurrectCachedMaster(int newfd) {$/;"	f	signature:(int newfd)
replicationResurrectCachedMaster	replication.c	/^void replicationResurrectCachedMaster(int newfd);$/;"	p	file:	signature:(int newfd)
replicationScriptCacheAdd	replication.c	/^void replicationScriptCacheAdd(sds sha1) {$/;"	f	signature:(sds sha1)
replicationScriptCacheAdd	server.h	/^void replicationScriptCacheAdd(sds sha1);$/;"	p	signature:(sds sha1)
replicationScriptCacheExists	replication.c	/^int replicationScriptCacheExists(sds sha1) {$/;"	f	signature:(sds sha1)
replicationScriptCacheExists	server.h	/^int replicationScriptCacheExists(sds sha1);$/;"	p	signature:(sds sha1)
replicationScriptCacheFlush	replication.c	/^void replicationScriptCacheFlush(void) {$/;"	f	signature:(void)
replicationScriptCacheFlush	server.h	/^void replicationScriptCacheFlush(void);$/;"	p	signature:(void)
replicationScriptCacheInit	replication.c	/^void replicationScriptCacheInit(void) {$/;"	f	signature:(void)
replicationScriptCacheInit	server.h	/^void replicationScriptCacheInit(void);$/;"	p	signature:(void)
replicationSendAck	replication.c	/^void replicationSendAck(void) {$/;"	f	signature:(void)
replicationSendAck	replication.c	/^void replicationSendAck(void);$/;"	p	file:	signature:(void)
replicationSendNewlineToMaster	replication.c	/^void replicationSendNewlineToMaster(void) {$/;"	f	signature:(void)
replicationSendNewlineToMaster	server.h	/^void replicationSendNewlineToMaster(void);$/;"	p	signature:(void)
replicationSetMaster	replication.c	/^void replicationSetMaster(char *ip, int port) {$/;"	f	signature:(char *ip, int port)
replicationSetMaster	server.h	/^void replicationSetMaster(char *ip, int port);$/;"	p	signature:(char *ip, int port)
replicationSetupSlaveForFullResync	replication.c	/^int replicationSetupSlaveForFullResync(client *slave, long long offset) {$/;"	f	signature:(client *slave, long long offset)
replicationSetupSlaveForFullResync	server.h	/^int replicationSetupSlaveForFullResync(client *slave, long long offset);$/;"	p	signature:(client *slave, long long offset)
replicationUnsetMaster	replication.c	/^void replicationUnsetMaster(void) {$/;"	f	signature:(void)
replicationUnsetMaster	server.h	/^void replicationUnsetMaster(void);$/;"	p	signature:(void)
reploff	server.h	/^    long long reploff;      \/* Replication offset if this is our master. *\/$/;"	m	struct:client	access:public
reploffset	server.h	/^    long long reploffset;   \/* Replication offset to reach. *\/$/;"	m	struct:blockingState	access:public
replpreamble	server.h	/^    sds replpreamble;       \/* Replication DB preamble. *\/$/;"	m	struct:client	access:public
replrunid	server.h	/^    char replrunid[CONFIG_RUN_ID_SIZE+1]; \/* Master run id if is a master. *\/$/;"	m	struct:client	access:public
replstate	server.h	/^    int replstate;          \/* Replication state if this is a slave. *\/$/;"	m	struct:client	access:public
reply	server.h	/^    list *reply;            \/* List of reply objects to send to the client. *\/$/;"	m	struct:client	access:public
replyToBlockedClientTimedOut	blocked.c	/^void replyToBlockedClientTimedOut(client *c) {$/;"	f	signature:(client *c)
replyToBlockedClientTimedOut	server.h	/^void replyToBlockedClientTimedOut(client *c);$/;"	p	signature:(client *c)
reply_bytes	server.h	/^    unsigned long long reply_bytes; \/* Tot bytes of objects in reply list. *\/$/;"	m	struct:client	access:public
representClusterNodeFlags	cluster.c	/^sds representClusterNodeFlags(sds ci, uint16_t flags) {$/;"	f	signature:(sds ci, uint16_t flags)
representClusterNodeFlags	cluster.c	/^sds representClusterNodeFlags(sds ci, uint16_t flags);$/;"	p	file:	signature:(sds ci, uint16_t flags)
reqtype	server.h	/^    int reqtype;            \/* Request protocol type: PROTO_REQ_* *\/$/;"	m	struct:client	access:public
requests	redis-benchmark.c	/^    int requests;$/;"	m	struct:config	file:	access:public
requests_finished	redis-benchmark.c	/^    int requests_finished;$/;"	m	struct:config	file:	access:public
requests_issued	redis-benchmark.c	/^    int requests_issued;$/;"	m	struct:config	file:	access:public
requirepass	server.h	/^    char *requirepass;          \/* Pass for AUTH command, or NULL *\/$/;"	m	struct:redisServer	access:public
reset	setproctitle.c	/^	_Bool reset;$/;"	m	struct:__anon39	file:	access:public
resetClient	networking.c	/^void resetClient(client *c) {$/;"	f	signature:(client *c)
resetClient	redis-benchmark.c	/^static void resetClient(client c) {$/;"	f	file:	signature:(client c)
resetClient	server.h	/^void resetClient(client *c);$/;"	p	signature:(client *c)
resetCommandTableStats	server.c	/^void resetCommandTableStats(void) {$/;"	f	signature:(void)
resetCommandTableStats	server.h	/^void resetCommandTableStats(void);$/;"	p	signature:(void)
resetManualFailover	cluster.c	/^void resetManualFailover(void) {$/;"	f	signature:(void)
resetManualFailover	cluster.c	/^void resetManualFailover(void);$/;"	p	file:	signature:(void)
resetRefCount	object.c	/^robj *resetRefCount(robj *obj) {$/;"	f	signature:(robj *obj)
resetRefCount	server.h	/^robj *resetRefCount(robj *obj);$/;"	p	signature:(robj *obj)
resetServerSaveParams	config.c	/^void resetServerSaveParams(void) {$/;"	f	signature:(void)
resetServerSaveParams	server.h	/^void resetServerSaveParams(void);$/;"	p	signature:(void)
resetServerStats	server.c	/^void resetServerStats(void) {$/;"	f	signature:(void)
resetServerStats	server.h	/^void resetServerStats(void);$/;"	p	signature:(void)
reset_nodes	redis-trib.rb	/^    def reset_nodes$/;"	f	class:RedisTrib
reshard_cluster_cmd	redis-trib.rb	/^    def reshard_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
resident_set_size	server.h	/^    size_t resident_set_size;       \/* RSS sampled in serverCron(). *\/$/;"	m	struct:redisServer	access:public
resizeReplicationBacklog	replication.c	/^void resizeReplicationBacklog(long long newsize) {$/;"	f	signature:(long long newsize)
resizeReplicationBacklog	server.h	/^void resizeReplicationBacklog(long long newsize);$/;"	p	signature:(long long newsize)
restartServer	server.c	/^int restartServer(int flags, mstime_t delay) {$/;"	f	signature:(int flags, mstime_t delay)
restartServer	server.h	/^int restartServer(int flags, mstime_t delay);$/;"	p	signature:(int flags, mstime_t delay)
restoreCommand	cluster.c	/^void restoreCommand(client *c) {$/;"	f	signature:(client *c)
restoreCommand	server.h	/^void restoreCommand(client *c);$/;"	p	signature:(client *c)
retry_num	sentinel.c	/^    int retry_num;          \/* Number of times we tried to execute it. *\/$/;"	m	struct:sentinelScriptJob	file:	access:public
rev	dict.c	/^static unsigned long rev(unsigned long v) {$/;"	f	file:	signature:(unsigned long v)
rewriteAppendOnlyFile	aof.c	/^int rewriteAppendOnlyFile(char *filename) {$/;"	f	signature:(char *filename)
rewriteAppendOnlyFileBackground	aof.c	/^int rewriteAppendOnlyFileBackground(void) {$/;"	f	signature:(void)
rewriteAppendOnlyFileBackground	server.h	/^int rewriteAppendOnlyFileBackground(void);$/;"	p	signature:(void)
rewriteClientCommandArgument	networking.c	/^void rewriteClientCommandArgument(client *c, int i, robj *newval) {$/;"	f	signature:(client *c, int i, robj *newval)
rewriteClientCommandArgument	server.h	/^void rewriteClientCommandArgument(client *c, int i, robj *newval);$/;"	p	signature:(client *c, int i, robj *newval)
rewriteClientCommandVector	networking.c	/^void rewriteClientCommandVector(client *c, int argc, ...) {$/;"	f	signature:(client *c, int argc, ...)
rewriteClientCommandVector	server.h	/^void rewriteClientCommandVector(client *c, int argc, ...);$/;"	p	signature:(client *c, int argc, ...)
rewriteConfig	server.h	/^int rewriteConfig(char *path);$/;"	p	signature:(char *path)
rewriteConfigRewriteLine	server.h	/^void rewriteConfigRewriteLine(struct rewriteConfigState *state, const char *option, sds line, int force);$/;"	p	signature:(struct rewriteConfigState *state, const char *option, sds line, int force)
rewriteConfigSentinelOption	sentinel.c	/^void rewriteConfigSentinelOption(struct rewriteConfigState *state) {$/;"	f	signature:(struct rewriteConfigState *state)
rewriteHashObject	aof.c	/^int rewriteHashObject(rio *r, robj *key, robj *o) {$/;"	f	signature:(rio *r, robj *key, robj *o)
rewriteListObject	aof.c	/^int rewriteListObject(rio *r, robj *key, robj *o) {$/;"	f	signature:(rio *r, robj *key, robj *o)
rewriteSetObject	aof.c	/^int rewriteSetObject(rio *r, robj *key, robj *o) {$/;"	f	signature:(rio *r, robj *key, robj *o)
rewriteSortedSetObject	aof.c	/^int rewriteSortedSetObject(rio *r, robj *key, robj *o) {$/;"	f	signature:(rio *r, robj *key, robj *o)
rfds	ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:	access:public
rfileProc	ae.h	/^    aeFileProc *rfileProc;$/;"	m	struct:aeFileEvent	access:public
rio	redis-check-rdb.c	/^    rio *rio;$/;"	m	struct:__anon23	file:	access:public
rio	rio.h	/^typedef struct _rio rio;$/;"	t	typeref:struct:_rio
rioBufferFlush	rio.c	/^static int rioBufferFlush(rio *r) {$/;"	f	file:	signature:(rio *r)
rioBufferIO	rio.c	/^static const rio rioBufferIO = {$/;"	v	file:
rioBufferRead	rio.c	/^static size_t rioBufferRead(rio *r, void *buf, size_t len) {$/;"	f	file:	signature:(rio *r, void *buf, size_t len)
rioBufferTell	rio.c	/^static off_t rioBufferTell(rio *r) {$/;"	f	file:	signature:(rio *r)
rioBufferWrite	rio.c	/^static size_t rioBufferWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:	signature:(rio *r, const void *buf, size_t len)
rioFdsetFlush	rio.c	/^static int rioFdsetFlush(rio *r) {$/;"	f	file:	signature:(rio *r)
rioFdsetIO	rio.c	/^static const rio rioFdsetIO = {$/;"	v	file:
rioFdsetRead	rio.c	/^static size_t rioFdsetRead(rio *r, void *buf, size_t len) {$/;"	f	file:	signature:(rio *r, void *buf, size_t len)
rioFdsetTell	rio.c	/^static off_t rioFdsetTell(rio *r) {$/;"	f	file:	signature:(rio *r)
rioFdsetWrite	rio.c	/^static size_t rioFdsetWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:	signature:(rio *r, const void *buf, size_t len)
rioFileFlush	rio.c	/^static int rioFileFlush(rio *r) {$/;"	f	file:	signature:(rio *r)
rioFileIO	rio.c	/^static const rio rioFileIO = {$/;"	v	file:
rioFileRead	rio.c	/^static size_t rioFileRead(rio *r, void *buf, size_t len) {$/;"	f	file:	signature:(rio *r, void *buf, size_t len)
rioFileTell	rio.c	/^static off_t rioFileTell(rio *r) {$/;"	f	file:	signature:(rio *r)
rioFileWrite	rio.c	/^static size_t rioFileWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:	signature:(rio *r, const void *buf, size_t len)
rioFlush	rio.h	/^static inline int rioFlush(rio *r) {$/;"	f	signature:(rio *r)
rioFreeFdset	rio.c	/^void rioFreeFdset(rio *r) {$/;"	f	signature:(rio *r)
rioFreeFdset	rio.h	/^void rioFreeFdset(rio *r);$/;"	p	signature:(rio *r)
rioGenericUpdateChecksum	rio.c	/^void rioGenericUpdateChecksum(rio *r, const void *buf, size_t len) {$/;"	f	signature:(rio *r, const void *buf, size_t len)
rioGenericUpdateChecksum	rio.h	/^void rioGenericUpdateChecksum(rio *r, const void *buf, size_t len);$/;"	p	signature:(rio *r, const void *buf, size_t len)
rioInitWithBuffer	rio.c	/^void rioInitWithBuffer(rio *r, sds s) {$/;"	f	signature:(rio *r, sds s)
rioInitWithBuffer	rio.h	/^void rioInitWithBuffer(rio *r, sds s);$/;"	p	signature:(rio *r, sds s)
rioInitWithFdset	rio.c	/^void rioInitWithFdset(rio *r, int *fds, int numfds) {$/;"	f	signature:(rio *r, int *fds, int numfds)
rioInitWithFdset	rio.h	/^void rioInitWithFdset(rio *r, int *fds, int numfds);$/;"	p	signature:(rio *r, int *fds, int numfds)
rioInitWithFile	rio.c	/^void rioInitWithFile(rio *r, FILE *fp) {$/;"	f	signature:(rio *r, FILE *fp)
rioInitWithFile	rio.h	/^void rioInitWithFile(rio *r, FILE *fp);$/;"	p	signature:(rio *r, FILE *fp)
rioRead	rio.h	/^static inline size_t rioRead(rio *r, void *buf, size_t len) {$/;"	f	signature:(rio *r, void *buf, size_t len)
rioSetAutoSync	rio.c	/^void rioSetAutoSync(rio *r, off_t bytes) {$/;"	f	signature:(rio *r, off_t bytes)
rioSetAutoSync	rio.h	/^void rioSetAutoSync(rio *r, off_t bytes);$/;"	p	signature:(rio *r, off_t bytes)
rioTell	rio.h	/^static inline off_t rioTell(rio *r) {$/;"	f	signature:(rio *r)
rioWrite	rio.h	/^static inline size_t rioWrite(rio *r, const void *buf, size_t len) {$/;"	f	signature:(rio *r, const void *buf, size_t len)
rioWriteBulkCount	rio.c	/^size_t rioWriteBulkCount(rio *r, char prefix, int count) {$/;"	f	signature:(rio *r, char prefix, int count)
rioWriteBulkCount	rio.h	/^size_t rioWriteBulkCount(rio *r, char prefix, int count);$/;"	p	signature:(rio *r, char prefix, int count)
rioWriteBulkDouble	rio.c	/^size_t rioWriteBulkDouble(rio *r, double d) {$/;"	f	signature:(rio *r, double d)
rioWriteBulkDouble	rio.h	/^size_t rioWriteBulkDouble(rio *r, double d);$/;"	p	signature:(rio *r, double d)
rioWriteBulkLongLong	rio.c	/^size_t rioWriteBulkLongLong(rio *r, long long l) {$/;"	f	signature:(rio *r, long long l)
rioWriteBulkLongLong	rio.h	/^size_t rioWriteBulkLongLong(rio *r, long long l);$/;"	p	signature:(rio *r, long long l)
rioWriteBulkObject	aof.c	/^int rioWriteBulkObject(rio *r, robj *obj) {$/;"	f	signature:(rio *r, robj *obj)
rioWriteBulkString	rio.c	/^size_t rioWriteBulkString(rio *r, const char *buf, size_t len) {$/;"	f	signature:(rio *r, const char *buf, size_t len)
rioWriteBulkString	rio.h	/^size_t rioWriteBulkString(rio *r, const char *buf, size_t len);$/;"	p	signature:(rio *r, const char *buf, size_t len)
rioWriteHashIteratorCursor	aof.c	/^static int rioWriteHashIteratorCursor(rio *r, hashTypeIterator *hi, int what) {$/;"	f	file:	signature:(rio *r, hashTypeIterator *hi, int what)
robj	server.h	/^} robj;$/;"	t	typeref:struct:redisObject
rol	sha1.c	31;"	d	file:
roleCommand	replication.c	/^void roleCommand(client *c) {$/;"	f	signature:(client *c)
roleCommand	server.h	/^void roleCommand(client *c);$/;"	p	signature:(client *c)
role_reported	sentinel.c	/^    int role_reported;$/;"	m	struct:sentinelRedisInstance	file:	access:public
role_reported_time	sentinel.c	/^    mstime_t role_reported_time;$/;"	m	struct:sentinelRedisInstance	file:	access:public
roslaveerr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
rpop	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
rpopCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
rpopCommand	server.h	/^void rpopCommand(client *c);$/;"	p	signature:(client *c)
rpopCommand	t_list.c	/^void rpopCommand(client *c) {$/;"	f	signature:(client *c)
rpoplpushCommand	server.h	/^void rpoplpushCommand(client *c);$/;"	p	signature:(client *c)
rpoplpushCommand	t_list.c	/^void rpoplpushCommand(client *c) {$/;"	f	signature:(client *c)
rpoplpushHandlePush	t_list.c	/^void rpoplpushHandlePush(client *c, robj *dstkey, robj *dstobj, robj *value) {$/;"	f	signature:(client *c, robj *dstkey, robj *dstobj, robj *value)
rpushCommand	server.h	/^void rpushCommand(client *c);$/;"	p	signature:(client *c)
rpushCommand	t_list.c	/^void rpushCommand(client *c) {$/;"	f	signature:(client *c)
rpushxCommand	server.h	/^void rpushxCommand(client *c);$/;"	p	signature:(client *c)
rpushxCommand	t_list.c	/^void rpushxCommand(client *c) {$/;"	f	signature:(client *c)
run_with_period	server.h	449;"	d
runid	sentinel.c	/^    char *runid;    \/* Run ID of this instance, or unique ID if is a Sentinel.*\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
runid	sentinel.c	/^    char *runid;$/;"	m	struct:sentinelLeader	file:	access:public
runid	server.h	/^    char runid[CONFIG_RUN_ID_SIZE+1];  \/* ID always different at every exec. *\/$/;"	m	struct:redisServer	access:public
running_scripts	sentinel.c	/^    int running_scripts;    \/* Number of scripts in execution right now. *\/$/;"	m	struct:sentinelState	file:	access:public
s64	dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon14	access:public
s_down_since_time	sentinel.c	/^    mstime_t s_down_since_time; \/* Subjectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
s_free	sdsalloc.h	42;"	d
s_malloc	sdsalloc.h	40;"	d
s_realloc	sdsalloc.h	41;"	d
saddCommand	server.h	/^void saddCommand(client *c);$/;"	p	signature:(client *c)
saddCommand	t_set.c	/^void saddCommand(client *c) {$/;"	f	signature:(client *c)
safe	dict.h	/^    int table, safe;$/;"	m	struct:dictIterator	access:public
sameobjecterr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
sample	sparkline.h	/^struct sample {$/;"	s
sample::label	sparkline.h	/^    char *label;$/;"	m	struct:sample	access:public
sample::value	sparkline.h	/^    double value;$/;"	m	struct:sample	access:public
samples	latency.h	/^    struct latencySample samples[LATENCY_TS_LEN]; \/* Latest history. *\/$/;"	m	struct:latencyTimeSeries	typeref:struct:latencyTimeSeries::latencySample	access:public
samples	latency.h	/^    uint32_t samples;       \/* Number of non-zero samples. *\/$/;"	m	struct:latencyStats	access:public
samples	server.h	/^        long long samples[STATS_METRIC_SAMPLES];$/;"	m	struct:redisServer::__anon30	access:public
samples	sparkline.h	/^    struct sample *samples;$/;"	m	struct:sequence	typeref:struct:sequence::sample	access:public
saveCommand	rdb.c	/^void saveCommand(client *c) {$/;"	f	signature:(client *c)
saveCommand	server.h	/^void saveCommand(client *c);$/;"	p	signature:(client *c)
saveparam	server.h	/^struct saveparam {$/;"	s
saveparam::changes	server.h	/^    int changes;$/;"	m	struct:saveparam	access:public
saveparam::seconds	server.h	/^    time_t seconds;$/;"	m	struct:saveparam	access:public
saveparams	server.h	/^    struct saveparam *saveparams;   \/* Save points array for RDB *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::saveparam	access:public
saveparamslen	server.h	/^    int saveparamslen;              \/* Number of saving points *\/$/;"	m	struct:redisServer	access:public
scanCallback	db.c	/^void scanCallback(void *privdata, const dictEntry *de) {$/;"	f	signature:(void *privdata, const dictEntry *de)
scanCommand	db.c	/^void scanCommand(client *c) {$/;"	f	signature:(client *c)
scanCommand	server.h	/^void scanCommand(client *c);$/;"	p	signature:(client *c)
scanGenericCommand	db.c	/^void scanGenericCommand(client *c, robj *o, unsigned long cursor) {$/;"	f	signature:(client *c, robj *o, unsigned long cursor)
scanGenericCommand	server.h	/^void scanGenericCommand(client *c, robj *o, unsigned long cursor);$/;"	p	signature:(client *c, robj *o, unsigned long cursor)
scanMode	redis-cli.c	/^static void scanMode(void) {$/;"	f	file:	signature:(void)
scan_mode	redis-cli.c	/^    int scan_mode;$/;"	m	struct:config	file:	access:public
scardCommand	server.h	/^void scardCommand(client *c);$/;"	p	signature:(client *c)
scardCommand	t_set.c	/^void scardCommand(client *c) {$/;"	f	signature:(client *c)
score	geo.h	/^    double score;$/;"	m	struct:geoPoint	access:public
score	server.h	/^        double score;$/;"	m	union:_redisSortObject::__anon31	access:public
score	server.h	/^    double score;$/;"	m	struct:zskiplistNode	access:public
score	t_zset.c	/^    double score;$/;"	m	struct:__anon22	file:	access:public
scoresOfGeoHashBox	geo.c	/^void scoresOfGeoHashBox(GeoHashBits hash, GeoHashFix52Bits *min, GeoHashFix52Bits *max) {$/;"	f	signature:(GeoHashBits hash, GeoHashFix52Bits *min, GeoHashFix52Bits *max)
scriptCommand	scripting.c	/^void scriptCommand(client *c) {$/;"	f	signature:(client *c)
scriptCommand	server.h	/^void scriptCommand(client *c);$/;"	p	signature:(client *c)
scriptingEnableGlobalsProtection	scripting.c	/^void scriptingEnableGlobalsProtection(lua_State *lua) {$/;"	f	signature:(lua_State *lua)
scriptingInit	scripting.c	/^void scriptingInit(int setup) {$/;"	f	signature:(int setup)
scriptingInit	server.h	/^void scriptingInit(int setup);$/;"	p	signature:(int setup)
scriptingRelease	scripting.c	/^void scriptingRelease(void) {$/;"	f	signature:(void)
scriptingReset	scripting.c	/^void scriptingReset(void) {$/;"	f	signature:(void)
scripts_queue	sentinel.c	/^    list *scripts_queue;            \/* Queue of user scripts to execute. *\/$/;"	m	struct:sentinelState	file:	access:public
sdiffCommand	server.h	/^void sdiffCommand(client *c);$/;"	p	signature:(client *c)
sdiffCommand	t_set.c	/^void sdiffCommand(client *c) {$/;"	f	signature:(client *c)
sdiffstoreCommand	server.h	/^void sdiffstoreCommand(client *c);$/;"	p	signature:(client *c)
sdiffstoreCommand	t_set.c	/^void sdiffstoreCommand(client *c) {$/;"	f	signature:(client *c)
sdigits10	util.c	/^uint32_t sdigits10(int64_t v) {$/;"	f	signature:(int64_t v)
sdigits10	util.h	/^uint32_t sdigits10(int64_t v);$/;"	p	signature:(int64_t v)
sds	sds.h	/^typedef char *sds;$/;"	t
sdsAllocPtr	sds.c	/^void *sdsAllocPtr(sds s) {$/;"	f	signature:(sds s)
sdsAllocPtr	sds.h	/^void *sdsAllocPtr(sds s);$/;"	p	signature:(sds s)
sdsAllocSize	sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f	signature:(sds s)
sdsAllocSize	sds.h	/^size_t sdsAllocSize(sds s);$/;"	p	signature:(sds s)
sdsCatColorizedLdbReply	redis-cli.c	/^sds sdsCatColorizedLdbReply(sds o, char *s, size_t len) {$/;"	f	signature:(sds o, char *s, size_t len)
sdsEncodedObject	server.h	1258;"	d
sdsHdrSize	sds.c	/^static inline int sdsHdrSize(char type) {$/;"	f	file:	signature:(char type)
sdsIncrLen	sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f	signature:(sds s, int incr)
sdsIncrLen	sds.h	/^void sdsIncrLen(sds s, int incr);$/;"	p	signature:(sds s, int incr)
sdsMakeRoomFor	sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	signature:(sds s, size_t addlen)
sdsMakeRoomFor	sds.h	/^sds sdsMakeRoomFor(sds s, size_t addlen);$/;"	p	signature:(sds s, size_t addlen)
sdsRemoveFreeSpace	sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f	signature:(sds s)
sdsRemoveFreeSpace	sds.h	/^sds sdsRemoveFreeSpace(sds s);$/;"	p	signature:(sds s)
sdsReqType	sds.c	/^static inline char sdsReqType(size_t string_size) {$/;"	f	file:	signature:(size_t string_size)
sdsTest	sds.c	/^int sdsTest(void) {$/;"	f	signature:(void)
sdsTest	sds.h	/^int sdsTest(int argc, char *argv[]);$/;"	p	signature:(int argc, char *argv[])
sdsZmallocSize	networking.c	/^size_t sdsZmallocSize(sds s) {$/;"	f	signature:(sds s)
sds_free	sds.c	/^void sds_free(void *ptr) { s_free(ptr); }$/;"	f	signature:(void *ptr)
sds_free	sds.h	/^void sds_free(void *ptr);$/;"	p	signature:(void *ptr)
sds_malloc	sds.c	/^void *sds_malloc(size_t size) { return s_malloc(size); }$/;"	f	signature:(size_t size)
sds_malloc	sds.h	/^void *sds_malloc(size_t size);$/;"	p	signature:(size_t size)
sds_realloc	sds.c	/^void *sds_realloc(void *ptr, size_t size) { return s_realloc(ptr,size); }$/;"	f	signature:(void *ptr, size_t size)
sds_realloc	sds.h	/^void *sds_realloc(void *ptr, size_t size);$/;"	p	signature:(void *ptr, size_t size)
sdsalloc	sds.h	/^static inline size_t sdsalloc(const sds s) {$/;"	f	signature:(const sds s)
sdsavail	sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f	signature:(const sds s)
sdscat	sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f	signature:(sds s, const char *t)
sdscat	sds.h	/^sds sdscat(sds s, const char *t);$/;"	p	signature:(sds s, const char *t)
sdscatcolor	redis-cli.c	/^sds sdscatcolor(sds o, char *s, size_t len, char *color) {$/;"	f	signature:(sds o, char *s, size_t len, char *color)
sdscatfmt	sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f	signature:(sds s, char const *fmt, ...)
sdscatfmt	sds.h	/^sds sdscatfmt(sds s, char const *fmt, ...);$/;"	p	signature:(sds s, char const *fmt, ...)
sdscatlen	sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f	signature:(sds s, const void *t, size_t len)
sdscatlen	sds.h	/^sds sdscatlen(sds s, const void *t, size_t len);$/;"	p	signature:(sds s, const void *t, size_t len)
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f	signature:(sds s, const char *fmt, ...)
sdscatprintf	sds.h	/^sds sdscatprintf(sds s, const char *fmt, ...)$/;"	p	signature:(sds s, const char *fmt, ...)
sdscatprintf	sds.h	/^sds sdscatprintf(sds s, const char *fmt, ...);$/;"	p	signature:(sds s, const char *fmt, ...)
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f	signature:(sds s, const char *p, size_t len)
sdscatrepr	sds.h	/^sds sdscatrepr(sds s, const char *p, size_t len);$/;"	p	signature:(sds s, const char *p, size_t len)
sdscatsds	sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f	signature:(sds s, const sds t)
sdscatsds	sds.h	/^sds sdscatsds(sds s, const sds t);$/;"	p	signature:(sds s, const sds t)
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f	signature:(sds s, const char *fmt, va_list ap)
sdscatvprintf	sds.h	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap);$/;"	p	signature:(sds s, const char *fmt, va_list ap)
sdsclear	sds.c	/^void sdsclear(sds s) {$/;"	f	signature:(sds s)
sdsclear	sds.h	/^void sdsclear(sds s);$/;"	p	signature:(sds s)
sdscmp	sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f	signature:(const sds s1, const sds s2)
sdscmp	sds.h	/^int sdscmp(const sds s1, const sds s2);$/;"	p	signature:(const sds s1, const sds s2)
sdscpy	sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f	signature:(sds s, const char *t)
sdscpy	sds.h	/^sds sdscpy(sds s, const char *t);$/;"	p	signature:(sds s, const char *t)
sdscpylen	sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f	signature:(sds s, const char *t, size_t len)
sdscpylen	sds.h	/^sds sdscpylen(sds s, const char *t, size_t len);$/;"	p	signature:(sds s, const char *t, size_t len)
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f	signature:(const sds s)
sdsdup	sds.h	/^sds sdsdup(const sds s);$/;"	p	signature:(const sds s)
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f	signature:(void)
sdsempty	sds.h	/^sds sdsempty(void);$/;"	p	signature:(void)
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f	signature:(sds s)
sdsfree	sds.h	/^void sdsfree(sds s);$/;"	p	signature:(sds s)
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f	signature:(sds *tokens, int count)
sdsfreesplitres	sds.h	/^void sdsfreesplitres(sds *tokens, int count);$/;"	p	signature:(sds *tokens, int count)
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f	signature:(long long value)
sdsfromlonglong	sds.h	/^sds sdsfromlonglong(long long value);$/;"	p	signature:(long long value)
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f	signature:(sds s, size_t len)
sdsgrowzero	sds.h	/^sds sdsgrowzero(sds s, size_t len);$/;"	p	signature:(sds s, size_t len)
sdshdr16	sds.h	/^struct __attribute__ ((__packed__)) sdshdr16 {$/;"	s
sdshdr16::alloc	sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16	access:public
sdshdr16::buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr16	access:public
sdshdr16::flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16	access:public
sdshdr16::len	sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:sdshdr16	access:public
sdshdr32	sds.h	/^struct __attribute__ ((__packed__)) sdshdr32 {$/;"	s
sdshdr32::alloc	sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32	access:public
sdshdr32::buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr32	access:public
sdshdr32::flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32	access:public
sdshdr32::len	sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:sdshdr32	access:public
sdshdr5	sds.h	/^struct __attribute__ ((__packed__)) sdshdr5 {$/;"	s
sdshdr5::buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr5	access:public
sdshdr5::flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5	access:public
sdshdr64	sds.h	/^struct __attribute__ ((__packed__)) sdshdr64 {$/;"	s
sdshdr64::alloc	sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64	access:public
sdshdr64::buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr64	access:public
sdshdr64::flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64	access:public
sdshdr64::len	sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:sdshdr64	access:public
sdshdr8	sds.h	/^struct __attribute__ ((__packed__)) sdshdr8 {$/;"	s
sdshdr8::alloc	sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8	access:public
sdshdr8::buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr8	access:public
sdshdr8::flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8	access:public
sdshdr8::len	sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:sdshdr8	access:public
sdsinclen	sds.h	/^static inline void sdsinclen(sds s, size_t inc) {$/;"	f	signature:(sds s, size_t inc)
sdsjoin	sds.c	/^sds sdsjoin(char **argv, int argc, char *sep) {$/;"	f	signature:(char **argv, int argc, char *sep)
sdsjoin	sds.h	/^sds sdsjoin(char **argv, int argc, char *sep);$/;"	p	signature:(char **argv, int argc, char *sep)
sdsjoinsds	sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f	signature:(sds *argv, int argc, const char *sep, size_t seplen)
sdsjoinsds	sds.h	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen);$/;"	p	signature:(sds *argv, int argc, const char *sep, size_t seplen)
sdslen	sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f	signature:(const sds s)
sdslenOrElse	slots_async.c	/^sdslenOrElse(robj *o, size_t len) {$/;"	f	file:	signature:(robj *o, size_t len)
sdsll2str	sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f	signature:(char *s, long long value)
sdsmapchars	sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f	signature:(sds s, const char *from, const char *to, size_t setlen)
sdsmapchars	sds.h	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen);$/;"	p	signature:(sds s, const char *from, const char *to, size_t setlen)
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f	signature:(const char *init)
sdsnew	sds.h	/^sds sdsnew(const char *init);$/;"	p	signature:(const char *init)
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f	signature:(const void *init, size_t initlen)
sdsnewlen	sds.h	/^sds sdsnewlen(const void *init, size_t initlen);$/;"	p	signature:(const void *init, size_t initlen)
sdsrange	sds.c	/^void sdsrange(sds s, int start, int end) {$/;"	f	signature:(sds s, int start, int end)
sdsrange	sds.h	/^void sdsrange(sds s, int start, int end);$/;"	p	signature:(sds s, int start, int end)
sdssetalloc	sds.h	/^static inline void sdssetalloc(sds s, size_t newlen) {$/;"	f	signature:(sds s, size_t newlen)
sdssetlen	sds.h	/^static inline void sdssetlen(sds s, size_t newlen) {$/;"	f	signature:(sds s, size_t newlen)
sdssplitargs	sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f	signature:(const char *line, int *argc)
sdssplitargs	sds.h	/^sds *sdssplitargs(const char *line, int *argc);$/;"	p	signature:(const char *line, int *argc)
sdssplitlen	sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f	signature:(const char *s, int len, const char *sep, int seplen, int *count)
sdssplitlen	sds.h	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count);$/;"	p	signature:(const char *s, int len, const char *sep, int seplen, int *count)
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f	signature:(sds s)
sdstolower	sds.h	/^void sdstolower(sds s);$/;"	p	signature:(sds s)
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f	signature:(sds s)
sdstoupper	sds.h	/^void sdstoupper(sds s);$/;"	p	signature:(sds s)
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f	signature:(sds s, const char *cset)
sdstrim	sds.h	/^sds sdstrim(sds s, const char *cset);$/;"	p	signature:(sds s, const char *cset)
sdsull2str	sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f	signature:(char *s, unsigned long long v)
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f	signature:(sds s)
sdsupdatelen	sds.h	/^void sdsupdatelen(sds s);$/;"	p	signature:(sds s)
seconds	server.h	/^    time_t seconds;$/;"	m	struct:saveparam	access:public
securityWarningCommand	networking.c	/^void securityWarningCommand(client *c) {$/;"	f	signature:(client *c)
securityWarningCommand	server.h	/^void securityWarningCommand(client *c);$/;"	p	signature:(client *c)
select	server.h	/^    *select[PROTO_SHARED_SELECT_CMDS],$/;"	m	struct:sharedObjectsStruct	access:public
selectCommand	db.c	/^void selectCommand(client *c) {$/;"	f	signature:(client *c)
selectCommand	server.h	/^void selectCommand(client *c);$/;"	p	signature:(client *c)
selectDb	db.c	/^int selectDb(client *c, int id) {$/;"	f	signature:(client *c, int id)
selectDb	server.h	/^int selectDb(client *c, int id);$/;"	p	signature:(client *c, int id)
sendBulkToSlave	replication.c	/^void sendBulkToSlave(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
sendReplyToClient	networking.c	/^void sendReplyToClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
sendReplyToClient	server.h	/^void sendReplyToClient(aeEventLoop *el, int fd, void *privdata, int mask);$/;"	p	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
sendScan	redis-cli.c	/^static redisReply *sendScan(unsigned long long *it) {$/;"	f	file:	signature:(unsigned long long *it)
sendSync	redis-cli.c	/^unsigned long long sendSync(int fd) {$/;"	f	signature:(int fd)
sendSynchronousCommand	replication.c	/^char *sendSynchronousCommand(int flags, int fd, ...) {$/;"	f	signature:(int flags, int fd, ...)
sender	cluster.h	/^    char sender[CLUSTER_NAMELEN]; \/* Name of the sender node *\/$/;"	m	struct:__anon9	access:public
sending_msgs	server.h	/^    long sending_msgs;$/;"	m	struct:__anon29	access:public
sentinel	sentinel.c	/^} sentinel;$/;"	v	typeref:struct:sentinelState
sentinelAbortFailover	sentinel.c	/^void sentinelAbortFailover(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelAbortFailover	sentinel.c	/^void sentinelAbortFailover(sentinelRedisInstance *ri);$/;"	p	file:	signature:(sentinelRedisInstance *ri)
sentinelAddFlagsToDictOfRedisInstances	sentinel.c	/^void sentinelAddFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f	signature:(dict *instances, int flags)
sentinelAddr	sentinel.c	/^typedef struct sentinelAddr {$/;"	s	file:
sentinelAddr	sentinel.c	/^} sentinelAddr;$/;"	t	typeref:struct:sentinelAddr	file:
sentinelAddr::ip	sentinel.c	/^    char *ip;$/;"	m	struct:sentinelAddr	file:	access:public
sentinelAddr::port	sentinel.c	/^    int port;$/;"	m	struct:sentinelAddr	file:	access:public
sentinelAddrIsEqual	sentinel.c	/^int sentinelAddrIsEqual(sentinelAddr *a, sentinelAddr *b) {$/;"	f	signature:(sentinelAddr *a, sentinelAddr *b)
sentinelAskMasterStateToOtherSentinels	sentinel.c	/^void sentinelAskMasterStateToOtherSentinels(sentinelRedisInstance *master, int flags) {$/;"	f	signature:(sentinelRedisInstance *master, int flags)
sentinelCallClientReconfScript	sentinel.c	/^void sentinelCallClientReconfScript(sentinelRedisInstance *master, int role, char *state, sentinelAddr *from, sentinelAddr *to) {$/;"	f	signature:(sentinelRedisInstance *master, int role, char *state, sentinelAddr *from, sentinelAddr *to)
sentinelCheckObjectivelyDown	sentinel.c	/^void sentinelCheckObjectivelyDown(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelCheckSubjectivelyDown	sentinel.c	/^void sentinelCheckSubjectivelyDown(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelCheckTiltCondition	sentinel.c	/^void sentinelCheckTiltCondition(void) {$/;"	f	signature:(void)
sentinelCollectTerminatedScripts	sentinel.c	/^void sentinelCollectTerminatedScripts(void) {$/;"	f	signature:(void)
sentinelCommand	sentinel.c	/^void sentinelCommand(client *c) {$/;"	f	signature:(client *c)
sentinelCommand	sentinel.c	/^void sentinelCommand(client *c);$/;"	p	file:	signature:(client *c)
sentinelDelFlagsToDictOfRedisInstances	sentinel.c	/^void sentinelDelFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f	signature:(dict *instances, int flags)
sentinelDiscardReplyCallback	sentinel.c	/^void sentinelDiscardReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *reply, void *privdata)
sentinelDiscardReplyCallback	sentinel.c	/^void sentinelDiscardReplyCallback(redisAsyncContext *c, void *reply, void *privdata);$/;"	p	file:	signature:(redisAsyncContext *c, void *reply, void *privdata)
sentinelDisconnectCallback	sentinel.c	/^void sentinelDisconnectCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
sentinelDisconnectCallback	sentinel.c	/^void sentinelDisconnectCallback(const redisAsyncContext *c, int status);$/;"	p	file:	signature:(const redisAsyncContext *c, int status)
sentinelEvent	sentinel.c	/^void sentinelEvent(int level, char *type, sentinelRedisInstance *ri, const char *fmt, ...);$/;"	p	file:	signature:(int level, char *type, sentinelRedisInstance *ri, const char *fmt, ...)
sentinelEvent	sentinel.c	/^void sentinelEvent(int level, char *type, sentinelRedisInstance *ri,$/;"	f	signature:(int level, char *type, sentinelRedisInstance *ri, const char *fmt, ...)
sentinelFailoverDetectEnd	sentinel.c	/^void sentinelFailoverDetectEnd(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelFailoverReconfNextSlave	sentinel.c	/^void sentinelFailoverReconfNextSlave(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelFailoverSelectSlave	sentinel.c	/^void sentinelFailoverSelectSlave(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelFailoverSendSlaveOfNoOne	sentinel.c	/^void sentinelFailoverSendSlaveOfNoOne(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelFailoverStateMachine	sentinel.c	/^void sentinelFailoverStateMachine(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelFailoverStateStr	sentinel.c	/^const char *sentinelFailoverStateStr(int state) {$/;"	f	signature:(int state)
sentinelFailoverSwitchToPromotedSlave	sentinel.c	/^void sentinelFailoverSwitchToPromotedSlave(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelFailoverWaitPromotion	sentinel.c	/^void sentinelFailoverWaitPromotion(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelFailoverWaitStart	sentinel.c	/^void sentinelFailoverWaitStart(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelFlushConfig	sentinel.c	/^void sentinelFlushConfig(void) {$/;"	f	signature:(void)
sentinelFlushConfig	sentinel.c	/^void sentinelFlushConfig(void);$/;"	p	file:	signature:(void)
sentinelForceHelloUpdateDictOfRedisInstances	sentinel.c	/^void sentinelForceHelloUpdateDictOfRedisInstances(dict *instances) {$/;"	f	signature:(dict *instances)
sentinelForceHelloUpdateForMaster	sentinel.c	/^int sentinelForceHelloUpdateForMaster(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelForceHelloUpdateForMaster	sentinel.c	/^int sentinelForceHelloUpdateForMaster(sentinelRedisInstance *master);$/;"	p	file:	signature:(sentinelRedisInstance *master)
sentinelGenerateInitialMonitorEvents	sentinel.c	/^void sentinelGenerateInitialMonitorEvents(void) {$/;"	f	signature:(void)
sentinelGenerateInitialMonitorEvents	sentinel.c	/^void sentinelGenerateInitialMonitorEvents(void);$/;"	p	file:	signature:(void)
sentinelGetCurrentMasterAddress	sentinel.c	/^sentinelAddr *sentinelGetCurrentMasterAddress(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelGetInstanceTypeString	sentinel.c	/^char *sentinelGetInstanceTypeString(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelGetLeader	sentinel.c	/^char *sentinelGetLeader(sentinelRedisInstance *master, uint64_t epoch) {$/;"	f	signature:(sentinelRedisInstance *master, uint64_t epoch)
sentinelGetMasterByName	sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByName(char *name) {$/;"	f	signature:(char *name)
sentinelGetMasterByName	sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByName(char *name);$/;"	p	file:	signature:(char *name)
sentinelGetMasterByNameOrReplyError	sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByNameOrReplyError(client *c,$/;"	f	signature:(client *c, robj *name)
sentinelGetObjectiveLeader	sentinel.c	/^char *sentinelGetObjectiveLeader(sentinelRedisInstance *master);$/;"	p	file:	signature:(sentinelRedisInstance *master)
sentinelGetScriptListNodeByPid	sentinel.c	/^listNode *sentinelGetScriptListNodeByPid(pid_t pid) {$/;"	f	signature:(pid_t pid)
sentinelGetSubjectiveLeader	sentinel.c	/^char *sentinelGetSubjectiveLeader(sentinelRedisInstance *master);$/;"	p	file:	signature:(sentinelRedisInstance *master)
sentinelHandleConfiguration	sentinel.c	/^char *sentinelHandleConfiguration(char **argv, int argc) {$/;"	f	signature:(char **argv, int argc)
sentinelHandleConfiguration	server.h	/^char *sentinelHandleConfiguration(char **argv, int argc);$/;"	p	signature:(char **argv, int argc)
sentinelHandleDictOfRedisInstances	sentinel.c	/^void sentinelHandleDictOfRedisInstances(dict *instances) {$/;"	f	signature:(dict *instances)
sentinelHandleRedisInstance	sentinel.c	/^void sentinelHandleRedisInstance(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelInfoCommand	sentinel.c	/^void sentinelInfoCommand(client *c) {$/;"	f	signature:(client *c)
sentinelInfoCommand	sentinel.c	/^void sentinelInfoCommand(client *c);$/;"	p	file:	signature:(client *c)
sentinelInfoReplyCallback	sentinel.c	/^void sentinelInfoReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *reply, void *privdata)
sentinelIsQuorumReachable	sentinel.c	/^int sentinelIsQuorumReachable(sentinelRedisInstance *master, int *usableptr) {$/;"	f	signature:(sentinelRedisInstance *master, int *usableptr)
sentinelIsRunning	sentinel.c	/^void sentinelIsRunning(void) {$/;"	f	signature:(void)
sentinelIsRunning	server.h	/^void sentinelIsRunning(void);$/;"	p	signature:(void)
sentinelKillTimedoutScripts	sentinel.c	/^void sentinelKillTimedoutScripts(void) {$/;"	f	signature:(void)
sentinelLeader	sentinel.c	/^struct sentinelLeader {$/;"	s	file:
sentinelLeader::runid	sentinel.c	/^    char *runid;$/;"	m	struct:sentinelLeader	file:	access:public
sentinelLeader::votes	sentinel.c	/^    unsigned long votes;$/;"	m	struct:sentinelLeader	file:	access:public
sentinelLeaderIncr	sentinel.c	/^int sentinelLeaderIncr(dict *counters, char *runid) {$/;"	f	signature:(dict *counters, char *runid)
sentinelLinkEstablishedCallback	sentinel.c	/^void sentinelLinkEstablishedCallback(const redisAsyncContext *c, int status) {$/;"	f	signature:(const redisAsyncContext *c, int status)
sentinelLinkEstablishedCallback	sentinel.c	/^void sentinelLinkEstablishedCallback(const redisAsyncContext *c, int status);$/;"	p	file:	signature:(const redisAsyncContext *c, int status)
sentinelMasterLooksSane	sentinel.c	/^int sentinelMasterLooksSane(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelPendingScriptsCommand	sentinel.c	/^void sentinelPendingScriptsCommand(client *c) {$/;"	f	signature:(client *c)
sentinelPingReplyCallback	sentinel.c	/^void sentinelPingReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *reply, void *privdata)
sentinelProcessHelloMessage	sentinel.c	/^void sentinelProcessHelloMessage(char *hello, int hello_len) {$/;"	f	signature:(char *hello, int hello_len)
sentinelPropagateDownAfterPeriod	sentinel.c	/^void sentinelPropagateDownAfterPeriod(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelPublishCommand	sentinel.c	/^void sentinelPublishCommand(client *c) {$/;"	f	signature:(client *c)
sentinelPublishCommand	sentinel.c	/^void sentinelPublishCommand(client *c);$/;"	p	file:	signature:(client *c)
sentinelPublishReplyCallback	sentinel.c	/^void sentinelPublishReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *reply, void *privdata)
sentinelReceiveHelloMessages	sentinel.c	/^void sentinelReceiveHelloMessages(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *reply, void *privdata)
sentinelReceiveHelloMessages	sentinel.c	/^void sentinelReceiveHelloMessages(redisAsyncContext *c, void *reply, void *privdata);$/;"	p	file:	signature:(redisAsyncContext *c, void *reply, void *privdata)
sentinelReceiveIsMasterDownReply	sentinel.c	/^void sentinelReceiveIsMasterDownReply(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f	signature:(redisAsyncContext *c, void *reply, void *privdata)
sentinelReconnectInstance	sentinel.c	/^void sentinelReconnectInstance(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelRedisInstance	sentinel.c	/^typedef struct sentinelRedisInstance {$/;"	s	file:
sentinelRedisInstance	sentinel.c	/^} sentinelRedisInstance;$/;"	t	typeref:struct:sentinelRedisInstance	file:
sentinelRedisInstance::addr	sentinel.c	/^    sentinelAddr *addr; \/* Master host. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::auth_pass	sentinel.c	/^    char *auth_pass;    \/* Password to use for AUTH against master & slaves. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::client_reconfig_script	sentinel.c	/^    char *client_reconfig_script;$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::config_epoch	sentinel.c	/^    uint64_t config_epoch;  \/* Configuration epoch. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::down_after_period	sentinel.c	/^    mstime_t down_after_period; \/* Consider it down after that period. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::failover_delay_logged	sentinel.c	/^    mstime_t failover_delay_logged; \/* For what failover_start_time value we$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::failover_epoch	sentinel.c	/^    uint64_t failover_epoch; \/* Epoch of the currently started failover. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::failover_start_time	sentinel.c	/^    mstime_t failover_start_time;   \/* Last failover attempt start time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::failover_state	sentinel.c	/^    int failover_state; \/* See SENTINEL_FAILOVER_STATE_* defines. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::failover_state_change_time	sentinel.c	/^    mstime_t failover_state_change_time;$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::failover_timeout	sentinel.c	/^    mstime_t failover_timeout;      \/* Max time to refresh failover state. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::flags	sentinel.c	/^    int flags;      \/* See SRI_... defines *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::info	sentinel.c	/^    sds info; \/* cached INFO output *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::info_refresh	sentinel.c	/^    mstime_t info_refresh;  \/* Time at which we received INFO output from it. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::last_hello_time	sentinel.c	/^    mstime_t last_hello_time; \/* Only used if SRI_SENTINEL is set. Last time$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::last_master_down_reply_time	sentinel.c	/^    mstime_t last_master_down_reply_time; \/* Time of last reply to$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::last_pub_time	sentinel.c	/^    mstime_t last_pub_time;   \/* Last time we sent hello via Pub\/Sub. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::leader	sentinel.c	/^    char *leader;       \/* If this is a master instance, this is the runid of$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::leader_epoch	sentinel.c	/^    uint64_t leader_epoch; \/* Epoch of the 'leader' field. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::link	sentinel.c	/^    instanceLink *link; \/* Link to the instance, may be shared for Sentinels. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::master	sentinel.c	/^    struct sentinelRedisInstance *master; \/* Master instance if it's slave. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:	access:public
sentinelRedisInstance::master_link_down_time	sentinel.c	/^    mstime_t master_link_down_time; \/* Slave replication link down time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::name	sentinel.c	/^    char *name;     \/* Master name from the point of view of this sentinel. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::notification_script	sentinel.c	/^    char *notification_script;$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::o_down_since_time	sentinel.c	/^    mstime_t o_down_since_time; \/* Objectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::parallel_syncs	sentinel.c	/^    int parallel_syncs; \/* How many slaves to reconfigure at same time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::promoted_slave	sentinel.c	/^    struct sentinelRedisInstance *promoted_slave; \/* Promoted slave instance. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:	access:public
sentinelRedisInstance::quorum	sentinel.c	/^    unsigned int quorum;\/* Number of sentinels that need to agree on failure. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::role_reported	sentinel.c	/^    int role_reported;$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::role_reported_time	sentinel.c	/^    mstime_t role_reported_time;$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::runid	sentinel.c	/^    char *runid;    \/* Run ID of this instance, or unique ID if is a Sentinel.*\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::s_down_since_time	sentinel.c	/^    mstime_t s_down_since_time; \/* Subjectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::sentinels	sentinel.c	/^    dict *sentinels;    \/* Other sentinels monitoring the same master. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::slave_conf_change_time	sentinel.c	/^    mstime_t slave_conf_change_time; \/* Last time slave master addr changed. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::slave_master_host	sentinel.c	/^    char *slave_master_host;    \/* Master host as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::slave_master_link_status	sentinel.c	/^    int slave_master_link_status; \/* Master link status as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::slave_master_port	sentinel.c	/^    int slave_master_port;      \/* Master port as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::slave_priority	sentinel.c	/^    int slave_priority; \/* Slave priority according to its INFO output. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::slave_reconf_sent_time	sentinel.c	/^    mstime_t slave_reconf_sent_time; \/* Time at which we sent SLAVE OF <new> *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::slave_repl_offset	sentinel.c	/^    unsigned long long slave_repl_offset; \/* Slave replication offset. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstance::slaves	sentinel.c	/^    dict *slaves;       \/* Slaves for this master instance. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentinelRedisInstanceLookupSlave	sentinel.c	/^sentinelRedisInstance *sentinelRedisInstanceLookupSlave($/;"	f	signature:( sentinelRedisInstance *ri, char *ip, int port)
sentinelRedisInstanceNoDownFor	sentinel.c	/^int sentinelRedisInstanceNoDownFor(sentinelRedisInstance *ri, mstime_t ms) {$/;"	f	signature:(sentinelRedisInstance *ri, mstime_t ms)
sentinelRedisInstanceTypeStr	sentinel.c	/^const char *sentinelRedisInstanceTypeStr(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelRedisInstanceTypeStr	sentinel.c	/^const char *sentinelRedisInstanceTypeStr(sentinelRedisInstance *ri);$/;"	p	file:	signature:(sentinelRedisInstance *ri)
sentinelRefreshInstanceInfo	sentinel.c	/^void sentinelRefreshInstanceInfo(sentinelRedisInstance *ri, const char *info) {$/;"	f	signature:(sentinelRedisInstance *ri, const char *info)
sentinelReleaseScriptJob	sentinel.c	/^void sentinelReleaseScriptJob(sentinelScriptJob *sj) {$/;"	f	signature:(sentinelScriptJob *sj)
sentinelResetMaster	sentinel.c	/^void sentinelResetMaster(sentinelRedisInstance *ri, int flags) {$/;"	f	signature:(sentinelRedisInstance *ri, int flags)
sentinelResetMasterAndChangeAddress	sentinel.c	/^int sentinelResetMasterAndChangeAddress(sentinelRedisInstance *master, char *ip, int port) {$/;"	f	signature:(sentinelRedisInstance *master, char *ip, int port)
sentinelResetMastersByPattern	sentinel.c	/^int sentinelResetMastersByPattern(char *pattern, int flags) {$/;"	f	signature:(char *pattern, int flags)
sentinelRoleCommand	sentinel.c	/^void sentinelRoleCommand(client *c) {$/;"	f	signature:(client *c)
sentinelRoleCommand	sentinel.c	/^void sentinelRoleCommand(client *c);$/;"	p	file:	signature:(client *c)
sentinelRunPendingScripts	sentinel.c	/^void sentinelRunPendingScripts(void) {$/;"	f	signature:(void)
sentinelScheduleScriptExecution	sentinel.c	/^void sentinelScheduleScriptExecution(char *path, ...) {$/;"	f	signature:(char *path, ...)
sentinelScheduleScriptExecution	sentinel.c	/^void sentinelScheduleScriptExecution(char *path, ...);$/;"	p	file:	signature:(char *path, ...)
sentinelScriptJob	sentinel.c	/^typedef struct sentinelScriptJob {$/;"	s	file:
sentinelScriptJob	sentinel.c	/^} sentinelScriptJob;$/;"	t	typeref:struct:sentinelScriptJob	file:
sentinelScriptJob::argv	sentinel.c	/^    char **argv;            \/* Arguments to call the script. *\/$/;"	m	struct:sentinelScriptJob	file:	access:public
sentinelScriptJob::flags	sentinel.c	/^    int flags;              \/* Script job flags: SENTINEL_SCRIPT_* *\/$/;"	m	struct:sentinelScriptJob	file:	access:public
sentinelScriptJob::pid	sentinel.c	/^    pid_t pid;              \/* Script execution pid. *\/$/;"	m	struct:sentinelScriptJob	file:	access:public
sentinelScriptJob::retry_num	sentinel.c	/^    int retry_num;          \/* Number of times we tried to execute it. *\/$/;"	m	struct:sentinelScriptJob	file:	access:public
sentinelScriptJob::start_time	sentinel.c	/^    mstime_t start_time;    \/* Script execution time if the script is running,$/;"	m	struct:sentinelScriptJob	file:	access:public
sentinelScriptRetryDelay	sentinel.c	/^mstime_t sentinelScriptRetryDelay(int retry_num) {$/;"	f	signature:(int retry_num)
sentinelSelectSlave	sentinel.c	/^sentinelRedisInstance *sentinelSelectSlave(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelSelectSlave	sentinel.c	/^sentinelRedisInstance *sentinelSelectSlave(sentinelRedisInstance *master);$/;"	p	file:	signature:(sentinelRedisInstance *master)
sentinelSendAuthIfNeeded	sentinel.c	/^void sentinelSendAuthIfNeeded(sentinelRedisInstance *ri, redisAsyncContext *c) {$/;"	f	signature:(sentinelRedisInstance *ri, redisAsyncContext *c)
sentinelSendHello	sentinel.c	/^int sentinelSendHello(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelSendPeriodicCommands	sentinel.c	/^void sentinelSendPeriodicCommands(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelSendPing	sentinel.c	/^int sentinelSendPing(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelSendPing	sentinel.c	/^int sentinelSendPing(sentinelRedisInstance *ri);$/;"	p	file:	signature:(sentinelRedisInstance *ri)
sentinelSendSlaveOf	sentinel.c	/^int sentinelSendSlaveOf(sentinelRedisInstance *ri, char *host, int port) {$/;"	f	signature:(sentinelRedisInstance *ri, char *host, int port)
sentinelSendSlaveOf	sentinel.c	/^int sentinelSendSlaveOf(sentinelRedisInstance *ri, char *host, int port);$/;"	p	file:	signature:(sentinelRedisInstance *ri, char *host, int port)
sentinelSetClientName	sentinel.c	/^void sentinelSetClientName(sentinelRedisInstance *ri, redisAsyncContext *c, char *type) {$/;"	f	signature:(sentinelRedisInstance *ri, redisAsyncContext *c, char *type)
sentinelSetCommand	sentinel.c	/^void sentinelSetCommand(client *c) {$/;"	f	signature:(client *c)
sentinelSetCommand	sentinel.c	/^void sentinelSetCommand(client *c);$/;"	p	file:	signature:(client *c)
sentinelSimFailureCrash	sentinel.c	/^void sentinelSimFailureCrash(void) {$/;"	f	signature:(void)
sentinelSimFailureCrash	sentinel.c	/^void sentinelSimFailureCrash(void);$/;"	p	file:	signature:(void)
sentinelStartFailover	sentinel.c	/^void sentinelStartFailover(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelStartFailover	sentinel.c	/^void sentinelStartFailover(sentinelRedisInstance *master);$/;"	p	file:	signature:(sentinelRedisInstance *master)
sentinelStartFailoverIfNeeded	sentinel.c	/^int sentinelStartFailoverIfNeeded(sentinelRedisInstance *master) {$/;"	f	signature:(sentinelRedisInstance *master)
sentinelState	sentinel.c	/^struct sentinelState {$/;"	s	file:
sentinelState::announce_ip	sentinel.c	/^    char *announce_ip;  \/* IP addr that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:	access:public
sentinelState::announce_port	sentinel.c	/^    int announce_port;  \/* Port that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:	access:public
sentinelState::current_epoch	sentinel.c	/^    uint64_t current_epoch;         \/* Current epoch. *\/$/;"	m	struct:sentinelState	file:	access:public
sentinelState::masters	sentinel.c	/^    dict *masters;      \/* Dictionary of master sentinelRedisInstances.$/;"	m	struct:sentinelState	file:	access:public
sentinelState::myid	sentinel.c	/^    char myid[CONFIG_RUN_ID_SIZE+1]; \/* This sentinel ID. *\/$/;"	m	struct:sentinelState	file:	access:public
sentinelState::previous_time	sentinel.c	/^    mstime_t previous_time;         \/* Last time we ran the time handler. *\/$/;"	m	struct:sentinelState	file:	access:public
sentinelState::running_scripts	sentinel.c	/^    int running_scripts;    \/* Number of scripts in execution right now. *\/$/;"	m	struct:sentinelState	file:	access:public
sentinelState::scripts_queue	sentinel.c	/^    list *scripts_queue;            \/* Queue of user scripts to execute. *\/$/;"	m	struct:sentinelState	file:	access:public
sentinelState::simfailure_flags	sentinel.c	/^    unsigned long simfailure_flags; \/* Failures simulation. *\/$/;"	m	struct:sentinelState	file:	access:public
sentinelState::tilt	sentinel.c	/^    int tilt;           \/* Are we in TILT mode? *\/$/;"	m	struct:sentinelState	file:	access:public
sentinelState::tilt_start_time	sentinel.c	/^    mstime_t tilt_start_time;       \/* When TITL started. *\/$/;"	m	struct:sentinelState	file:	access:public
sentinelTimer	sentinel.c	/^void sentinelTimer(void) {$/;"	f	signature:(void)
sentinelTimer	server.h	/^void sentinelTimer(void);$/;"	p	signature:(void)
sentinelTryConnectionSharing	sentinel.c	/^int sentinelTryConnectionSharing(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelUpdateSentinelAddressInAllMasters	sentinel.c	/^int sentinelUpdateSentinelAddressInAllMasters(sentinelRedisInstance *ri) {$/;"	f	signature:(sentinelRedisInstance *ri)
sentinelVoteLeader	sentinel.c	/^char *sentinelVoteLeader(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uint64_t *leader_epoch) {$/;"	f	signature:(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uint64_t *leader_epoch)
sentinelVoteLeader	sentinel.c	/^char *sentinelVoteLeader(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uint64_t *leader_epoch);$/;"	p	file:	signature:(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uint64_t *leader_epoch)
sentinel_mode	server.h	/^    int sentinel_mode;          \/* True if this instance is a Sentinel. *\/$/;"	m	struct:redisServer	access:public
sentinelcmds	sentinel.c	/^struct redisCommand sentinelcmds[] = {$/;"	v	typeref:struct:redisCommand
sentinels	sentinel.c	/^    dict *sentinels;    \/* Other sentinels monitoring the same master. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
sentlen	server.h	/^    size_t sentlen;         \/* Amount of bytes already sent in the current$/;"	m	struct:client	access:public
sequence	sparkline.h	/^struct sequence {$/;"	s
sequence::labels	sparkline.h	/^    int labels;$/;"	m	struct:sequence	access:public
sequence::length	sparkline.h	/^    int length;$/;"	m	struct:sequence	access:public
sequence::max	sparkline.h	/^    double min, max;$/;"	m	struct:sequence	access:public
sequence::min	sparkline.h	/^    double min, max;$/;"	m	struct:sequence	access:public
sequence::samples	sparkline.h	/^    struct sample *samples;$/;"	m	struct:sequence	typeref:struct:sequence::sample	access:public
serveClientBlockedOnList	t_list.c	/^int serveClientBlockedOnList(client *receiver, robj *key, robj *dstkey, redisDb *db, robj *value, int where)$/;"	f	signature:(client *receiver, robj *key, robj *dstkey, redisDb *db, robj *value, int where)
server	server.c	/^struct redisServer server; \/* server global state *\/$/;"	v	typeref:struct:redisServer
serverAssert	server.h	453;"	d
serverAssertWithInfo	server.h	452;"	d
serverCron	server.c	/^int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f	signature:(struct aeEventLoop *eventLoop, long long id, void *clientData)
serverLog	server.c	/^void serverLog(int level, const char *fmt, ...) {$/;"	f	signature:(int level, const char *fmt, ...)
serverLog	server.h	/^void serverLog(int level, const char *fmt, ...)$/;"	p	signature:(int level, const char *fmt, ...)
serverLog	server.h	/^void serverLog(int level, const char *fmt, ...);$/;"	p	signature:(int level, const char *fmt, ...)
serverLogFromHandler	server.c	/^void serverLogFromHandler(int level, const char *msg) {$/;"	f	signature:(int level, const char *msg)
serverLogFromHandler	server.h	/^void serverLogFromHandler(int level, const char *msg);$/;"	p	signature:(int level, const char *msg)
serverLogHexDump	debug.c	/^void serverLogHexDump(int level, char *descr, void *value, size_t len) {$/;"	f	signature:(int level, char *descr, void *value, size_t len)
serverLogHexDump	server.h	/^void serverLogHexDump(int level, char *descr, void *value, size_t len);$/;"	p	signature:(int level, char *descr, void *value, size_t len)
serverLogObjectDebugInfo	debug.c	/^void serverLogObjectDebugInfo(robj *o) {$/;"	f	signature:(robj *o)
serverLogObjectDebugInfo	server.h	/^void serverLogObjectDebugInfo(robj *o);$/;"	p	signature:(robj *o)
serverLogRaw	server.c	/^void serverLogRaw(int level, const char *msg) {$/;"	f	signature:(int level, const char *msg)
serverLogRaw	server.h	/^void serverLogRaw(int level, const char *msg);$/;"	p	signature:(int level, const char *msg)
serverPanic	server.h	454;"	d
set	t_zset.c	/^        } set;$/;"	m	union:__anon16::__anon17	typeref:union:__anon16::__anon17::_iterset	file:	access:public
setCommand	server.h	/^void setCommand(client *c);$/;"	p	signature:(client *c)
setCommand	t_string.c	/^void setCommand(client *c) {$/;"	f	signature:(client *c)
setDeferredMultiBulkLength	networking.c	/^void setDeferredMultiBulkLength(client *c, void *node, long length) {$/;"	f	signature:(client *c, void *node, long length)
setDeferredMultiBulkLength	server.h	/^void setDeferredMultiBulkLength(client *c, void *node, long length);$/;"	p	signature:(client *c, void *node, long length)
setDictType	server.c	/^dictType setDictType = {$/;"	v
setExpire	db.c	/^void setExpire(redisDb *db, robj *key, long long when) {$/;"	f	signature:(redisDb *db, robj *key, long long when)
setExpire	server.h	/^void setExpire(redisDb *db, robj *key, long long when);$/;"	p	signature:(redisDb *db, robj *key, long long when)
setGenericCommand	t_string.c	/^void setGenericCommand(client *c, int flags, robj *key, robj *val, robj *expire, int unit, robj *ok_reply, robj *abort_reply) {$/;"	f	signature:(client *c, int flags, robj *key, robj *val, robj *expire, int unit, robj *ok_reply, robj *abort_reply)
setKey	db.c	/^void setKey(redisDb *db, robj *key, robj *val) {$/;"	f	signature:(redisDb *db, robj *key, robj *val)
setKey	server.h	/^void setKey(redisDb *db, robj *key, robj *val);$/;"	p	signature:(redisDb *db, robj *key, robj *val)
setProtocolError	networking.c	/^static void setProtocolError(client *c, int pos) {$/;"	f	file:	signature:(client *c, int pos)
setProtocolError	networking.c	/^static void setProtocolError(client *c, int pos);$/;"	p	file:	signature:(client *c, int pos)
setSignedBitfield	bitops.c	/^void setSignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits, int64_t value) {$/;"	f	signature:(unsigned char *p, uint64_t offset, uint64_t bits, int64_t value)
setTypeAdd	server.h	/^int setTypeAdd(robj *subject, robj *value);$/;"	p	signature:(robj *subject, robj *value)
setTypeAdd	t_set.c	/^int setTypeAdd(robj *subject, robj *value) {$/;"	f	signature:(robj *subject, robj *value)
setTypeConvert	server.h	/^void setTypeConvert(robj *subject, int enc);$/;"	p	signature:(robj *subject, int enc)
setTypeConvert	t_set.c	/^void setTypeConvert(robj *setobj, int enc) {$/;"	f	signature:(robj *setobj, int enc)
setTypeCreate	server.h	/^robj *setTypeCreate(robj *value);$/;"	p	signature:(robj *value)
setTypeCreate	t_set.c	/^robj *setTypeCreate(robj *value) {$/;"	f	signature:(robj *value)
setTypeInitIterator	server.h	/^setTypeIterator *setTypeInitIterator(robj *subject);$/;"	p	signature:(robj *subject)
setTypeInitIterator	t_set.c	/^setTypeIterator *setTypeInitIterator(robj *subject) {$/;"	f	signature:(robj *subject)
setTypeIsMember	server.h	/^int setTypeIsMember(robj *subject, robj *value);$/;"	p	signature:(robj *subject, robj *value)
setTypeIsMember	t_set.c	/^int setTypeIsMember(robj *subject, robj *value) {$/;"	f	signature:(robj *subject, robj *value)
setTypeIterator	server.h	/^} setTypeIterator;$/;"	t	typeref:struct:__anon34
setTypeNext	server.h	/^int setTypeNext(setTypeIterator *si, robj **objele, int64_t *llele);$/;"	p	signature:(setTypeIterator *si, robj **objele, int64_t *llele)
setTypeNext	t_set.c	/^int setTypeNext(setTypeIterator *si, robj **objele, int64_t *llele) {$/;"	f	signature:(setTypeIterator *si, robj **objele, int64_t *llele)
setTypeNextObject	server.h	/^robj *setTypeNextObject(setTypeIterator *si);$/;"	p	signature:(setTypeIterator *si)
setTypeNextObject	t_set.c	/^robj *setTypeNextObject(setTypeIterator *si) {$/;"	f	signature:(setTypeIterator *si)
setTypeRandomElement	server.h	/^int setTypeRandomElement(robj *setobj, robj **objele, int64_t *llele);$/;"	p	signature:(robj *setobj, robj **objele, int64_t *llele)
setTypeRandomElement	t_set.c	/^int setTypeRandomElement(robj *setobj, robj **objele, int64_t *llele) {$/;"	f	signature:(robj *setobj, robj **objele, int64_t *llele)
setTypeRandomElements	server.h	/^unsigned long setTypeRandomElements(robj *set, unsigned long count, robj *aux_set);$/;"	p	signature:(robj *set, unsigned long count, robj *aux_set)
setTypeReleaseIterator	server.h	/^void setTypeReleaseIterator(setTypeIterator *si);$/;"	p	signature:(setTypeIterator *si)
setTypeReleaseIterator	t_set.c	/^void setTypeReleaseIterator(setTypeIterator *si) {$/;"	f	signature:(setTypeIterator *si)
setTypeRemove	server.h	/^int setTypeRemove(robj *subject, robj *value);$/;"	p	signature:(robj *subject, robj *value)
setTypeRemove	t_set.c	/^int setTypeRemove(robj *setobj, robj *value) {$/;"	f	signature:(robj *setobj, robj *value)
setTypeSize	server.h	/^unsigned long setTypeSize(robj *subject);$/;"	p	signature:(robj *subject)
setTypeSize	t_set.c	/^unsigned long setTypeSize(robj *subject) {$/;"	f	signature:(robj *subject)
setUnsignedBitfield	bitops.c	/^void setUnsignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits, uint64_t value) {$/;"	f	signature:(unsigned char *p, uint64_t offset, uint64_t bits, uint64_t value)
set_as_replica	redis-trib.rb	/^    def set_as_replica(node_id)$/;"	f	class:ClusterNode
set_max_intset_entries	server.h	/^    size_t set_max_intset_entries;$/;"	m	struct:redisServer	access:public
set_timeout_cluster_cmd	redis-trib.rb	/^    def set_timeout_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
setbitCommand	bitops.c	/^void setbitCommand(client *c) {$/;"	f	signature:(client *c)
setbitCommand	server.h	/^void setbitCommand(client *c);$/;"	p	signature:(client *c)
setexCommand	server.h	/^void setexCommand(client *c);$/;"	p	signature:(client *c)
setexCommand	t_string.c	/^void setexCommand(client *c) {$/;"	f	signature:(client *c)
setnxCommand	server.h	/^void setnxCommand(client *c);$/;"	p	signature:(client *c)
setnxCommand	t_string.c	/^void setnxCommand(client *c) {$/;"	f	signature:(client *c)
setproctitle	config.h	/^void setproctitle(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
setproctitle	setproctitle.c	/^void setproctitle(const char *fmt, ...) {$/;"	f	signature:(const char *fmt, ...)
setrangeCommand	server.h	/^void setrangeCommand(client *c);$/;"	p	signature:(client *c)
setrangeCommand	t_string.c	/^void setrangeCommand(client *c) {$/;"	f	signature:(client *c)
setsize	ae.h	/^    int setsize; \/* max number of file descriptors tracked *\/$/;"	m	struct:aeEventLoop	access:public
setupSignalHandlers	server.c	/^void setupSignalHandlers(void) {$/;"	f	signature:(void)
setupSignalHandlers	server.h	/^void setupSignalHandlers(void);$/;"	p	signature:(void)
sflags	server.h	/^    char *sflags; \/* Flags as string representation, one char per flag. *\/$/;"	m	struct:redisCommand	access:public
sha1Test	sha1.c	/^int sha1Test(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
sha1Test	sha1.h	/^int sha1Test(int argc, char **argv);$/;"	p	signature:(int argc, char **argv)
sha1hex	scripting.c	/^void sha1hex(char *digest, char *script, size_t len) {$/;"	f	signature:(char *digest, char *script, size_t len)
shaScriptObjectDictType	server.c	/^dictType shaScriptObjectDictType = {$/;"	v
shared	server.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
sharedObjectsStruct	server.h	/^struct sharedObjectsStruct {$/;"	s
sharedObjectsStruct::bgsaveerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::bulkhdr	server.h	/^    *bulkhdr[OBJ_SHARED_BULKHDR_LEN];  \/* "$<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::busykeyerr	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::cnegone	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::colon	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::cone	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::crlf	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::czero	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::del	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::emptybulk	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::emptymultibulk	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::emptyscan	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::err	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::execaborterr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::integers	server.h	/^    *integers[OBJ_SHARED_INTEGERS],$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::loadingerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::lpop	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::lpush	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::masterdownerr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::maxstring	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::mbulkhdr	server.h	/^    *mbulkhdr[OBJ_SHARED_BULKHDR_LEN], \/* "*<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::messagebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::minstring	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::noautherr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::nokeyerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::noreplicaserr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::noscripterr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::nullbulk	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::nullmultibulk	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::ok	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::oomerr	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::outofrangeerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::plus	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::pmessagebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::pong	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::psubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::punsubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::queued	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::roslaveerr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::rpop	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::sameobjecterr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::select	server.h	/^    *select[PROTO_SHARED_SELECT_CMDS],$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::slowscripterr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::space	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::subscribebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::syntaxerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::unsubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
sharedObjectsStruct::wrongtypeerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
showLatencyDistLegend	redis-cli.c	/^void showLatencyDistLegend(void) {$/;"	f	signature:(void)
showLatencyDistSamples	redis-cli.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f	signature:(struct distsamples *samples, long long tot)
showLatencyReport	redis-benchmark.c	/^static void showLatencyReport(void) {$/;"	f	file:	signature:(void)
showThroughput	redis-benchmark.c	/^int showThroughput(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f	signature:(struct aeEventLoop *eventLoop, long long id, void *clientData)
show_cluster_info	redis-trib.rb	/^    def show_cluster_info$/;"	f	class:RedisTrib
show_help	redis-trib.rb	/^def show_help$/;"	f	class:RedisTrib
show_nodes	redis-trib.rb	/^    def show_nodes$/;"	f	class:RedisTrib.alloc_slots
show_reshard_table	redis-trib.rb	/^    def show_reshard_table(table)$/;"	f	class:RedisTrib.alloc_slots
showerrors	redis-benchmark.c	/^    int showerrors;$/;"	m	struct:config	file:	access:public
shutdown	redis-cli.c	/^    int shutdown;$/;"	m	struct:config	file:	access:public
shutdownCommand	db.c	/^void shutdownCommand(client *c) {$/;"	f	signature:(client *c)
shutdownCommand	server.h	/^void shutdownCommand(client *c);$/;"	p	signature:(client *c)
shutdown_asap	server.h	/^    int shutdown_asap;          \/* SHUTDOWN needed ASAP *\/$/;"	m	struct:redisServer	access:public
sig	cluster.h	/^    char sig[4];        \/* Siganture "RCmb" (Redis Cluster message bus). *\/$/;"	m	struct:__anon9	access:public
sigShutdownHandler	server.c	/^static void sigShutdownHandler(int sig) {$/;"	f	file:	signature:(int sig)
sign	bitops.c	/^    int sign;           \/* True if signed, otherwise unsigned op. *\/$/;"	m	struct:bitfieldOp	file:	access:public
signalFlushedDb	db.c	/^void signalFlushedDb(int dbid) {$/;"	f	signature:(int dbid)
signalFlushedDb	server.h	/^void signalFlushedDb(int dbid);$/;"	p	signature:(int dbid)
signalListAsReady	server.h	/^void signalListAsReady(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
signalListAsReady	t_list.c	/^void signalListAsReady(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
signalModifiedKey	db.c	/^void signalModifiedKey(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
signalModifiedKey	server.h	/^void signalModifiedKey(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
sigsegvHandler	debug.c	/^void sigsegvHandler(int sig, siginfo_t *info, void *secret) {$/;"	f	signature:(int sig, siginfo_t *info, void *secret)
sigsegvHandler	server.h	/^void sigsegvHandler(int sig, siginfo_t *info, void *secret);$/;"	p	signature:(int sig, siginfo_t *info, void *secret)
simfailure_flags	sentinel.c	/^    unsigned long simfailure_flags; \/* Failures simulation. *\/$/;"	m	struct:sentinelState	file:	access:public
since	help.h	/^  char *since;$/;"	m	struct:commandHelp	access:public
singleObjectIterator	slots_async.c	/^} singleObjectIterator;$/;"	t	typeref:struct:__anon12	file:
singleObjectIteratorHasNext	slots_async.c	/^singleObjectIteratorHasNext(singleObjectIterator *it) {$/;"	f	file:	signature:(singleObjectIterator *it)
singleObjectIteratorNext	slots_async.c	/^singleObjectIteratorNext(client *c, singleObjectIterator *it,$/;"	f	file:	signature:(client *c, singleObjectIterator *it, long long timeout, unsigned int maxbulks, unsigned int maxbytes)
singleObjectIteratorScanCallback	slots_async.c	/^singleObjectIteratorScanCallback(void *data, const dictEntry *de) {$/;"	f	file:	signature:(void *data, const dictEntry *de)
sinterCommand	server.h	/^void sinterCommand(client *c);$/;"	p	signature:(client *c)
sinterCommand	t_set.c	/^void sinterCommand(client *c) {$/;"	f	signature:(client *c)
sinterGenericCommand	t_set.c	/^void sinterGenericCommand(client *c, robj **setkeys,$/;"	f	signature:(client *c, robj **setkeys, unsigned long setnum, robj *dstkey)
sinterstoreCommand	server.h	/^void sinterstoreCommand(client *c);$/;"	p	signature:(client *c)
sinterstoreCommand	t_set.c	/^void sinterstoreCommand(client *c) {$/;"	f	signature:(client *c)
sismemberCommand	server.h	/^void sismemberCommand(client *c);$/;"	p	signature:(client *c)
sismemberCommand	t_set.c	/^void sismemberCommand(client *c) {$/;"	f	signature:(client *c)
size	cluster.h	/^    int size;             \/* Num of master nodes with at least one slot *\/$/;"	m	struct:clusterState	access:public
size	dict.h	/^    unsigned long size;$/;"	m	struct:dictht	access:public
sizeMeetsSafetyLimit	quicklist.c	418;"	d	file:
sizemask	dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht	access:public
sl	t_zset.c	/^            } sl;$/;"	m	union:__anon16::__anon17::_iterzset	typeref:struct:__anon16::__anon17::_iterzset::__anon21	file:	access:public
slaveIsInHandshakeState	replication.c	/^int slaveIsInHandshakeState(void) {$/;"	f	signature:(void)
slaveMode	redis-cli.c	/^static void slaveMode(void) {$/;"	f	file:	signature:(void)
slaveMode	redis-cli.c	/^static void slaveMode(void);$/;"	p	file:	signature:(void)
slaveTryPartialResynchronization	replication.c	/^int slaveTryPartialResynchronization(int fd, int read_reply) {$/;"	f	signature:(int fd, int read_reply)
slave_announce_ip	server.h	/^    char *slave_announce_ip;        \/* Give the master this ip address. *\/$/;"	m	struct:redisServer	access:public
slave_announce_port	server.h	/^    int slave_announce_port;        \/* Give the master this listening port. *\/$/;"	m	struct:redisServer	access:public
slave_capa	server.h	/^    int slave_capa;         \/* Slave capabilities: SLAVE_CAPA_* bitwise OR. *\/$/;"	m	struct:client	access:public
slave_conf_change_time	sentinel.c	/^    mstime_t slave_conf_change_time; \/* Last time slave master addr changed. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
slave_ip	server.h	/^    char slave_ip[NET_IP_STR_LEN]; \/* Optionally given by REPLCONF ip-address *\/$/;"	m	struct:client	access:public
slave_listening_port	server.h	/^    int slave_listening_port; \/* As configured with: REPLCONF listening-port *\/$/;"	m	struct:client	access:public
slave_master_host	sentinel.c	/^    char *slave_master_host;    \/* Master host as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
slave_master_link_status	sentinel.c	/^    int slave_master_link_status; \/* Master link status as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
slave_master_port	sentinel.c	/^    int slave_master_port;      \/* Master port as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
slave_mode	redis-cli.c	/^    int slave_mode;$/;"	m	struct:config	file:	access:public
slave_priority	sentinel.c	/^    int slave_priority; \/* Slave priority according to its INFO output. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
slave_priority	server.h	/^    int slave_priority;             \/* Reported in INFO and used by Sentinel. *\/$/;"	m	struct:redisServer	access:public
slave_reconf_sent_time	sentinel.c	/^    mstime_t slave_reconf_sent_time; \/* Time at which we sent SLAVE OF <new> *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
slave_repl_offset	sentinel.c	/^    unsigned long long slave_repl_offset; \/* Slave replication offset. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
slaveof	cluster.h	/^    char slaveof[CLUSTER_NAMELEN];$/;"	m	struct:__anon9	access:public
slaveof	cluster.h	/^    struct clusterNode *slaveof; \/* pointer to the master node. Note that it$/;"	m	struct:clusterNode	typeref:struct:clusterNode::clusterNode	access:public
slaveofCommand	replication.c	/^void slaveofCommand(client *c) {$/;"	f	signature:(client *c)
slaveofCommand	server.h	/^void slaveofCommand(client *c);$/;"	p	signature:(client *c)
slaves	cluster.h	/^    struct clusterNode **slaves; \/* pointers to slave nodes *\/$/;"	m	struct:clusterNode	typeref:struct:clusterNode::clusterNode	access:public
slaves	sentinel.c	/^    dict *slaves;       \/* Slaves for this master instance. *\/$/;"	m	struct:sentinelRedisInstance	file:	access:public
slaves	server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer	access:public
slaveseldb	server.h	/^    int slaveseldb;                 \/* Last SELECTed DB in replication output *\/$/;"	m	struct:redisServer	access:public
slotToKeyAdd	db.c	/^void slotToKeyAdd(robj *key) {$/;"	f	signature:(robj *key)
slotToKeyAdd	db.c	/^void slotToKeyAdd(robj *key);$/;"	p	file:	signature:(robj *key)
slotToKeyDel	db.c	/^void slotToKeyDel(robj *key) {$/;"	f	signature:(robj *key)
slotToKeyDel	db.c	/^void slotToKeyDel(robj *key);$/;"	p	file:	signature:(robj *key)
slotToKeyFlush	db.c	/^void slotToKeyFlush(void) {$/;"	f	signature:(void)
slotToKeyFlush	db.c	/^void slotToKeyFlush(void);$/;"	p	file:	signature:(void)
slots	cluster.h	/^    clusterNode *slots[CLUSTER_SLOTS];$/;"	m	struct:clusterState	access:public
slots	cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* Slots bitmap. *\/$/;"	m	struct:__anon4	access:public
slots	cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* slots handled by this node *\/$/;"	m	struct:clusterNode	access:public
slots	redis-trib.rb	/^    def slots$/;"	f	class:ClusterNode
slotsScanSdsKeyCallback	slots.c	/^slotsScanSdsKeyCallback(void *l, const dictEntry *de) {$/;"	f	file:	signature:(void *l, const dictEntry *de)
slots_num	server.h	/^int slots_num(const sds s, uint32_t *pcrc, int *phastag);$/;"	p	signature:(const sds s, uint32_t *pcrc, int *phastag)
slots_num	slots.c	/^slots_num(const sds s, uint32_t *pcrc, int *phastag) {$/;"	f	signature:(const sds s, uint32_t *pcrc, int *phastag)
slots_tag	slots.c	/^slots_tag(const sds s, int *plen) {$/;"	f	file:	signature:(const sds s, int *plen)
slots_to_keys	cluster.h	/^    zskiplist *slots_to_keys;$/;"	m	struct:clusterState	access:public
slotscheckCommand	server.h	/^void slotscheckCommand(client *c);$/;"	p	signature:(client *c)
slotscheckCommand	slots.c	/^slotscheckCommand(client *c) {$/;"	f	signature:(client *c)
slotsdelCommand	server.h	/^void slotsdelCommand(client *c);$/;"	p	signature:(client *c)
slotsdelCommand	slots.c	/^slotsdelCommand(client *c) {$/;"	f	signature:(client *c)
slotshashkeyCommand	server.h	/^void slotshashkeyCommand(client *c);$/;"	p	signature:(client *c)
slotshashkeyCommand	slots.c	/^slotshashkeyCommand(client *c) {$/;"	f	signature:(client *c)
slotsinfoCommand	server.h	/^void slotsinfoCommand(client *c);$/;"	p	signature:(client *c)
slotsinfoCommand	slots.c	/^slotsinfoCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrt	slots.c	/^slotsmgrt(client *c, sds host, sds port, slotsmgrt_sockfd *pfd, int db, int timeout, robj *keys[], robj *vals[], int n) {$/;"	f	file:	signature:(client *c, sds host, sds port, slotsmgrt_sockfd *pfd, int db, int timeout, robj *keys[], robj *vals[], int n)
slotsmgrtAsyncCancelCommand	server.h	/^void slotsmgrtAsyncCancelCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtAsyncCancelCommand	slots_async.c	/^slotsmgrtAsyncCancelCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtAsyncCleanup	server.h	/^void slotsmgrtAsyncCleanup();$/;"	p	signature:()
slotsmgrtAsyncCleanup	slots_async.c	/^slotsmgrtAsyncCleanup() {$/;"	f
slotsmgrtAsyncClient	server.h	/^} slotsmgrtAsyncClient;$/;"	t	typeref:struct:__anon29
slotsmgrtAsyncDumpGenericCommand	slots_async.c	/^slotsmgrtAsyncDumpGenericCommand(client *c, int usetag) {$/;"	f	file:	signature:(client *c, int usetag)
slotsmgrtAsyncFenceCommand	server.h	/^void slotsmgrtAsyncFenceCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtAsyncFenceCommand	slots_async.c	/^slotsmgrtAsyncFenceCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtAsyncGenericCommand	slots_async.c	/^slotsmgrtAsyncGenericCommand(client *c, int usetag, int usekey) {$/;"	f	file:	signature:(client *c, int usetag, int usekey)
slotsmgrtAsyncMaxBufferLimit	slots_async.c	/^slotsmgrtAsyncMaxBufferLimit(unsigned int maxbytes) {$/;"	f	file:	signature:(unsigned int maxbytes)
slotsmgrtAsyncNextMessagesMicroseconds	slots_async.c	/^slotsmgrtAsyncNextMessagesMicroseconds(slotsmgrtAsyncClient *ac, long atleast, long long usecs) {$/;"	f	file:	signature:(slotsmgrtAsyncClient *ac, long atleast, long long usecs)
slotsmgrtAsyncUnlinkClient	server.h	/^void slotsmgrtAsyncUnlinkClient(client *c);$/;"	p	signature:(client *c)
slotsmgrtAsyncUnlinkClient	slots_async.c	/^slotsmgrtAsyncUnlinkClient(client *c) {$/;"	f	signature:(client *c)
slotsmgrtExecWrapperCommand	server.h	/^void slotsmgrtExecWrapperCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtExecWrapperCommand	slots_async.c	/^slotsmgrtExecWrapperCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtLazyReleaseCleanup	server.h	/^void slotsmgrtLazyReleaseCleanup();$/;"	p	signature:()
slotsmgrtLazyReleaseCleanup	slots_async.c	/^slotsmgrtLazyReleaseCleanup() {$/;"	f
slotsmgrtLazyReleaseCommand	server.h	/^void slotsmgrtLazyReleaseCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtLazyReleaseCommand	slots_async.c	/^slotsmgrtLazyReleaseCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtLazyReleaseIncrementally	server.h	/^void slotsmgrtLazyReleaseIncrementally();$/;"	p	signature:()
slotsmgrtLazyReleaseIncrementally	slots_async.c	/^slotsmgrtLazyReleaseIncrementally() {$/;"	f
slotsmgrtLazyReleaseMicroseconds	slots_async.c	/^slotsmgrtLazyReleaseMicroseconds(long long usecs) {$/;"	f	file:	signature:(long long usecs)
slotsmgrtLazyReleaseStep	slots_async.c	/^slotsmgrtLazyReleaseStep(int step) {$/;"	f	file:	signature:(int step)
slotsmgrtOneAsyncCommand	server.h	/^void slotsmgrtOneAsyncCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtOneAsyncCommand	slots_async.c	/^void slotsmgrtOneAsyncCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtOneAsyncDumpCommand	server.h	/^void slotsmgrtOneAsyncDumpCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtOneAsyncDumpCommand	slots_async.c	/^void slotsmgrtOneAsyncDumpCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtSlotAsyncCommand	server.h	/^void slotsmgrtSlotAsyncCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtSlotAsyncCommand	slots_async.c	/^void slotsmgrtSlotAsyncCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtTagOneAsyncCommand	server.h	/^void slotsmgrtTagOneAsyncCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtTagOneAsyncCommand	slots_async.c	/^void slotsmgrtTagOneAsyncCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtTagOneAsyncDumpCommand	server.h	/^void slotsmgrtTagOneAsyncDumpCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtTagOneAsyncDumpCommand	slots_async.c	/^slotsmgrtTagOneAsyncDumpCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtTagSlotAsyncCommand	server.h	/^void slotsmgrtTagSlotAsyncCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtTagSlotAsyncCommand	slots_async.c	/^void slotsmgrtTagSlotAsyncCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrt_cached_clients	server.h	/^    slotsmgrtAsyncClient *slotsmgrt_cached_clients;$/;"	m	struct:redisServer	access:public
slotsmgrt_cached_sockfds	server.h	/^    dict *slotsmgrt_cached_sockfds;$/;"	m	struct:redisServer	access:public
slotsmgrt_cleanup	server.h	/^void slotsmgrt_cleanup();$/;"	p	signature:()
slotsmgrt_cleanup	slots.c	/^slotsmgrt_cleanup() {$/;"	f
slotsmgrt_close_socket	slots.c	/^slotsmgrt_close_socket(sds host, sds port) {$/;"	f	file:	signature:(sds host, sds port)
slotsmgrt_fenceq	server.h	/^    list *slotsmgrt_fenceq;$/;"	m	struct:client	access:public
slotsmgrt_flags	server.h	/^    long slotsmgrt_flags;$/;"	m	struct:client	access:public
slotsmgrt_get_sockfd	slots.c	/^slotsmgrt_get_sockfd(client *c, sds host, sds port, int timeout) {$/;"	f	file:	signature:(client *c, sds host, sds port, int timeout)
slotsmgrt_lazy_release	server.h	/^    list *slotsmgrt_lazy_release;$/;"	m	struct:redisServer	access:public
slotsmgrt_sockfd	slots.c	/^} slotsmgrt_sockfd;$/;"	t	typeref:struct:__anon28	file:
slotsmgrtoneCommand	server.h	/^void slotsmgrtoneCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtoneCommand	slots.c	/^slotsmgrtoneCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrtone_command	slots.c	/^slotsmgrtone_command(client *c, sds host, sds port, int timeout, robj *key) {$/;"	f	file:	signature:(client *c, sds host, sds port, int timeout, robj *key)
slotsmgrtslotCommand	server.h	/^void slotsmgrtslotCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrtslotCommand	slots.c	/^slotsmgrtslotCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrttag_command	slots.c	/^slotsmgrttag_command(client *c, sds host, sds port, int timeout, robj *key) {$/;"	f	file:	signature:(client *c, sds host, sds port, int timeout, robj *key)
slotsmgrttagoneCommand	server.h	/^void slotsmgrttagoneCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrttagoneCommand	slots.c	/^slotsmgrttagoneCommand(client *c) {$/;"	f	signature:(client *c)
slotsmgrttagslotCommand	server.h	/^void slotsmgrttagslotCommand(client *c);$/;"	p	signature:(client *c)
slotsmgrttagslotCommand	slots.c	/^slotsmgrttagslotCommand(client *c) {$/;"	f	signature:(client *c)
slotsremove	slots.c	/^slotsremove(client *c, robj **keys, int n, int rewrite) {$/;"	f	file:	signature:(client *c, robj **keys, int n, int rewrite)
slotsrestoreAsyncAckCommand	server.h	/^void slotsrestoreAsyncAckCommand(client *c);$/;"	p	signature:(client *c)
slotsrestoreAsyncAckCommand	slots_async.c	/^slotsrestoreAsyncAckCommand(client *c) {$/;"	f	signature:(client *c)
slotsrestoreAsyncAckHandle	slots_async.c	/^slotsrestoreAsyncAckHandle(client *c) {$/;"	f	file:	signature:(client *c)
slotsrestoreAsyncAuthCommand	server.h	/^void slotsrestoreAsyncAuthCommand(client *c);$/;"	p	signature:(client *c)
slotsrestoreAsyncAuthCommand	slots_async.c	/^slotsrestoreAsyncAuthCommand(client *c) {$/;"	f	signature:(client *c)
slotsrestoreAsyncCommand	server.h	/^void slotsrestoreAsyncCommand(client *c);$/;"	p	signature:(client *c)
slotsrestoreAsyncCommand	slots_async.c	/^slotsrestoreAsyncCommand(client *c) {$/;"	f	signature:(client *c)
slotsrestoreAsyncHandle	slots_async.c	/^slotsrestoreAsyncHandle(client *c) {$/;"	f	file:	signature:(client *c)
slotsrestoreCommand	server.h	/^void slotsrestoreCommand(client *c);$/;"	p	signature:(client *c)
slotsrestoreCommand	slots.c	/^slotsrestoreCommand(client *c) {$/;"	f	signature:(client *c)
slotsrestoreReplyAck	slots_async.c	/^slotsrestoreReplyAck(client *c, int errcode, const char *fmt, ...) {$/;"	f	file:	signature:(client *c, int errcode, const char *fmt, ...)
slotsscanCommand	server.h	/^void slotsscanCommand(client *c);$/;"	p	signature:(client *c)
slotsscanCommand	slots.c	/^slotsscanCommand(client *c) {$/;"	f	signature:(client *c)
slowlog	server.h	/^    list *slowlog;                  \/* SLOWLOG list of commands *\/$/;"	m	struct:redisServer	access:public
slowlogCommand	slowlog.c	/^void slowlogCommand(client *c) {$/;"	f	signature:(client *c)
slowlogCommand	slowlog.h	/^void slowlogCommand(client *c);$/;"	p	signature:(client *c)
slowlogCreateEntry	slowlog.c	/^slowlogEntry *slowlogCreateEntry(robj **argv, int argc, long long duration) {$/;"	f	signature:(robj **argv, int argc, long long duration)
slowlogEntry	slowlog.h	/^typedef struct slowlogEntry {$/;"	s
slowlogEntry	slowlog.h	/^} slowlogEntry;$/;"	t	typeref:struct:slowlogEntry
slowlogEntry::argc	slowlog.h	/^    int argc;$/;"	m	struct:slowlogEntry	access:public
slowlogEntry::argv	slowlog.h	/^    robj **argv;$/;"	m	struct:slowlogEntry	access:public
slowlogEntry::duration	slowlog.h	/^    long long duration; \/* Time spent by the query, in nanoseconds. *\/$/;"	m	struct:slowlogEntry	access:public
slowlogEntry::id	slowlog.h	/^    long long id;       \/* Unique entry identifier. *\/$/;"	m	struct:slowlogEntry	access:public
slowlogEntry::time	slowlog.h	/^    time_t time;        \/* Unix time at which the query was executed. *\/$/;"	m	struct:slowlogEntry	access:public
slowlogFreeEntry	slowlog.c	/^void slowlogFreeEntry(void *septr) {$/;"	f	signature:(void *septr)
slowlogInit	slowlog.c	/^void slowlogInit(void) {$/;"	f	signature:(void)
slowlogInit	slowlog.h	/^void slowlogInit(void);$/;"	p	signature:(void)
slowlogPushEntryIfNeeded	slowlog.c	/^void slowlogPushEntryIfNeeded(robj **argv, int argc, long long duration) {$/;"	f	signature:(robj **argv, int argc, long long duration)
slowlogPushEntryIfNeeded	slowlog.h	/^void slowlogPushEntryIfNeeded(robj **argv, int argc, long long duration);$/;"	p	signature:(robj **argv, int argc, long long duration)
slowlogReset	slowlog.c	/^void slowlogReset(void) {$/;"	f	signature:(void)
slowlog_entry_id	server.h	/^    long long slowlog_entry_id;     \/* SLOWLOG current entry ID *\/$/;"	m	struct:redisServer	access:public
slowlog_log_slower_than	server.h	/^    long long slowlog_log_slower_than; \/* SLOWLOG time limit (to get logged) *\/$/;"	m	struct:redisServer	access:public
slowlog_max_len	server.h	/^    unsigned long slowlog_max_len;     \/* SLOWLOG max number of items logged *\/$/;"	m	struct:redisServer	access:public
slowscripterr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct	access:public
smoveCommand	server.h	/^void smoveCommand(client *c);$/;"	p	signature:(client *c)
smoveCommand	t_set.c	/^void smoveCommand(client *c) {$/;"	f	signature:(client *c)
sndbuf	cluster.h	/^    sds sndbuf;                 \/* Packet send buffer *\/$/;"	m	struct:clusterLink	access:public
sofd	server.h	/^    int sofd;                   \/* Unix socket file descriptor *\/$/;"	m	struct:redisServer	access:public
soft_limit_bytes	server.h	/^    unsigned long long soft_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig	access:public
soft_limit_seconds	server.h	/^    time_t soft_limit_seconds;$/;"	m	struct:clientBufferLimitsConfig	access:public
sortCommand	server.h	/^void sortCommand(client *c);$/;"	p	signature:(client *c)
sortCommand	sort.c	/^void sortCommand(client *c) {$/;"	f	signature:(client *c)
sortCompare	sort.c	/^int sortCompare(const void *s1, const void *s2) {$/;"	f	signature:(const void *s1, const void *s2)
sortGetKeys	db.c	/^int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
sortGetKeys	server.h	/^int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);$/;"	p	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
sort_alpha	server.h	/^    int sort_alpha;$/;"	m	struct:redisServer	access:public
sort_bypattern	server.h	/^    int sort_bypattern;$/;"	m	struct:redisServer	access:public
sort_desc	server.h	/^    int sort_desc;$/;"	m	struct:redisServer	access:public
sort_gp_asc	geo.c	/^static int sort_gp_asc(const void *a, const void *b) {$/;"	f	file:	signature:(const void *a, const void *b)
sort_gp_desc	geo.c	/^static int sort_gp_desc(const void *a, const void *b) {$/;"	f	file:	signature:(const void *a, const void *b)
sort_store	server.h	/^    int sort_store;$/;"	m	struct:redisServer	access:public
space	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct	access:public
span	server.h	/^        unsigned int span;$/;"	m	struct:zskiplistNode::zskiplistLevel	access:public
sparklineRender	sparkline.c	/^sds sparklineRender(sds output, struct sequence *seq, int columns, int rows, int flags) {$/;"	f	signature:(sds output, struct sequence *seq, int columns, int rows, int flags)
sparklineRender	sparkline.h	/^sds sparklineRender(sds output, struct sequence *seq, int columns, int rows, int flags);$/;"	p	signature:(sds output, struct sequence *seq, int columns, int rows, int flags)
sparklineRenderRange	sparkline.c	/^sds sparklineRenderRange(sds output, struct sequence *seq, int rows, int offset, int len, int flags) {$/;"	f	signature:(sds output, struct sequence *seq, int rows, int offset, int len, int flags)
sparklineRenderRange	sparkline.h	/^sds sparklineRenderRange(sds output, struct sequence *seq, int rows, int offset, int len, int flags);$/;"	p	signature:(sds output, struct sequence *seq, int rows, int offset, int len, int flags)
sparklineSequenceAddSample	sparkline.c	/^void sparklineSequenceAddSample(struct sequence *seq, double value, char *label) {$/;"	f	signature:(struct sequence *seq, double value, char *label)
sparklineSequenceAddSample	sparkline.h	/^void sparklineSequenceAddSample(struct sequence *seq, double value, char *label);$/;"	p	signature:(struct sequence *seq, double value, char *label)
spectrum_palette	redis-cli.c	/^int *spectrum_palette;$/;"	v
spectrum_palette_color	redis-cli.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,208,202,196};$/;"	v
spectrum_palette_color_size	redis-cli.c	/^int spectrum_palette_color_size = 19;$/;"	v
spectrum_palette_mono	redis-cli.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v
spectrum_palette_mono_size	redis-cli.c	/^int spectrum_palette_mono_size = 13;$/;"	v
spectrum_palette_size	redis-cli.c	/^int spectrum_palette_size;$/;"	v
spopCommand	server.h	/^void spopCommand(client *c);$/;"	p	signature:(client *c)
spopCommand	t_set.c	/^void spopCommand(client *c) {$/;"	f	signature:(client *c)
spopWithCountCommand	t_set.c	/^void spopWithCountCommand(client *c) {$/;"	f	signature:(client *c)
spt_clearenv	setproctitle.c	/^static int spt_clearenv(void) {$/;"	f	file:	signature:(void)
spt_copyargs	setproctitle.c	/^static int spt_copyargs(int argc, char *argv[]) {$/;"	f	file:	signature:(int argc, char *argv[])
spt_copyenv	setproctitle.c	/^static int spt_copyenv(char *oldenv[]) {$/;"	f	file:	signature:(char *oldenv[])
spt_init	config.h	/^void spt_init(int argc, char *argv[]);$/;"	p	signature:(int argc, char *argv[])
spt_init	setproctitle.c	/^void spt_init(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
spt_min	setproctitle.c	/^static inline size_t spt_min(size_t a, size_t b) {$/;"	f	file:	signature:(size_t a, size_t b)
sptr	t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon20	file:	access:public
srandmemberCommand	server.h	/^void srandmemberCommand(client *c);$/;"	p	signature:(client *c)
srandmemberCommand	t_set.c	/^void srandmemberCommand(client *c) {$/;"	f	signature:(client *c)
srandmemberWithCountCommand	t_set.c	/^void srandmemberWithCountCommand(client *c) {$/;"	f	signature:(client *c)
src	scripting.c	/^    sds *src;   \/* Lua script source code split by line. *\/$/;"	m	struct:ldbState	file:	access:public
sremCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::	access:public
sremCommand	server.h	/^void sremCommand(client *c);$/;"	p	signature:(client *c)
sremCommand	t_set.c	/^void sremCommand(client *c) {$/;"	f	signature:(client *c)
sscanCommand	server.h	/^void sscanCommand(client *c);$/;"	p	signature:(client *c)
sscanCommand	t_set.c	/^void sscanCommand(client *c) {$/;"	f	signature:(client *c)
stage	slots_async.c	/^    int stage;$/;"	m	struct:__anon12	file:	access:public
start	redis-benchmark.c	/^    long long start;        \/* Start time of a request *\/$/;"	m	struct:_client	file:	access:public
start	redis-benchmark.c	/^    long long start;$/;"	m	struct:config	file:	access:public
startAppendOnly	aof.c	/^int startAppendOnly(void) {$/;"	f	signature:(void)
startAppendOnly	server.h	/^int startAppendOnly(void);$/;"	p	signature:(void)
startBgsaveForReplication	replication.c	/^int startBgsaveForReplication(int mincapa) {$/;"	f	signature:(int mincapa)
startLoading	rdb.c	/^void startLoading(FILE *fp) {$/;"	f	signature:(FILE *fp)
startLoading	server.h	/^void startLoading(FILE *fp);$/;"	p	signature:(FILE *fp)
start_time	sentinel.c	/^    mstime_t start_time;    \/* Script execution time if the script is running,$/;"	m	struct:sentinelScriptJob	file:	access:public
statMode	redis-cli.c	/^static void statMode(void) {$/;"	f	file:	signature:(void)
stat_evictedkeys	server.h	/^    long long stat_evictedkeys;     \/* Number of evicted keys (maxmemory) *\/$/;"	m	struct:redisServer	access:public
stat_expiredkeys	server.h	/^    long long stat_expiredkeys;     \/* Number of expired keys *\/$/;"	m	struct:redisServer	access:public
stat_fork_rate	server.h	/^    double stat_fork_rate;          \/* Fork rate in GB\/sec. *\/$/;"	m	struct:redisServer	access:public
stat_fork_time	server.h	/^    long long stat_fork_time;       \/* Time needed to perform latest fork() *\/$/;"	m	struct:redisServer	access:public
stat_keyspace_hits	server.h	/^    long long stat_keyspace_hits;   \/* Number of successful lookups of keys *\/$/;"	m	struct:redisServer	access:public
stat_keyspace_misses	server.h	/^    long long stat_keyspace_misses; \/* Number of failed lookups of keys *\/$/;"	m	struct:redisServer	access:public
stat_mode	redis-cli.c	/^    int stat_mode;$/;"	m	struct:config	file:	access:public
stat_net_input_bytes	server.h	/^    long long stat_net_input_bytes; \/* Bytes read from network. *\/$/;"	m	struct:redisServer	access:public
stat_net_output_bytes	server.h	/^    long long stat_net_output_bytes; \/* Bytes written to network. *\/$/;"	m	struct:redisServer	access:public
stat_numcommands	server.h	/^    long long stat_numcommands;     \/* Number of processed commands *\/$/;"	m	struct:redisServer	access:public
stat_numconnections	server.h	/^    long long stat_numconnections;  \/* Number of connections received *\/$/;"	m	struct:redisServer	access:public
stat_peak_memory	server.h	/^    size_t stat_peak_memory;        \/* Max used memory record *\/$/;"	m	struct:redisServer	access:public
stat_rejected_conn	server.h	/^    long long stat_rejected_conn;   \/* Clients rejected because of maxclients *\/$/;"	m	struct:redisServer	access:public
stat_starttime	server.h	/^    time_t stat_starttime;          \/* Server start time *\/$/;"	m	struct:redisServer	access:public
stat_sync_full	server.h	/^    long long stat_sync_full;       \/* Number of full resyncs with slaves. *\/$/;"	m	struct:redisServer	access:public
stat_sync_partial_err	server.h	/^    long long stat_sync_partial_err;\/* Number of unaccepted PSYNC requests. *\/$/;"	m	struct:redisServer	access:public
stat_sync_partial_ok	server.h	/^    long long stat_sync_partial_ok; \/* Number of accepted PSYNC requests. *\/$/;"	m	struct:redisServer	access:public
state	cluster.h	/^    int state;            \/* CLUSTER_OK, CLUSTER_FAIL, ... *\/$/;"	m	struct:clusterState	access:public
state	cluster.h	/^    unsigned char state; \/* Cluster state from the POV of the sender *\/$/;"	m	struct:__anon9	access:public
state	rio.h	/^            int *state;     \/* Error state of each fd. 0 (if ok) or errno. *\/$/;"	m	struct:_rio::__anon24::__anon27	access:public
state	sha1.h	/^    uint32_t state[5];$/;"	m	struct:__anon15	access:public
stats_bus_messages_received	cluster.h	/^    long long stats_bus_messages_received; \/* Num of msg rcvd via cluster bus.*\/$/;"	m	struct:clusterState	access:public
stats_bus_messages_sent	cluster.h	/^    long long stats_bus_messages_sent;  \/* Num of msg sent via cluster bus. *\/$/;"	m	struct:clusterState	access:public
stdinarg	redis-cli.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:	access:public
step	scripting.c	/^    int step;   \/* Stop at next line ragardless of breakpoints. *\/$/;"	m	struct:ldbState	file:	access:public
step	slots_async.c	/^    int step;$/;"	m	struct:__anon11	file:	access:public
stop	ae.h	/^    int stop;$/;"	m	struct:aeEventLoop	access:public
stopAppendOnly	aof.c	/^void stopAppendOnly(void) {$/;"	f	signature:(void)
stopAppendOnly	server.h	/^void stopAppendOnly(void);$/;"	p	signature:(void)
stopLoading	rdb.c	/^void stopLoading(void) {$/;"	f	signature:(void)
stopLoading	server.h	/^void stopLoading(void);$/;"	p	signature:(void)
stop_writes_on_bgsave_err	server.h	/^    int stop_writes_on_bgsave_err;  \/* Don't allow writes if can't BGSAVE *\/$/;"	m	struct:redisServer	access:public
strEncoding	object.c	/^char *strEncoding(int encoding) {$/;"	f	signature:(int encoding)
strEncoding	server.h	/^char *strEncoding(int encoding);$/;"	p	signature:(int encoding)
stress	ziplist.c	/^static void stress(int pos, int num, int maxsize, int dnum) {$/;"	f	file:	signature:(int pos, int num, int maxsize, int dnum)
string2l	util.c	/^int string2l(const char *s, size_t slen, long *lval) {$/;"	f	signature:(const char *s, size_t slen, long *lval)
string2l	util.h	/^int string2l(const char *s, size_t slen, long *value);$/;"	p	signature:(const char *s, size_t slen, long *value)
string2ll	util.c	/^int string2ll(const char *s, size_t slen, long long *value) {$/;"	f	signature:(const char *s, size_t slen, long long *value)
string2ll	util.h	/^int string2ll(const char *s, size_t slen, long long *value);$/;"	p	signature:(const char *s, size_t slen, long long *value)
stringObjectLen	object.c	/^size_t stringObjectLen(robj *o) {$/;"	f	signature:(robj *o)
stringObjectLen	server.h	/^size_t stringObjectLen(robj *o);$/;"	p	signature:(robj *o)
stringmatch	util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f	signature:(const char *pattern, const char *string, int nocase)
stringmatch	util.h	/^int stringmatch(const char *p, const char *s, int nocase);$/;"	p	signature:(const char *p, const char *s, int nocase)
stringmatchlen	util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f	signature:(const char *pattern, int patternLen, const char *string, int stringLen, int nocase)
stringmatchlen	util.h	/^int stringmatchlen(const char *p, int plen, const char *s, int slen, int nocase);$/;"	p	signature:(const char *p, int plen, const char *s, int slen, int nocase)
strlenCommand	server.h	/^void strlenCommand(client *c);$/;"	p	signature:(client *c)
strlenCommand	t_string.c	/^void strlenCommand(client *c) {$/;"	f	signature:(client *c)
strtold	object.c	36;"	d	file:
subject	server.h	/^    robj *subject;$/;"	m	struct:__anon32	access:public
subject	server.h	/^    robj *subject;$/;"	m	struct:__anon34	access:public
subject	server.h	/^    robj *subject;$/;"	m	struct:__anon35	access:public
subject	t_zset.c	/^    robj *subject;$/;"	m	struct:__anon16	file:	access:public
subscribeCommand	pubsub.c	/^void subscribeCommand(client *c) {$/;"	f	signature:(client *c)
subscribeCommand	server.h	/^void subscribeCommand(client *c);$/;"	p	signature:(client *c)
subscribebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct	access:public
summary	help.h	/^  char *summary;$/;"	m	struct:commandHelp	access:public
sunionCommand	server.h	/^void sunionCommand(client *c);$/;"	p	signature:(client *c)
sunionCommand	t_set.c	/^void sunionCommand(client *c) {$/;"	f	signature:(client *c)
sunionDiffGenericCommand	t_set.c	/^void sunionDiffGenericCommand(client *c, robj **setkeys, int setnum,$/;"	f	signature:(client *c, robj **setkeys, int setnum, robj *dstkey, int op)
sunionDiffGenericCommand	t_set.c	/^void sunionDiffGenericCommand(client *c, robj **setkeys, int setnum,$/;"	p	file:	signature:(client *c, robj **setkeys, int setnum, robj *dstkey, int op)
sunionstoreCommand	server.h	/^void sunionstoreCommand(client *c);$/;"	p	signature:(client *c)
sunionstoreCommand	t_set.c	/^void sunionstoreCommand(client *c) {$/;"	f	signature:(client *c)
supervised	server.h	/^    int supervised;                 \/* 1 if supervised, 0 otherwise. *\/$/;"	m	struct:redisServer	access:public
supervised_mode	server.h	/^    int supervised_mode;            \/* See SUPERVISED_* *\/$/;"	m	struct:redisServer	access:public
supervised_mode_enum	config.c	/^configEnum supervised_mode_enum[] = {$/;"	v
swap	pqsort.c	78;"	d	file:
swapcode	pqsort.c	54;"	d	file:
swapfunc	pqsort.c	/^static inline void	 swapfunc (char *, char *, size_t, int);$/;"	p	file:	signature:(char *, char *, size_t, int)
swapfunc	pqsort.c	/^swapfunc(char *a, char *b, size_t n, int swaptype)$/;"	f	file:	signature:(char *a, char *b, size_t n, int swaptype)
syncCommand	replication.c	/^void syncCommand(client *c) {$/;"	f	signature:(client *c)
syncCommand	server.h	/^void syncCommand(client *c);$/;"	p	signature:(client *c)
syncRead	server.h	/^ssize_t syncRead(int fd, char *ptr, ssize_t size, long long timeout);$/;"	p	signature:(int fd, char *ptr, ssize_t size, long long timeout)
syncRead	syncio.c	/^ssize_t syncRead(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f	signature:(int fd, char *ptr, ssize_t size, long long timeout)
syncReadLine	server.h	/^ssize_t syncReadLine(int fd, char *ptr, ssize_t size, long long timeout);$/;"	p	signature:(int fd, char *ptr, ssize_t size, long long timeout)
syncReadLine	syncio.c	/^ssize_t syncReadLine(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f	signature:(int fd, char *ptr, ssize_t size, long long timeout)
syncWithMaster	replication.c	/^void syncWithMaster(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
syncWrite	server.h	/^ssize_t syncWrite(int fd, char *ptr, ssize_t size, long long timeout);$/;"	p	signature:(int fd, char *ptr, ssize_t size, long long timeout)
syncWrite	syncio.c	/^ssize_t syncWrite(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f	signature:(int fd, char *ptr, ssize_t size, long long timeout)
syntaxerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
syslog_enabled	server.h	/^    int syslog_enabled;             \/* Is syslog enabled? *\/$/;"	m	struct:redisServer	access:public
syslog_facility	server.h	/^    int syslog_facility;            \/* Syslog facility *\/$/;"	m	struct:redisServer	access:public
syslog_facility_enum	config.c	/^configEnum syslog_facility_enum[] = {$/;"	v
syslog_ident	server.h	/^    char *syslog_ident;             \/* Syslog ident *\/$/;"	m	struct:redisServer	access:public
system_memory_size	server.h	/^    size_t system_memory_size;  \/* Total memory in system as reported by OS *\/$/;"	m	struct:redisServer	access:public
sz	quicklist.h	/^    unsigned int sz;             \/* ziplist size in bytes *\/$/;"	m	struct:quicklistNode	access:public
sz	quicklist.h	/^    unsigned int sz; \/* LZF size in bytes*\/$/;"	m	struct:quicklistLZF	access:public
sz	quicklist.h	/^    unsigned int sz;$/;"	m	struct:quicklistEntry	access:public
table	dict.h	/^    dictEntry **table;$/;"	m	struct:dictht	access:public
table	dict.h	/^    int table, safe;$/;"	m	struct:dictIterator	access:public
tagged_keys	server.h	/^    struct zskiplist *tagged_keys;$/;"	m	struct:redisDb	typeref:struct:redisDb::zskiplist	access:public
tags	slots_async.c	/^    struct zskiplist *tags;$/;"	m	struct:__anon13	typeref:struct:__anon13::zskiplist	file:	access:public
tail	adlist.h	/^    listNode *tail;$/;"	m	struct:list	access:public
tail	quicklist.h	/^    quicklistNode *tail;$/;"	m	struct:quicklist	access:public
tail	server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::	access:public
target	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp	access:public
target	server.h	/^    robj *target;           \/* The key that should receive the element,$/;"	m	struct:blockingState	access:public
tcp_backlog	server.h	/^    int tcp_backlog;            \/* TCP listen() backlog *\/$/;"	m	struct:redisServer	access:public
tcpkeepalive	server.h	/^    int tcpkeepalive;               \/* Set SO_KEEPALIVE if non-zero. *\/$/;"	m	struct:redisServer	access:public
tell	rio.h	/^    off_t (*tell)(struct _rio *);$/;"	m	struct:_rio	access:public
test_cond	testhelp.h	44;"	d
test_is_selected	redis-benchmark.c	/^int test_is_selected(char *name) {$/;"	f	signature:(char *name)
test_ll2string	util.c	/^static void test_ll2string(void) {$/;"	f	file:	signature:(void)
test_report	testhelp.h	48;"	d
test_string2l	util.c	/^static void test_string2l(void) {$/;"	f	file:	signature:(void)
test_string2ll	util.c	/^static void test_string2ll(void) {$/;"	f	file:	signature:(void)
tests	redis-benchmark.c	/^    char *tests;$/;"	m	struct:config	file:	access:public
tilt	sentinel.c	/^    int tilt;           \/* Are we in TILT mode? *\/$/;"	m	struct:sentinelState	file:	access:public
tilt_start_time	sentinel.c	/^    mstime_t tilt_start_time;       \/* When TITL started. *\/$/;"	m	struct:sentinelState	file:	access:public
time	bio.c	/^    time_t time; \/* Time at which the job was created. *\/$/;"	m	struct:bio_job	file:	access:public
time	cluster.h	/^    mstime_t time;             \/* Time of the last report from this node. *\/$/;"	m	struct:clusterNodeFailReport	access:public
time	latency.h	/^    int32_t time; \/* We don't use time_t to force 4 bytes usage everywhere. *\/$/;"	m	struct:latencySample	access:public
time	slowlog.h	/^    time_t time;        \/* Unix time at which the query was executed. *\/$/;"	m	struct:slowlogEntry	access:public
timeCommand	server.c	/^void timeCommand(client *c) {$/;"	f	signature:(client *c)
timeCommand	server.h	/^void timeCommand(client *c);$/;"	p	signature:(client *c)
timeEventHead	ae.h	/^    aeTimeEvent *timeEventHead;$/;"	m	struct:aeEventLoop	access:public
timeEventNextId	ae.h	/^    long long timeEventNextId;$/;"	m	struct:aeEventLoop	access:public
timeInMilliseconds	dict.c	/^long long timeInMilliseconds(void) {$/;"	f	signature:(void)
timeInMilliseconds	server.h	/^long long timeInMilliseconds(void);$/;"	p	signature:(void)
timeProc	ae.h	/^    aeTimeProc *timeProc;$/;"	m	struct:aeTimeEvent	access:public
time_independent_strcmp	server.c	/^int time_independent_strcmp(char *a, char *b) {$/;"	f	signature:(char *a, char *b)
time_independent_strcmp	slots_async.c	/^extern int time_independent_strcmp(const char *a, const char *b);$/;"	p	file:	signature:(const char *a, const char *b)
timeout	server.h	/^    long long timeout;$/;"	m	struct:__anon29	access:public
timeout	server.h	/^    mstime_t timeout;       \/* Blocking operation timeout. If UNIX current time$/;"	m	struct:blockingState	access:public
timeout	slots_async.c	/^    long long timeout;$/;"	m	struct:__anon13	file:	access:public
title	redis-benchmark.c	/^    const char *title;$/;"	m	struct:config	file:	access:public
toIntType	redis-cli.c	/^static int toIntType(char *key, char *type) {$/;"	f	file:	signature:(char *key, char *type)
to_s	redis-trib.rb	/^    def to_s$/;"	f	class:ClusterNode
todo_before_sleep	cluster.h	/^    int todo_before_sleep; \/* Things to do in clusterBeforeSleep(). *\/$/;"	m	struct:clusterState	access:public
totlatency	redis-benchmark.c	/^    long long totlatency;$/;"	m	struct:config	file:	access:public
totlen	cluster.h	/^    uint32_t totlen;    \/* Total length of this message *\/$/;"	m	struct:__anon9	access:public
touchCommand	db.c	/^void touchCommand(client *c) {$/;"	f	signature:(client *c)
touchCommand	server.h	/^void touchCommand(client *c);$/;"	p	signature:(client *c)
touchWatchedKey	multi.c	/^void touchWatchedKey(redisDb *db, robj *key) {$/;"	f	signature:(redisDb *db, robj *key)
touchWatchedKey	server.h	/^void touchWatchedKey(redisDb *db, robj *key);$/;"	p	signature:(redisDb *db, robj *key)
touchWatchedKeysOnFlush	multi.c	/^void touchWatchedKeysOnFlush(int dbid) {$/;"	f	signature:(int dbid)
touchWatchedKeysOnFlush	server.h	/^void touchWatchedKeysOnFlush(int dbid);$/;"	p	signature:(int dbid)
traces	scripting.c	/^    list *traces; \/* Messages about Redis commands executed since last stop.*\/$/;"	m	struct:ldbState	file:	access:public
trackInstantaneousMetric	server.c	/^void trackInstantaneousMetric(int metric, long long current_reading) {$/;"	f	signature:(int metric, long long current_reading)
tryObjectEncoding	object.c	/^robj *tryObjectEncoding(robj *o) {$/;"	f	signature:(robj *o)
tryObjectEncoding	server.h	/^robj *tryObjectEncoding(robj *o);$/;"	p	signature:(robj *o)
tryResizeHashTables	server.c	/^void tryResizeHashTables(int dbid) {$/;"	f	signature:(int dbid)
ttlCommand	db.c	/^void ttlCommand(client *c) {$/;"	f	signature:(client *c)
ttlCommand	server.h	/^void ttlCommand(client *c);$/;"	p	signature:(client *c)
ttlGenericCommand	db.c	/^void ttlGenericCommand(client *c, int output_ms) {$/;"	f	signature:(client *c, int output_ms)
type	cluster.h	/^    uint16_t type;      \/* Message type *\/$/;"	m	struct:__anon9	access:public
type	dict.h	/^    dictType *type;$/;"	m	struct:dict	access:public
type	redis-cli.c	/^    int type;$/;"	m	struct:__anon38	file:	access:public
type	server.h	/^    int type;$/;"	m	struct:_redisSortOperation	access:public
type	server.h	/^    unsigned type:4;$/;"	m	struct:redisObject	access:public
type	t_zset.c	/^    int type; \/* Set, sorted set *\/$/;"	m	struct:__anon16	file:	access:public
typeCommand	db.c	/^void typeCommand(client *c) {$/;"	f	signature:(client *c)
typeCommand	server.h	/^void typeCommand(client *c);$/;"	p	signature:(client *c)
u	server.h	/^    } u;$/;"	m	struct:_redisSortObject	typeref:union:_redisSortObject::__anon31	access:public
u16	lzfP.h	/^    typedef unsigned int u16;$/;"	t
u16	lzfP.h	/^    typedef unsigned short u16;$/;"	t
u64	dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon14	access:public
u8	lzfP.h	/^typedef unsigned char u8;$/;"	t
u_int	solarisfixes.h	50;"	d
u_int32_t	solarisfixes.h	51;"	d
uname_S	Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
unblockClient	blocked.c	/^void unblockClient(client *c) {$/;"	f	signature:(client *c)
unblockClient	server.h	/^void unblockClient(client *c);$/;"	p	signature:(client *c)
unblockClientWaitingData	server.h	/^void unblockClientWaitingData(client *c);$/;"	p	signature:(client *c)
unblockClientWaitingData	t_list.c	/^void unblockClientWaitingData(client *c) {$/;"	f	signature:(client *c)
unblockClientWaitingReplicas	replication.c	/^void unblockClientWaitingReplicas(client *c) {$/;"	f	signature:(client *c)
unblockClientWaitingReplicas	server.h	/^void unblockClientWaitingReplicas(client *c);$/;"	p	signature:(client *c)
unblocked_clients	server.h	/^    list *unblocked_clients; \/* list of clients to unblock before next loop *\/$/;"	m	struct:redisServer	access:public
undoConnectWithMaster	replication.c	/^void undoConnectWithMaster(void) {$/;"	f	signature:(void)
unixsocket	server.h	/^    char *unixsocket;           \/* UNIX socket path *\/$/;"	m	struct:redisServer	access:public
unixsocketperm	server.h	/^    mode_t unixsocketperm;      \/* UNIX socket permission *\/$/;"	m	struct:redisServer	access:public
unixtime	server.h	/^    time_t unixtime;        \/* Unix time sampled every cron cycle. *\/$/;"	m	struct:redisServer	access:public
unlikely	quicklist.c	86;"	d	file:
unlikely	quicklist.c	89;"	d	file:
unlinkClient	networking.c	/^void unlinkClient(client *c) {$/;"	f	signature:(client *c)
unlinkClient	server.h	/^void unlinkClient(client *c);$/;"	p	signature:(client *c)
unlinkSlotsmgrtAsyncCachedClient	slots_async.c	/^unlinkSlotsmgrtAsyncCachedClient(client *c, const char *errmsg) {$/;"	f	file:	signature:(client *c, const char *errmsg)
unlinkSlotsmgrtAsyncNormalClient	slots_async.c	/^unlinkSlotsmgrtAsyncNormalClient(client *c) {$/;"	f	file:	signature:(client *c)
unsubscribeCommand	pubsub.c	/^void unsubscribeCommand(client *c) {$/;"	f	signature:(client *c)
unsubscribeCommand	server.h	/^void unsubscribeCommand(client *c);$/;"	p	signature:(client *c)
unsubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct	access:public
unwatchAllKeys	multi.c	/^void unwatchAllKeys(client *c) {$/;"	f	signature:(client *c)
unwatchAllKeys	server.h	/^void unwatchAllKeys(client *c);$/;"	p	signature:(client *c)
unwatchCommand	multi.c	/^void unwatchCommand(client *c) {$/;"	f	signature:(client *c)
unwatchCommand	server.h	/^void unwatchCommand(client *c);$/;"	p	signature:(client *c)
update	cluster.h	/^    } update;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon8	access:public
updateCachedTime	server.c	/^void updateCachedTime(void) {$/;"	f	signature:(void)
updateCachedTime	server.h	/^void updateCachedTime(void);$/;"	p	signature:(void)
updateDictResizePolicy	server.c	/^void updateDictResizePolicy(void) {$/;"	f	signature:(void)
updateDictResizePolicy	server.h	/^void updateDictResizePolicy(void);$/;"	p	signature:(void)
updateSlavesWaitingBgsave	replication.c	/^void updateSlavesWaitingBgsave(int bgsaveerr, int type) {$/;"	f	signature:(int bgsaveerr, int type)
updateSlavesWaitingBgsave	server.h	/^void updateSlavesWaitingBgsave(int bgsaveerr, int type);$/;"	p	signature:(int bgsaveerr, int type)
update_cksum	rio.h	/^    void (*update_cksum)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio	access:public
update_zmalloc_stat_add	zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	zmalloc.c	74;"	d	file:
update_zmalloc_stat_add	zmalloc.c	77;"	d	file:
update_zmalloc_stat_alloc	zmalloc.c	91;"	d	file:
update_zmalloc_stat_free	zmalloc.c	101;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	75;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	83;"	d	file:
usage	redis-cli.c	/^static void usage(void) {$/;"	f	file:	signature:(void)
usage	redis-cli.c	/^static void usage(void);$/;"	p	file:	signature:(void)
usage	server.c	/^void usage(void) {$/;"	f	signature:(void)
usage	server.h	/^void usage(void);$/;"	p	signature:(void)
usec	intset.c	/^static long long usec(void) {$/;"	f	file:	signature:(void)
usec	ziplist.c	/^static long long usec(void) {$/;"	f	file:	signature:(void)
used	aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:	access:public
used	dict.h	/^    unsigned long used;$/;"	m	struct:dictht	access:public
used	geo.h	/^    size_t used;$/;"	m	struct:geoArray	access:public
used	server.h	/^    int used;$/;"	m	struct:__anon29	access:public
used_memory	zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
ustime	quicklist.c	/^static long long ustime(void) {$/;"	f	file:	signature:(void)
ustime	redis-benchmark.c	/^static long long ustime(void) {$/;"	f	file:	signature:(void)
ustime	redis-cli.c	/^static long long ustime(void) {$/;"	f	file:	signature:(void)
ustime	server.c	/^long long ustime(void) {$/;"	f	signature:(void)
ustime	server.h	/^long long ustime(void);$/;"	p	signature:(void)
utilTest	util.c	/^int utilTest(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
utilTest	util.h	/^int utilTest(int argc, char **argv);$/;"	p	signature:(int argc, char **argv)
v	dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon14	access:public
val	config.c	/^    const int val;$/;"	m	struct:configEnum	file:	access:public
val	dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon14	access:public
val	slots_async.c	/^    robj *val;$/;"	m	struct:__anon10	file:	access:public
val	slots_async.c	/^    robj *val;$/;"	m	struct:__anon12	file:	access:public
valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType	access:public
valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType	access:public
value	adlist.h	/^    void *value;$/;"	m	struct:listNode	access:public
value	quicklist.h	/^    unsigned char *value;$/;"	m	struct:quicklistEntry	access:public
value	sparkline.h	/^    double value;$/;"	m	struct:sample	access:public
vecswap	pqsort.c	86;"	d	file:
ver	cluster.h	/^    uint16_t ver;       \/* Protocol version, currently set to 0. *\/$/;"	m	struct:__anon9	access:public
verbosity	server.h	/^    int verbosity;                  \/* Loglevel in redis.conf *\/$/;"	m	struct:redisServer	access:public
verify	ziplist.c	/^static void verify(unsigned char *zl, zlentry *e) {$/;"	f	file:	signature:(unsigned char *zl, zlentry *e)
verifyClusterConfigWithData	cluster.c	/^int verifyClusterConfigWithData(void) {$/;"	f	signature:(void)
verifyClusterConfigWithData	server.h	/^int verifyClusterConfigWithData(void);$/;"	p	signature:(void)
verifyDumpPayload	cluster.c	/^int verifyDumpPayload(unsigned char *p, size_t len) {$/;"	f	signature:(unsigned char *p, size_t len)
verifyDumpPayload	slots.c	/^extern int verifyDumpPayload(unsigned char *p, size_t len);$/;"	p	file:	signature:(unsigned char *p, size_t len)
verifyDumpPayload	slots_async.c	/^extern int verifyDumpPayload(unsigned char *p, size_t len);$/;"	p	file:	signature:(unsigned char *p, size_t len)
version	server.c	/^void version(void) {$/;"	f	signature:(void)
voted_time	cluster.h	/^    mstime_t voted_time;     \/* Last time we voted for a slave of this master *\/$/;"	m	struct:clusterNode	access:public
votes	sentinel.c	/^    unsigned long votes;$/;"	m	struct:sentinelLeader	file:	access:public
vptr	server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon35	access:public
waitCommand	replication.c	/^void waitCommand(client *c) {$/;"	f	signature:(client *c)
waitCommand	server.h	/^void waitCommand(client *c);$/;"	p	signature:(client *c)
wait_cluster_join	redis-trib.rb	/^    def wait_cluster_join$/;"	f	class:RedisTrib
watchCommand	multi.c	/^void watchCommand(client *c) {$/;"	f	signature:(client *c)
watchCommand	server.h	/^void watchCommand(client *c);$/;"	p	signature:(client *c)
watchForKey	multi.c	/^void watchForKey(client *c, robj *key) {$/;"	f	signature:(client *c, robj *key)
watchdogScheduleSignal	debug.c	/^void watchdogScheduleSignal(int period) {$/;"	f	signature:(int period)
watchdogScheduleSignal	server.h	/^void watchdogScheduleSignal(int period);$/;"	p	signature:(int period)
watchdogSignalHandler	debug.c	/^void watchdogSignalHandler(int sig, siginfo_t *info, void *secret) {$/;"	f	signature:(int sig, siginfo_t *info, void *secret)
watchdog_period	server.h	/^    int watchdog_period;  \/* Software watchdog period in ms. 0 = off *\/$/;"	m	struct:redisServer	access:public
watchedKey	multi.c	/^typedef struct watchedKey {$/;"	s	file:
watchedKey	multi.c	/^} watchedKey;$/;"	t	typeref:struct:watchedKey	file:
watchedKey::db	multi.c	/^    redisDb *db;$/;"	m	struct:watchedKey	file:	access:public
watchedKey::key	multi.c	/^    robj *key;$/;"	m	struct:watchedKey	file:	access:public
watched_keys	server.h	/^    dict *watched_keys;         \/* WATCHED keys for MULTI\/EXEC CAS *\/$/;"	m	struct:redisDb	access:public
watched_keys	server.h	/^    list *watched_keys;     \/* Keys WATCHED for MULTI\/EXEC CAS *\/$/;"	m	struct:client	access:public
weight	t_zset.c	/^    double weight;$/;"	m	struct:__anon16	file:	access:public
wfds	ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:	access:public
wfileProc	ae.h	/^    aeFileProc *wfileProc;$/;"	m	struct:aeFileEvent	access:public
when_ms	ae.h	/^    long when_ms; \/* milliseconds *\/$/;"	m	struct:aeTimeEvent	access:public
when_sec	ae.h	/^    long when_sec; \/* seconds *\/$/;"	m	struct:aeTimeEvent	access:public
woff	server.h	/^    long long woff;         \/* Last write global replication offset. *\/$/;"	m	struct:client	access:public
write	rio.h	/^    size_t (*write)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio	access:public
writeHandler	redis-benchmark.c	/^static void writeHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
writeHandler	redis-benchmark.c	/^static void writeHandler(aeEventLoop *el, int fd, void *privdata, int mask);$/;"	p	file:	signature:(aeEventLoop *el, int fd, void *privdata, int mask)
writeToClient	networking.c	/^int writeToClient(int fd, client *c, int handler_installed) {$/;"	f	signature:(int fd, client *c, int handler_installed)
writeToClient	server.h	/^int writeToClient(int fd, client *c, int handler_installed);$/;"	p	signature:(int fd, client *c, int handler_installed)
writing	sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:	access:public
written	redis-benchmark.c	/^    size_t written;         \/* Bytes of 'obuf' already written *\/$/;"	m	struct:_client	file:	access:public
wrongtypeerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct	access:public
ws	memtest.c	/^static struct winsize ws;$/;"	v	typeref:struct:winsize	file:
x	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
xorDigest	debug.c	/^void xorDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f	signature:(unsigned char *digest, void *ptr, size_t len)
xorObjectDigest	debug.c	/^void xorObjectDigest(unsigned char *digest, robj *o) {$/;"	f	signature:(unsigned char *digest, robj *o)
xorshift64star_next	memtest.c	131;"	d	file:
xputs	redis-trib.rb	/^def xputs(s)$/;"	f
yell	quicklist.c	1427;"	d	file:
yes_or_die	redis-trib.rb	/^    def yes_or_die(msg)$/;"	f	class:RedisTrib.alloc_slots
yesnotoi	config.c	/^int yesnotoi(char *s) {$/;"	f	signature:(char *s)
yesnotoi	sentinel.c	/^int yesnotoi(char *s);$/;"	p	file:	signature:(char *s)
zaddCommand	server.h	/^void zaddCommand(client *c);$/;"	p	signature:(client *c)
zaddCommand	t_zset.c	/^void zaddCommand(client *c) {$/;"	f	signature:(client *c)
zaddGenericCommand	t_zset.c	/^void zaddGenericCommand(client *c, int flags) {$/;"	f	signature:(client *c, int flags)
zcalloc	zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f	signature:(size_t size)
zcalloc	zmalloc.h	/^void *zcalloc(size_t size);$/;"	p	signature:(size_t size)
zcardCommand	server.h	/^void zcardCommand(client *c);$/;"	p	signature:(client *c)
zcardCommand	t_zset.c	/^void zcardCommand(client *c) {$/;"	f	signature:(client *c)
zcountCommand	server.h	/^void zcountCommand(client *c);$/;"	p	signature:(client *c)
zcountCommand	t_zset.c	/^void zcountCommand(client *c) {$/;"	f	signature:(client *c)
zfree	zmalloc.c	/^void zfree(void *ptr) {$/;"	f	signature:(void *ptr)
zfree	zmalloc.h	/^void zfree(void *ptr);$/;"	p	signature:(void *ptr)
zi	quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistEntry	access:public
zi	quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistIter	access:public
zincrbyCommand	server.h	/^void zincrbyCommand(client *c);$/;"	p	signature:(client *c)
zincrbyCommand	t_zset.c	/^void zincrbyCommand(client *c) {$/;"	f	signature:(client *c)
zindex	slots_async.c	/^    unsigned long zindex;$/;"	m	struct:__anon12	file:	access:public
zinterstoreCommand	server.h	/^void zinterstoreCommand(client *c);$/;"	p	signature:(client *c)
zinterstoreCommand	t_zset.c	/^void zinterstoreCommand(client *c) {$/;"	f	signature:(client *c)
zipEncodeLength	ziplist.c	/^unsigned int zipEncodeLength(unsigned char *p, unsigned char encoding, unsigned int rawlen) {$/;"	f	signature:(unsigned char *p, unsigned char encoding, unsigned int rawlen)
zipEntry	ziplist.c	/^void zipEntry(unsigned char *p, zlentry *e) {$/;"	f	signature:(unsigned char *p, zlentry *e)
zipIntSize	ziplist.c	/^unsigned int zipIntSize(unsigned char encoding) {$/;"	f	signature:(unsigned char encoding)
zipLoadInteger	ziplist.c	/^int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f	signature:(unsigned char *p, unsigned char encoding)
zipPrevEncodeLength	ziplist.c	/^unsigned int zipPrevEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	signature:(unsigned char *p, unsigned int len)
zipPrevEncodeLengthForceLarge	ziplist.c	/^void zipPrevEncodeLengthForceLarge(unsigned char *p, unsigned int len) {$/;"	f	signature:(unsigned char *p, unsigned int len)
zipPrevLenByteDiff	ziplist.c	/^int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f	signature:(unsigned char *p, unsigned int len)
zipRawEntryLength	ziplist.c	/^unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f	signature:(unsigned char *p)
zipSaveInteger	ziplist.c	/^void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f	signature:(unsigned char *p, int64_t value, unsigned char encoding)
zipTryEncoding	ziplist.c	/^int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding) {$/;"	f	signature:(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding)
ziplistBlobLen	ziplist.c	/^size_t ziplistBlobLen(unsigned char *zl) {$/;"	f	signature:(unsigned char *zl)
ziplistBlobLen	ziplist.h	/^size_t ziplistBlobLen(unsigned char *zl);$/;"	p	signature:(unsigned char *zl)
ziplistCompare	ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f	signature:(unsigned char *p, unsigned char *sstr, unsigned int slen)
ziplistCompare	ziplist.h	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *s, unsigned int slen);$/;"	p	signature:(unsigned char *p, unsigned char *s, unsigned int slen)
ziplistDelete	ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f	signature:(unsigned char *zl, unsigned char **p)
ziplistDelete	ziplist.h	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p);$/;"	p	signature:(unsigned char *zl, unsigned char **p)
ziplistDeleteRange	ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, int index, unsigned int num) {$/;"	f	signature:(unsigned char *zl, int index, unsigned int num)
ziplistDeleteRange	ziplist.h	/^unsigned char *ziplistDeleteRange(unsigned char *zl, int index, unsigned int num);$/;"	p	signature:(unsigned char *zl, int index, unsigned int num)
ziplistFind	ziplist.c	/^unsigned char *ziplistFind(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip) {$/;"	f	signature:(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip)
ziplistFind	ziplist.h	/^unsigned char *ziplistFind(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip);$/;"	p	signature:(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip)
ziplistGet	ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval) {$/;"	f	signature:(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval)
ziplistGet	ziplist.h	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sval, unsigned int *slen, long long *lval);$/;"	p	signature:(unsigned char *p, unsigned char **sval, unsigned int *slen, long long *lval)
ziplistGetObject	t_zset.c	/^robj *ziplistGetObject(unsigned char *sptr) {$/;"	f	signature:(unsigned char *sptr)
ziplistIndex	ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f	signature:(unsigned char *zl, int index)
ziplistIndex	ziplist.h	/^unsigned char *ziplistIndex(unsigned char *zl, int index);$/;"	p	signature:(unsigned char *zl, int index)
ziplistInsert	ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f	signature:(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen)
ziplistInsert	ziplist.h	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen);$/;"	p	signature:(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen)
ziplistLen	ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f	signature:(unsigned char *zl)
ziplistLen	ziplist.h	/^unsigned int ziplistLen(unsigned char *zl);$/;"	p	signature:(unsigned char *zl)
ziplistMerge	ziplist.c	/^unsigned char *ziplistMerge(unsigned char **first, unsigned char **second) {$/;"	f	signature:(unsigned char **first, unsigned char **second)
ziplistMerge	ziplist.h	/^unsigned char *ziplistMerge(unsigned char **first, unsigned char **second);$/;"	p	signature:(unsigned char **first, unsigned char **second)
ziplistNew	ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f	signature:(void)
ziplistNew	ziplist.h	/^unsigned char *ziplistNew(void);$/;"	p	signature:(void)
ziplistNext	ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f	signature:(unsigned char *zl, unsigned char *p)
ziplistNext	ziplist.h	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p);$/;"	p	signature:(unsigned char *zl, unsigned char *p)
ziplistPrev	ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f	signature:(unsigned char *zl, unsigned char *p)
ziplistPrev	ziplist.h	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p);$/;"	p	signature:(unsigned char *zl, unsigned char *p)
ziplistPush	ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f	signature:(unsigned char *zl, unsigned char *s, unsigned int slen, int where)
ziplistPush	ziplist.h	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where);$/;"	p	signature:(unsigned char *zl, unsigned char *s, unsigned int slen, int where)
ziplistRepr	ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f	signature:(unsigned char *zl)
ziplistRepr	ziplist.c	/^void ziplistRepr(unsigned char *zl);$/;"	p	file:	signature:(unsigned char *zl)
ziplistResize	ziplist.c	/^unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {$/;"	f	signature:(unsigned char *zl, unsigned int len)
ziplistTest	ziplist.c	/^int ziplistTest(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
ziplistTest	ziplist.h	/^int ziplistTest(int argc, char *argv[]);$/;"	p	signature:(int argc, char *argv[])
zipmapBlobLen	zipmap.c	/^size_t zipmapBlobLen(unsigned char *zm) {$/;"	f	signature:(unsigned char *zm)
zipmapBlobLen	zipmap.h	/^size_t zipmapBlobLen(unsigned char *zm);$/;"	p	signature:(unsigned char *zm)
zipmapDecodeLength	zipmap.c	/^static unsigned int zipmapDecodeLength(unsigned char *p) {$/;"	f	file:	signature:(unsigned char *p)
zipmapDel	zipmap.c	/^unsigned char *zipmapDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted) {$/;"	f	signature:(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted)
zipmapDel	zipmap.h	/^unsigned char *zipmapDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted);$/;"	p	signature:(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted)
zipmapEncodeLength	zipmap.c	/^static unsigned int zipmapEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:	signature:(unsigned char *p, unsigned int len)
zipmapExists	zipmap.c	/^int zipmapExists(unsigned char *zm, unsigned char *key, unsigned int klen) {$/;"	f	signature:(unsigned char *zm, unsigned char *key, unsigned int klen)
zipmapExists	zipmap.h	/^int zipmapExists(unsigned char *zm, unsigned char *key, unsigned int klen);$/;"	p	signature:(unsigned char *zm, unsigned char *key, unsigned int klen)
zipmapGet	zipmap.c	/^int zipmapGet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen) {$/;"	f	signature:(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen)
zipmapGet	zipmap.h	/^int zipmapGet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen);$/;"	p	signature:(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen)
zipmapLen	zipmap.c	/^unsigned int zipmapLen(unsigned char *zm) {$/;"	f	signature:(unsigned char *zm)
zipmapLen	zipmap.h	/^unsigned int zipmapLen(unsigned char *zm);$/;"	p	signature:(unsigned char *zm)
zipmapLookupRaw	zipmap.c	/^static unsigned char *zipmapLookupRaw(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned int *totlen) {$/;"	f	file:	signature:(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned int *totlen)
zipmapNew	zipmap.c	/^unsigned char *zipmapNew(void) {$/;"	f	signature:(void)
zipmapNew	zipmap.h	/^unsigned char *zipmapNew(void);$/;"	p	signature:(void)
zipmapNext	zipmap.c	/^unsigned char *zipmapNext(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen) {$/;"	f	signature:(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen)
zipmapNext	zipmap.h	/^unsigned char *zipmapNext(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen);$/;"	p	signature:(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen)
zipmapRawEntryLength	zipmap.c	/^static unsigned int zipmapRawEntryLength(unsigned char *p) {$/;"	f	file:	signature:(unsigned char *p)
zipmapRawKeyLength	zipmap.c	/^static unsigned int zipmapRawKeyLength(unsigned char *p) {$/;"	f	file:	signature:(unsigned char *p)
zipmapRawValueLength	zipmap.c	/^static unsigned int zipmapRawValueLength(unsigned char *p) {$/;"	f	file:	signature:(unsigned char *p)
zipmapRepr	zipmap.c	/^static void zipmapRepr(unsigned char *p) {$/;"	f	file:	signature:(unsigned char *p)
zipmapRepr	zipmap.h	/^void zipmapRepr(unsigned char *p);$/;"	p	signature:(unsigned char *p)
zipmapRequiredLength	zipmap.c	/^static unsigned long zipmapRequiredLength(unsigned int klen, unsigned int vlen) {$/;"	f	file:	signature:(unsigned int klen, unsigned int vlen)
zipmapResize	zipmap.c	/^static inline unsigned char *zipmapResize(unsigned char *zm, unsigned int len) {$/;"	f	file:	signature:(unsigned char *zm, unsigned int len)
zipmapRewind	zipmap.c	/^unsigned char *zipmapRewind(unsigned char *zm) {$/;"	f	signature:(unsigned char *zm)
zipmapRewind	zipmap.h	/^unsigned char *zipmapRewind(unsigned char *zm);$/;"	p	signature:(unsigned char *zm)
zipmapSet	zipmap.c	/^unsigned char *zipmapSet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update) {$/;"	f	signature:(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update)
zipmapSet	zipmap.h	/^unsigned char *zipmapSet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update);$/;"	p	signature:(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update)
zipmapTest	zipmap.c	/^int zipmapTest(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
zipmapTest	zipmap.h	/^int zipmapTest(int argc, char *argv[]);$/;"	p	signature:(int argc, char *argv[])
zl	quicklist.h	/^    unsigned char *zl;$/;"	m	struct:quicklistNode	access:public
zl	t_zset.c	/^                unsigned char *zl;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon20	file:	access:public
zl	t_zset.c	/^            } zl;$/;"	m	union:__anon16::__anon17::_iterzset	typeref:struct:__anon16::__anon17::_iterzset::__anon20	file:	access:public
zlentry	ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
zlentry::encoding	ziplist.c	/^    unsigned char encoding;$/;"	m	struct:zlentry	file:	access:public
zlentry::headersize	ziplist.c	/^    unsigned int headersize;$/;"	m	struct:zlentry	file:	access:public
zlentry::len	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:	access:public
zlentry::lensize	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:	access:public
zlentry::p	ziplist.c	/^    unsigned char *p;$/;"	m	struct:zlentry	file:	access:public
zlentry::prevrawlen	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:	access:public
zlentry::prevrawlensize	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:	access:public
zlexcountCommand	server.h	/^void zlexcountCommand(client *c);$/;"	p	signature:(client *c)
zlexcountCommand	t_zset.c	/^void zlexcountCommand(client *c) {$/;"	f	signature:(client *c)
zlexrangespec	server.h	/^} zlexrangespec;$/;"	t	typeref:struct:__anon37
zlibc_free	zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f	signature:(void *ptr)
zlibc_free	zmalloc.h	/^void zlibc_free(void *ptr);$/;"	p	signature:(void *ptr)
zmalloc	zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f	signature:(size_t size)
zmalloc	zmalloc.h	/^void *zmalloc(size_t size);$/;"	p	signature:(size_t size)
zmalloc_default_oom	zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:	signature:(size_t size)
zmalloc_enable_thread_safeness	zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f	signature:(void)
zmalloc_enable_thread_safeness	zmalloc.h	/^void zmalloc_enable_thread_safeness(void);$/;"	p	signature:(void)
zmalloc_get_fragmentation_ratio	zmalloc.c	/^float zmalloc_get_fragmentation_ratio(size_t rss) {$/;"	f	signature:(size_t rss)
zmalloc_get_fragmentation_ratio	zmalloc.h	/^float zmalloc_get_fragmentation_ratio(size_t rss);$/;"	p	signature:(size_t rss)
zmalloc_get_memory_size	zmalloc.c	/^size_t zmalloc_get_memory_size(void) {$/;"	f	signature:(void)
zmalloc_get_memory_size	zmalloc.h	/^size_t zmalloc_get_memory_size(void);$/;"	p	signature:(void)
zmalloc_get_private_dirty	zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f	signature:(void)
zmalloc_get_private_dirty	zmalloc.h	/^size_t zmalloc_get_private_dirty(void);$/;"	p	signature:(void)
zmalloc_get_rss	zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f	signature:(void)
zmalloc_get_rss	zmalloc.h	/^size_t zmalloc_get_rss(void);$/;"	p	signature:(void)
zmalloc_get_smap_bytes_by_field	zmalloc.c	/^size_t zmalloc_get_smap_bytes_by_field(char *field) {$/;"	f	signature:(char *field)
zmalloc_get_smap_bytes_by_field	zmalloc.h	/^size_t zmalloc_get_smap_bytes_by_field(char *field);$/;"	p	signature:(char *field)
zmalloc_oom_handler	zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_set_oom_handler	zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f	signature:(void (*oom_handler)(size_t))
zmalloc_set_oom_handler	zmalloc.h	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t));$/;"	p	signature:(void (*oom_handler)(size_t))
zmalloc_size	zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f	signature:(void *ptr)
zmalloc_size	zmalloc.h	/^size_t zmalloc_size(void *ptr);$/;"	p	signature:(void *ptr)
zmalloc_size	zmalloc.h	43;"	d
zmalloc_size	zmalloc.h	53;"	d
zmalloc_size	zmalloc.h	61;"	d
zmalloc_thread_safe	zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_used_memory	zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f	signature:(void)
zmalloc_used_memory	zmalloc.h	/^size_t zmalloc_used_memory(void);$/;"	p	signature:(void)
zrangeCommand	server.h	/^void zrangeCommand(client *c);$/;"	p	signature:(client *c)
zrangeCommand	t_zset.c	/^void zrangeCommand(client *c) {$/;"	f	signature:(client *c)
zrangeGenericCommand	t_zset.c	/^void zrangeGenericCommand(client *c, int reverse) {$/;"	f	signature:(client *c, int reverse)
zrangebylexCommand	server.h	/^void zrangebylexCommand(client *c);$/;"	p	signature:(client *c)
zrangebylexCommand	t_zset.c	/^void zrangebylexCommand(client *c) {$/;"	f	signature:(client *c)
zrangebyscoreCommand	server.h	/^void zrangebyscoreCommand(client *c);$/;"	p	signature:(client *c)
zrangebyscoreCommand	t_zset.c	/^void zrangebyscoreCommand(client *c) {$/;"	f	signature:(client *c)
zrangespec	server.h	/^} zrangespec;$/;"	t	typeref:struct:__anon36
zrankCommand	server.h	/^void zrankCommand(client *c);$/;"	p	signature:(client *c)
zrankCommand	t_zset.c	/^void zrankCommand(client *c) {$/;"	f	signature:(client *c)
zrankGenericCommand	t_zset.c	/^void zrankGenericCommand(client *c, int reverse) {$/;"	f	signature:(client *c, int reverse)
zrealloc	zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f	signature:(void *ptr, size_t size)
zrealloc	zmalloc.h	/^void *zrealloc(void *ptr, size_t size);$/;"	p	signature:(void *ptr, size_t size)
zremCommand	server.h	/^void zremCommand(client *c);$/;"	p	signature:(client *c)
zremCommand	t_zset.c	/^void zremCommand(client *c) {$/;"	f	signature:(client *c)
zremrangeGenericCommand	t_zset.c	/^void zremrangeGenericCommand(client *c, int rangetype) {$/;"	f	signature:(client *c, int rangetype)
zremrangebylexCommand	server.h	/^void zremrangebylexCommand(client *c);$/;"	p	signature:(client *c)
zremrangebylexCommand	t_zset.c	/^void zremrangebylexCommand(client *c) {$/;"	f	signature:(client *c)
zremrangebyrankCommand	server.h	/^void zremrangebyrankCommand(client *c);$/;"	p	signature:(client *c)
zremrangebyrankCommand	t_zset.c	/^void zremrangebyrankCommand(client *c) {$/;"	f	signature:(client *c)
zremrangebyscoreCommand	server.h	/^void zremrangebyscoreCommand(client *c);$/;"	p	signature:(client *c)
zremrangebyscoreCommand	t_zset.c	/^void zremrangebyscoreCommand(client *c) {$/;"	f	signature:(client *c)
zrevrangeCommand	server.h	/^void zrevrangeCommand(client *c);$/;"	p	signature:(client *c)
zrevrangeCommand	t_zset.c	/^void zrevrangeCommand(client *c) {$/;"	f	signature:(client *c)
zrevrangebylexCommand	server.h	/^void zrevrangebylexCommand(client *c);$/;"	p	signature:(client *c)
zrevrangebylexCommand	t_zset.c	/^void zrevrangebylexCommand(client *c) {$/;"	f	signature:(client *c)
zrevrangebyscoreCommand	server.h	/^void zrevrangebyscoreCommand(client *c);$/;"	p	signature:(client *c)
zrevrangebyscoreCommand	t_zset.c	/^void zrevrangebyscoreCommand(client *c) {$/;"	f	signature:(client *c)
zrevrankCommand	server.h	/^void zrevrankCommand(client *c);$/;"	p	signature:(client *c)
zrevrankCommand	t_zset.c	/^void zrevrankCommand(client *c) {$/;"	f	signature:(client *c)
zs	t_zset.c	/^                zset *zs;$/;"	m	struct:__anon16::__anon17::_iterzset::__anon21	file:	access:public
zscanCommand	server.h	/^void zscanCommand(client *c);$/;"	p	signature:(client *c)
zscanCommand	t_zset.c	/^void zscanCommand(client *c) {$/;"	f	signature:(client *c)
zscoreCommand	server.h	/^void zscoreCommand(client *c);$/;"	p	signature:(client *c)
zscoreCommand	t_zset.c	/^void zscoreCommand(client *c) {$/;"	f	signature:(client *c)
zset	server.h	/^typedef struct zset {$/;"	s
zset	server.h	/^} zset;$/;"	t	typeref:struct:zset
zset	t_zset.c	/^        } zset;$/;"	m	union:__anon16::__anon17	typeref:union:__anon16::__anon17::_iterzset	file:	access:public
zset::dict	server.h	/^    dict *dict;$/;"	m	struct:zset	access:public
zset::zsl	server.h	/^    zskiplist *zsl;$/;"	m	struct:zset	access:public
zsetConvert	server.h	/^void zsetConvert(robj *zobj, int encoding);$/;"	p	signature:(robj *zobj, int encoding)
zsetConvert	t_zset.c	/^void zsetConvert(robj *zobj, int encoding) {$/;"	f	signature:(robj *zobj, int encoding)
zsetConvertToZiplistIfNeeded	server.h	/^void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen);$/;"	p	signature:(robj *zobj, size_t maxelelen)
zsetConvertToZiplistIfNeeded	t_zset.c	/^void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen) {$/;"	f	signature:(robj *zobj, size_t maxelelen)
zsetDictType	server.c	/^dictType zsetDictType = {$/;"	v
zsetLength	server.h	/^unsigned int zsetLength(robj *zobj);$/;"	p	signature:(robj *zobj)
zsetLength	t_zset.c	/^unsigned int zsetLength(robj *zobj) {$/;"	f	signature:(robj *zobj)
zsetScore	server.h	/^int zsetScore(robj *zobj, robj *member, double *score);$/;"	p	signature:(robj *zobj, robj *member, double *score)
zsetScore	t_zset.c	/^int zsetScore(robj *zobj, robj *member, double *score) {$/;"	f	signature:(robj *zobj, robj *member, double *score)
zset_max_ziplist_entries	server.h	/^    size_t zset_max_ziplist_entries;$/;"	m	struct:redisServer	access:public
zset_max_ziplist_value	server.h	/^    size_t zset_max_ziplist_value;$/;"	m	struct:redisServer	access:public
zsetopsrc	t_zset.c	/^} zsetopsrc;$/;"	t	typeref:struct:__anon16	file:
zsetopval	t_zset.c	/^} zsetopval;$/;"	t	typeref:struct:__anon22	file:
zskiplist	server.h	/^typedef struct zskiplist {$/;"	s
zskiplist	server.h	/^} zskiplist;$/;"	t	typeref:struct:zskiplist
zskiplist::header	server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::zskiplistNode	access:public
zskiplist::length	server.h	/^    unsigned long length;$/;"	m	struct:zskiplist	access:public
zskiplist::level	server.h	/^    int level;$/;"	m	struct:zskiplist	access:public
zskiplist::tail	server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::	access:public
zskiplistLevel	server.h	/^    struct zskiplistLevel {$/;"	s	struct:zskiplistNode	access:public
zskiplistNode	server.h	/^typedef struct zskiplistNode {$/;"	s
zskiplistNode	server.h	/^} zskiplistNode;$/;"	t	typeref:struct:zskiplistNode
zskiplistNode::backward	server.h	/^    struct zskiplistNode *backward;$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistNode	access:public
zskiplistNode::level	server.h	/^    } level[];$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistLevel	access:public
zskiplistNode::obj	server.h	/^    robj *obj;$/;"	m	struct:zskiplistNode	access:public
zskiplistNode::score	server.h	/^    double score;$/;"	m	struct:zskiplistNode	access:public
zskiplistNode::zskiplistLevel	server.h	/^    struct zskiplistLevel {$/;"	s	struct:zskiplistNode	access:public
zskiplistNode::zskiplistLevel::forward	server.h	/^        struct zskiplistNode *forward;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:struct:zskiplistNode::zskiplistLevel::zskiplistNode	access:public
zskiplistNode::zskiplistLevel::span	server.h	/^        unsigned int span;$/;"	m	struct:zskiplistNode::zskiplistLevel	access:public
zsl	server.h	/^    zskiplist *zsl;$/;"	m	struct:zset	access:public
zslCreate	server.h	/^zskiplist *zslCreate(void);$/;"	p	signature:(void)
zslCreate	t_zset.c	/^zskiplist *zslCreate(void) {$/;"	f	signature:(void)
zslCreateNode	t_zset.c	/^zskiplistNode *zslCreateNode(int level, double score, robj *obj) {$/;"	f	signature:(int level, double score, robj *obj)
zslDelete	server.h	/^int zslDelete(zskiplist *zsl, double score, robj *obj);$/;"	p	signature:(zskiplist *zsl, double score, robj *obj)
zslDelete	t_zset.c	/^int zslDelete(zskiplist *zsl, double score, robj *obj) {$/;"	f	signature:(zskiplist *zsl, double score, robj *obj)
zslDeleteNode	t_zset.c	/^void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {$/;"	f	signature:(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update)
zslDeleteRangeByLex	t_zset.c	/^unsigned long zslDeleteRangeByLex(zskiplist *zsl, zlexrangespec *range, dict *dict) {$/;"	f	signature:(zskiplist *zsl, zlexrangespec *range, dict *dict)
zslDeleteRangeByRank	t_zset.c	/^unsigned long zslDeleteRangeByRank(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict) {$/;"	f	signature:(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict)
zslDeleteRangeByScore	t_zset.c	/^unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec *range, dict *dict) {$/;"	f	signature:(zskiplist *zsl, zrangespec *range, dict *dict)
zslFirstInLexRange	t_zset.c	/^zskiplistNode *zslFirstInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f	signature:(zskiplist *zsl, zlexrangespec *range)
zslFirstInRange	server.h	/^zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range);$/;"	p	signature:(zskiplist *zsl, zrangespec *range)
zslFirstInRange	t_zset.c	/^zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range) {$/;"	f	signature:(zskiplist *zsl, zrangespec *range)
zslFree	server.h	/^void zslFree(zskiplist *zsl);$/;"	p	signature:(zskiplist *zsl)
zslFree	t_zset.c	/^void zslFree(zskiplist *zsl) {$/;"	f	signature:(zskiplist *zsl)
zslFreeLexRange	t_zset.c	/^void zslFreeLexRange(zlexrangespec *spec) {$/;"	f	signature:(zlexrangespec *spec)
zslFreeNode	t_zset.c	/^void zslFreeNode(zskiplistNode *node) {$/;"	f	signature:(zskiplistNode *node)
zslGetElementByRank	slots_async.c	/^extern zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank);$/;"	p	file:	signature:(zskiplist *zsl, unsigned long rank)
zslGetElementByRank	sort.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank);$/;"	p	file:	signature:(zskiplist *zsl, unsigned long rank)
zslGetElementByRank	t_zset.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank) {$/;"	f	signature:(zskiplist *zsl, unsigned long rank)
zslGetRank	server.h	/^unsigned long zslGetRank(zskiplist *zsl, double score, robj *o);$/;"	p	signature:(zskiplist *zsl, double score, robj *o)
zslGetRank	t_zset.c	/^unsigned long zslGetRank(zskiplist *zsl, double score, robj *o) {$/;"	f	signature:(zskiplist *zsl, double score, robj *o)
zslInsert	server.h	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj);$/;"	p	signature:(zskiplist *zsl, double score, robj *obj)
zslInsert	t_zset.c	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {$/;"	f	signature:(zskiplist *zsl, double score, robj *obj)
zslIsInLexRange	t_zset.c	/^int zslIsInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f	signature:(zskiplist *zsl, zlexrangespec *range)
zslIsInRange	t_zset.c	/^int zslIsInRange(zskiplist *zsl, zrangespec *range) {$/;"	f	signature:(zskiplist *zsl, zrangespec *range)
zslLastInLexRange	t_zset.c	/^zskiplistNode *zslLastInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f	signature:(zskiplist *zsl, zlexrangespec *range)
zslLastInRange	server.h	/^zskiplistNode *zslLastInRange(zskiplist *zsl, zrangespec *range);$/;"	p	signature:(zskiplist *zsl, zrangespec *range)
zslLastInRange	t_zset.c	/^zskiplistNode *zslLastInRange(zskiplist *zsl, zrangespec *range) {$/;"	f	signature:(zskiplist *zsl, zrangespec *range)
zslLexValueGteMin	t_zset.c	/^static int zslLexValueGteMin(robj *value, zlexrangespec *spec) {$/;"	f	file:	signature:(robj *value, zlexrangespec *spec)
zslLexValueGteMin	t_zset.c	/^static int zslLexValueGteMin(robj *value, zlexrangespec *spec);$/;"	p	file:	signature:(robj *value, zlexrangespec *spec)
zslLexValueLteMax	t_zset.c	/^static int zslLexValueLteMax(robj *value, zlexrangespec *spec) {$/;"	f	file:	signature:(robj *value, zlexrangespec *spec)
zslLexValueLteMax	t_zset.c	/^static int zslLexValueLteMax(robj *value, zlexrangespec *spec);$/;"	p	file:	signature:(robj *value, zlexrangespec *spec)
zslParseLexRange	t_zset.c	/^static int zslParseLexRange(robj *min, robj *max, zlexrangespec *spec) {$/;"	f	file:	signature:(robj *min, robj *max, zlexrangespec *spec)
zslParseLexRangeItem	t_zset.c	/^int zslParseLexRangeItem(robj *item, robj **dest, int *ex) {$/;"	f	signature:(robj *item, robj **dest, int *ex)
zslParseRange	t_zset.c	/^static int zslParseRange(robj *min, robj *max, zrangespec *spec) {$/;"	f	file:	signature:(robj *min, robj *max, zrangespec *spec)
zslRandomLevel	t_zset.c	/^int zslRandomLevel(void) {$/;"	f	signature:(void)
zslValueGteMin	t_zset.c	/^static int zslValueGteMin(double value, zrangespec *spec) {$/;"	f	file:	signature:(double value, zrangespec *spec)
zslValueLteMax	geo.c	/^int zslValueLteMax(double value, zrangespec *spec);$/;"	p	file:	signature:(double value, zrangespec *spec)
zslValueLteMax	t_zset.c	/^int zslValueLteMax(double value, zrangespec *spec) {$/;"	f	signature:(double value, zrangespec *spec)
zstrdup	zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f	signature:(const char *s)
zstrdup	zmalloc.h	/^char *zstrdup(const char *s);$/;"	p	signature:(const char *s)
zuiBufferFromValue	t_zset.c	/^int zuiBufferFromValue(zsetopval *val) {$/;"	f	signature:(zsetopval *val)
zuiClearIterator	t_zset.c	/^void zuiClearIterator(zsetopsrc *op) {$/;"	f	signature:(zsetopsrc *op)
zuiCompareByCardinality	t_zset.c	/^int zuiCompareByCardinality(const void *s1, const void *s2) {$/;"	f	signature:(const void *s1, const void *s2)
zuiFind	t_zset.c	/^int zuiFind(zsetopsrc *op, zsetopval *val, double *score) {$/;"	f	signature:(zsetopsrc *op, zsetopval *val, double *score)
zuiInitIterator	t_zset.c	/^void zuiInitIterator(zsetopsrc *op) {$/;"	f	signature:(zsetopsrc *op)
zuiLength	t_zset.c	/^int zuiLength(zsetopsrc *op) {$/;"	f	signature:(zsetopsrc *op)
zuiLongLongFromValue	t_zset.c	/^int zuiLongLongFromValue(zsetopval *val) {$/;"	f	signature:(zsetopval *val)
zuiNext	t_zset.c	/^int zuiNext(zsetopsrc *op, zsetopval *val) {$/;"	f	signature:(zsetopsrc *op, zsetopval *val)
zuiObjectFromValue	t_zset.c	/^robj *zuiObjectFromValue(zsetopval *val) {$/;"	f	signature:(zsetopval *val)
zunionInterAggregate	t_zset.c	/^inline static void zunionInterAggregate(double *target, double val, int aggregate) {$/;"	f	file:	signature:(double *target, double val, int aggregate)
zunionInterDictValue	t_zset.c	1918;"	d	file:
zunionInterGenericCommand	t_zset.c	/^void zunionInterGenericCommand(client *c, robj *dstkey, int op) {$/;"	f	signature:(client *c, robj *dstkey, int op)
zunionInterGetKeys	db.c	/^int *zunionInterGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f	signature:(struct redisCommand *cmd, robj **argv, int argc, int *numkeys)
zunionInterGetKeys	server.h	/^int *zunionInterGetKeys(struct redisCommand *cmd,robj **argv, int argc, int *numkeys);$/;"	p	signature:(struct redisCommand *cmd,robj **argv, int argc, int *numkeys)
zunionstoreCommand	server.h	/^void zunionstoreCommand(client *c);$/;"	p	signature:(client *c)
zunionstoreCommand	t_zset.c	/^void zunionstoreCommand(client *c) {$/;"	f	signature:(client *c)
zzlCompareElements	t_zset.c	/^int zzlCompareElements(unsigned char *eptr, unsigned char *cstr, unsigned int clen) {$/;"	f	signature:(unsigned char *eptr, unsigned char *cstr, unsigned int clen)
zzlDelete	t_zset.c	/^unsigned char *zzlDelete(unsigned char *zl, unsigned char *eptr) {$/;"	f	signature:(unsigned char *zl, unsigned char *eptr)
zzlDeleteRangeByLex	t_zset.c	/^unsigned char *zzlDeleteRangeByLex(unsigned char *zl, zlexrangespec *range, unsigned long *deleted) {$/;"	f	signature:(unsigned char *zl, zlexrangespec *range, unsigned long *deleted)
zzlDeleteRangeByRank	t_zset.c	/^unsigned char *zzlDeleteRangeByRank(unsigned char *zl, unsigned int start, unsigned int end, unsigned long *deleted) {$/;"	f	signature:(unsigned char *zl, unsigned int start, unsigned int end, unsigned long *deleted)
zzlDeleteRangeByScore	t_zset.c	/^unsigned char *zzlDeleteRangeByScore(unsigned char *zl, zrangespec *range, unsigned long *deleted) {$/;"	f	signature:(unsigned char *zl, zrangespec *range, unsigned long *deleted)
zzlFind	t_zset.c	/^unsigned char *zzlFind(unsigned char *zl, robj *ele, double *score) {$/;"	f	signature:(unsigned char *zl, robj *ele, double *score)
zzlFirstInLexRange	t_zset.c	/^unsigned char *zzlFirstInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f	signature:(unsigned char *zl, zlexrangespec *range)
zzlFirstInRange	geo.c	/^unsigned char *zzlFirstInRange(unsigned char *zl, zrangespec *range);$/;"	p	file:	signature:(unsigned char *zl, zrangespec *range)
zzlFirstInRange	t_zset.c	/^unsigned char *zzlFirstInRange(unsigned char *zl, zrangespec *range) {$/;"	f	signature:(unsigned char *zl, zrangespec *range)
zzlGetScore	server.h	/^double zzlGetScore(unsigned char *sptr);$/;"	p	signature:(unsigned char *sptr)
zzlGetScore	t_zset.c	/^double zzlGetScore(unsigned char *sptr) {$/;"	f	signature:(unsigned char *sptr)
zzlInsert	server.h	/^unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score);$/;"	p	signature:(unsigned char *zl, robj *ele, double score)
zzlInsert	t_zset.c	/^unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score) {$/;"	f	signature:(unsigned char *zl, robj *ele, double score)
zzlInsertAt	t_zset.c	/^unsigned char *zzlInsertAt(unsigned char *zl, unsigned char *eptr, robj *ele, double score) {$/;"	f	signature:(unsigned char *zl, unsigned char *eptr, robj *ele, double score)
zzlIsInLexRange	t_zset.c	/^int zzlIsInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f	signature:(unsigned char *zl, zlexrangespec *range)
zzlIsInRange	t_zset.c	/^int zzlIsInRange(unsigned char *zl, zrangespec *range) {$/;"	f	signature:(unsigned char *zl, zrangespec *range)
zzlLastInLexRange	t_zset.c	/^unsigned char *zzlLastInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f	signature:(unsigned char *zl, zlexrangespec *range)
zzlLastInRange	t_zset.c	/^unsigned char *zzlLastInRange(unsigned char *zl, zrangespec *range) {$/;"	f	signature:(unsigned char *zl, zrangespec *range)
zzlLength	t_zset.c	/^unsigned int zzlLength(unsigned char *zl) {$/;"	f	signature:(unsigned char *zl)
zzlLexValueGteMin	t_zset.c	/^static int zzlLexValueGteMin(unsigned char *p, zlexrangespec *spec) {$/;"	f	file:	signature:(unsigned char *p, zlexrangespec *spec)
zzlLexValueLteMax	t_zset.c	/^static int zzlLexValueLteMax(unsigned char *p, zlexrangespec *spec) {$/;"	f	file:	signature:(unsigned char *p, zlexrangespec *spec)
zzlNext	server.h	/^void zzlNext(unsigned char *zl, unsigned char **eptr, unsigned char **sptr);$/;"	p	signature:(unsigned char *zl, unsigned char **eptr, unsigned char **sptr)
zzlNext	t_zset.c	/^void zzlNext(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f	signature:(unsigned char *zl, unsigned char **eptr, unsigned char **sptr)
zzlPrev	server.h	/^void zzlPrev(unsigned char *zl, unsigned char **eptr, unsigned char **sptr);$/;"	p	signature:(unsigned char *zl, unsigned char **eptr, unsigned char **sptr)
zzlPrev	t_zset.c	/^void zzlPrev(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f	signature:(unsigned char *zl, unsigned char **eptr, unsigned char **sptr)
